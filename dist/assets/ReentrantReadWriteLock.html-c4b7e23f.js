const e=JSON.parse('{"key":"v-4c7ec7a6","path":"/thread/ReentrantReadWriteLock.html","title":"深入理解Java并发读写锁ReentrantReadWriteLock","lang":"zh-CN","frontmatter":{"title":"深入理解Java并发读写锁ReentrantReadWriteLock","shortTitle":"ReentrantReadWriteLock","description":"ReentrantReadWriteLock 是 Java 的一种读写锁，它允许多个读线程同时访问，但只允许一个写线程访问，或者阻塞所有的读写线程。这种锁的设计可以提高性能，特别是在读操作的数量远远超过写操作的情况下。","category":["Java核心"],"tag":["Java并发编程"],"head":[["meta",{"name":"keywords","content":"Java,并发编程,多线程,Thread,读写锁,ReentrantReadWriteLock"}],["meta",{"property":"og:url","content":"https://javabetter.cn/thread/ReentrantReadWriteLock.html"}],["meta",{"property":"og:site_name","content":"二哥的Java进阶之路"}],["meta",{"property":"og:title","content":"深入理解Java并发读写锁ReentrantReadWriteLock"}],["meta",{"property":"og:description","content":"ReentrantReadWriteLock 是 Java 的一种读写锁，它允许多个读线程同时访问，但只允许一个写线程访问，或者阻塞所有的读写线程。这种锁的设计可以提高性能，特别是在读操作的数量远远超过写操作的情况下。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-08T12:03:00.000Z"}],["meta",{"property":"article:author","content":"沉默王二"}],["meta",{"property":"article:tag","content":"Java并发编程"}],["meta",{"property":"article:modified_time","content":"2023-12-08T12:03:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"深入理解Java并发读写锁ReentrantReadWriteLock\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-08T12:03:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"沉默王二\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"写锁详解","slug":"写锁详解","link":"#写锁详解","children":[{"level":3,"title":"写锁的获取","slug":"写锁的获取","link":"#写锁的获取","children":[]},{"level":3,"title":"写锁的释放","slug":"写锁的释放","link":"#写锁的释放","children":[]}]},{"level":2,"title":"读锁详解","slug":"读锁详解","link":"#读锁详解","children":[{"level":3,"title":"读锁的获取","slug":"读锁的获取","link":"#读锁的获取","children":[]},{"level":3,"title":"读锁的释放","slug":"读锁的释放","link":"#读锁的释放","children":[]}]},{"level":2,"title":"锁降级","slug":"锁降级","link":"#锁降级","children":[]},{"level":2,"title":"使用读写锁","slug":"使用读写锁","link":"#使用读写锁","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1648037338000,"updatedTime":1702036980000,"contributors":[{"name":"itwanger","email":"www.qing_gee@163.com","commits":18},{"name":"沉默王二","email":"www.qing_gee@163.com","commits":3}]},"readingTime":{"minutes":13.43,"words":4028},"filePathRelative":"thread/ReentrantReadWriteLock.md","localizedDate":"2022年3月23日","excerpt":"<h1> 第十六节：读写锁 ReentrantReadWriteLock</h1>\\n<p>ReentrantReadWriteLock 是 Java 的一种读写锁，它允许多个读线程同时访问，但只允许一个写线程访问（会阻塞所有的读写线程）。这种锁的设计可以提高性能，特别是在读操作的数量远远超过写操作的情况下。</p>\\n<p>在并发场景中，为了解决线程安全问题，我们通常会使用关键字 <a href=\\"https://javabetter.cn/thread/synchronized-1.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">synchronized</a> 或者 JUC 包中实现了 Lock 接口的 <a href=\\"https://javabetter.cn/thread/reentrantLock.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ReentrantLock</a>。但它们都是独占式获取锁，也就是在同一时刻只有一个线程能够获取锁。</p>"}');export{e as data};
