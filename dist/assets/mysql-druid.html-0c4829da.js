import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as r,a as n,d as a,b as s,e as t}from"./app-72970f25.js";const c={},p=n("h2",{id:"mysql-简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mysql-简介","aria-hidden":"true"},"#"),a(" MySQL 简介")],-1),d=n("p",null,"MySQL 是目前项目中运用最广泛的关系型数据库，无论是互联网大厂，还是中小型公司，几乎都在用。",-1),u=n("p",null,"MySQL 体积小、速度快、源码开放，所以广受开发者喜爱。",-1),m=n("p",null,"MySQL 的安装非常简单，针对不同的操作系统，MySQL 都提供了安装包的下载。",-1),b=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/mysql-druid-f75e7dfe-7dc2-43b2-94d1-68ff775cd2ed.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),g=n("p",null,"MySQL 目前主推的版本是 8.0，参考手册的地址如下所示：",-1),v={href:"https://dev.mysql.com/doc/refman/8.0/en/",target:"_blank",rel:"noopener noreferrer"},f=n("h2",{id:"如何安装-mysql",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#如何安装-mysql","aria-hidden":"true"},"#"),a(" 如何安装 MySQL")],-1),h={href:"https://javabetter.cn/mysql/install.html",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"如果有云服务器的话，建议安装在云服务器上，这样就可以长时间运行 MySQL 而不用担心服务重启的问题。按照步骤参照下面的文档。",-1),y={href:"https://dev.mysql.com/doc/refman/8.0/en/linux-installation.html",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"也可以直接通过宝塔面板的形式来安装，这样更省事省力省心。",-1),q={href:"https://www.bt.cn/new/download.html",target:"_blank",rel:"noopener noreferrer"},x=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/mysql-druid-89f6d126-b059-4511-b64d-720aa8df354f.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),S=n("p",null,"安装完成后，就可以在数据库管理页面添加数据库并且进行管理了。",-1),j=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/mysql-druid-86d80ab6-968e-42ec-a532-1eeb341779c1.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),w=n("p",null,"如果是 Windows 用户的话，安装步骤参照下面的文档。",-1),L={href:"https://dev.mysql.com/doc/refman/8.0/en/windows-installation.html",target:"_blank",rel:"noopener noreferrer"},I=n("p",null,"如果是 macOS 用户的话，安装步骤参照下面的文档。",-1),T={href:"https://dev.mysql.com/doc/refman/8.0/en/macos-installation-pkg.html",target:"_blank",rel:"noopener noreferrer"},D=n("p",null,"Windows 和 macOS 的安装都非常的简单，主要就是下载对应操作系统的 MySQL 包安装管理器。",-1),M=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/mysql-druid-ab94f6df-2031-42ff-8746-b4ad5a4e3a81.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),Q=n("p",null,"然后按照包安装向导的提示一步步傻瓜式安装即可。",-1),E=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/mysql-druid-e7031aec-74c5-4079-a6f3-97368c921620.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),z=n("h2",{id:"spring-boot-整合-mysql-数据库",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#spring-boot-整合-mysql-数据库","aria-hidden":"true"},"#"),a(" Spring Boot 整合 MySQL 数据库")],-1),B=n("p",null,"Spring Boot 整合 MySQL 数据库非常简单，只需要添加 MySQL 依赖并在配置文件中添加数据库配置即可。我们可以不用编写原始的访问数据库的代码，也不用调用 JDBC 或者连接池就可以访问 MySQL。",-1),A={href:"https://start.spring.io/",target:"_blank",rel:"noopener noreferrer"},N=t(`<figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/mysql-druid-d7765111-9dcb-4125-a87a-da1439a0a6cf.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>添加 MySQL 的 Java连接驱动依赖和 JDBC Starter。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/mysql-druid-201eb6fa-0a09-46d7-a555-3988bee92a9f.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对应pom.xml文件中的代码：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;dependency&gt;
    &lt;groupId&gt;mysql&lt;/groupId&gt;
    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
    &lt;scope&gt;runtime&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2）通过宝塔面板新建codingmore-mysql数据库并添加数据表</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>CREATE TABLE \`user\` (
  \`id\` int NOT NULL,
  \`name\` varchar(10) NOT NULL,
  \`password\` varchar(10) NOT NULL,
  \`age\` int NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;

--
-- 转储表的索引
--

--
-- 表的索引 \`user\`
--
ALTER TABLE \`user\`
  ADD PRIMARY KEY (\`id\`);
COMMIT;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后插入一条数据：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>INSERT INTO \`user\` (\`id\`, \`name\`, \`password\`, \`age\`) VALUES (&#39;1&#39;, &#39;沉默王二&#39;, &#39; 123456&#39;, &#39;18&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我把 SQL 语句放在源码的 resouces 目录里了</p><p><strong>3）在 application.yml 文件中添加数据库链接驱动信息</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>spring:
  datasource:
    username: codingmore-mysql
    password: YyfR4TDxCwrjZ2Fs
    url:jdbc: mysql://118.190.99.232:3306/codingmore-mysql?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai&amp;useSSL=false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推荐安装 Spring Initializr and assistant 插件。可以自动补全配置信息。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/mysql-druid-be486130-539a-49b5-ac6f-dc1bf7f8cba6.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>4）新建实体类 User.java</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建议在 pom.xml 文件中添加 lombok 的依赖。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
    &lt;artifactId&gt;lombok&lt;/artifactId&gt;
    &lt;version&gt;1.18.20&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5）在测试类中添加以下代码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">class</span> <span class="token class-name">CodingmoreMysqlApplicationTests</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> sql <span class="token operator">=</span><span class="token string">&quot;select * from user&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">mapRow</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> rowNum<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
                <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> user<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;查询成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;用户{}&quot;</span><span class="token punctuation">,</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring Boot 的测试类主要放置在 <code>src/test/java</code> 目录下面，项目创建成功后，Spring Boot 会根据项目名称自动为我们生成测试类。</p><p>比如说本次项目名为 codingmore-mysql，那么测试类名为 CodingmoreMysqlApplicationTests。</p><p><code>@SpringBootTest</code> 注解能够测试我们的项目主类，该项目为 CodingmoreMysqlApplication。</p><p><code>@Test</code> 注解是 junit 单元测试的注解，表示该方法为测试方法。</p><p><code>JdbcTemplate</code> 一个通过 JDBC 连接数据库的工具类，spring-boot-starter-jdbc 依赖中包含了该类。</p><p><code>@Resource</code> 注解会帮我们在 Spring Boot 启动的时候注入一个 JdbcTemplate 的对象。</p><p><code>jdbcTemplate.query()</code> 方法通过 SQL 语句和匿名内部类参数的形式，执行 SQL 并查询结果集。</p><p><code>RowMapper</code> 就是查询到的每一行数据对象，我们可以通过重写 mapRow 方法将数据结果集封装到 User 对象上。</p><p>右键菜单运行 testMysql 方法就可以在日志中看到 SQL 执行的结果。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/mysql-druid-92a53c8e-e99a-4ca6-8ad1-f5ec4653da3b.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="如何通过-navicat-连接-mysql" tabindex="-1"><a class="header-anchor" href="#如何通过-navicat-连接-mysql" aria-hidden="true">#</a> 如何通过 Navicat 连接 MySQL</h2><p>Navicat 是一个从我参加工作到现在一直都在用的 MySQL 客户端工具，通过 Navicat 可以轻松连接数据库，并执行增删改查操作。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/mysql-druid-2daef9fc-4a97-41bb-bd1c-875f468d90bc.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>连接数据库也非常的简单，只需要填写主机 IP 地址、端口、用户名和密码即可。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/mysql-druid-18d120ea-0f84-4ca0-b0fd-020587e43fc4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="如何通过-intellij-idea-连接-mysql" tabindex="-1"><a class="header-anchor" href="#如何通过-intellij-idea-连接-mysql" aria-hidden="true">#</a> 如何通过 Intellij IDEA 连接 MySQL</h2><p>除了 Navicat，还可以使用 Intellij IDEA 直连 MySQL。</p><p>点击「database」面板，在左上角选择 + 号，选择 DataSource，再选择 MySQL。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/mysql-druid-070ab8b8-0629-4238-b35d-438dbcbb130e.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在弹出面板中填写连接信息。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/mysql-druid-29ba218a-7528-49bf-b2da-c5fa48b40d2b.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果是第一次连接 MySQL 的话，记得点击「download」下载 MySQL 驱动，之后点击「test connection」测试是否链接成功，如果出现以下界面，则表示 OK。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/mysql-druid-1b86d117-412c-47a2-82c8-c22f9bcf6455.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>选择右侧的数据库表，双击，就可以查看到数据了。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/mysql-druid-8c0288ae-ee22-4983-8d91-7ed7125b17a5.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在「console」SQL 查询面板里可以编写 SQL 语句来执行增删改查操作。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/mysql-druid-e1c9e85c-382a-40a8-a4fa-3fe32ee612fb.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="spring-boot-整合-druid" tabindex="-1"><a class="header-anchor" href="#spring-boot-整合-druid" aria-hidden="true">#</a> Spring Boot 整合 Druid</h2><p>Druid 是阿里巴巴开源的一款数据库连接池，结合了C3P0、DBCP 等 DB 池的优点，同时还加入了日志监控。</p><p>Druid 在 GitHub 上已经收获了 25.4k 的 star，可以说非常的知名，从简介上也能看得出，Druid 就是为了监控而生的。</p>`,50),C={href:"https://github.com/alibaba/druid/",target:"_blank",rel:"noopener noreferrer"},O=t(`<figure><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/mysql-druid-a1f53d5b-1048-4707-bebc-1a59d7793880.png#id=n2yqp&amp;originHeight=552&amp;originWidth=1100&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Druid 包含了三个重要的组成部分：</p><ul><li>DruidDriver，能够提供基于 Filter-Chain 模式的插件体系；</li><li>DruidDataSource，高效可管理的数据库连接池；</li><li>SQLParser，支持所有 JDBC 兼容的数据库，包括 Oracle、MySQL 等。</li></ul><p>Spring Boot2.0 以上默认使用的是 Hikari 连接池，我们从之前的日志信息里就可以看得到。</p><figure><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/mysql-druid-0982b47e-b211-41a6-ab88-355e1d2ae7be.png#id=K9tfC&amp;originHeight=564&amp;originWidth=2744&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>那如果我们想使用 Druid 的话，该怎么整合呢？</p><p>这次我们直接在编程喵项目后端项目 codingmore-admin 上进行修改。</p><p>第一步，在 pom.xml 文件中添加 Druid 的依赖，官方已经提供了 starter，我们直接使用。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;dependency&gt;
    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
    &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;1.1.23&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步，在 application.yml 文件中添加 Druid 配置。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>spring:
  datasource:    
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      #初始化连接池大小
      initial-size: 5
      #配置最小连接数
      min-idle: 5
      #配置最大连接数
      max-active: 200
      #配置连接等待超时时间
      max-wait: 60000
      #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      #配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      #测试连接
      validation-query: SELECT 1 FROM DUAL
      #申请连接的时候检测，建议配置为true，不影响性能，并且保证安全
      test-while-idle: true
      #获取连接时执行检测，建议关闭，影响性能
      test-on-borrow: false
      #归还连接时执行检测，建议关闭，影响性能
      test-on-return: false
      #是否开启PSCache，PSCache对支持游标的数据库性能提升巨大，oracle建议开启，mysql下建议关闭
      pool-prepared-statements: false
      #开启poolPreparedStatements后生效
      max-pool-prepared-statement-per-connection-size: 20
      #配置扩展插件，常用的插件有=&gt;stat:监控统计  log4j:日志  wall:防御sql注入
      filters: stat,wall,slf4j
      #打开mergeSql功能；慢SQL记录
      connection-properties: druid.stat.mergeSql\\=true;druid.stat.slowSqlMillis\\=5000
      #配置DruidStatFilter
      web-stat-filter:
        enabled: true
        url-pattern: &quot;/*&quot;
        exclusions: &quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;
      #配置DruidStatViewServlet
      stat-view-servlet:
        url-pattern: &quot;/druid/*&quot;
        #登录名
        login-username: root
        #登录密码
        login-password: root
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三步，重启项目。在日志信息里可以看到 Druid 的初始化信息。</p><figure><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/mysql-druid-06115c50-5741-482f-b5c0-45c55017098f.png#id=Wnc1o&amp;originHeight=642&amp;originWidth=2244&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>第四步，通过 <code>http://localhost:9002/druid/</code> 地址就可以在浏览器访问 Druid 的监控页面了，用户名和密码是我们在配置文件里指定的 root 和 root，登录后是这样的。</p><figure><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/mysql-druid-daaf401e-e4c4-4057-9b3b-d605eefb6eb3.png#id=C7ZKf&amp;originHeight=1546&amp;originWidth=2744&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>更多关于监控的配置信息，可以到 Druid 的 GitHub 仓库查看。</p>`,16),J={href:"https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98",target:"_blank",rel:"noopener noreferrer"},U=n("figure",null,[n("img",{src:"http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/springboot/mysql-druid-a5db84fc-1030-4a38-824d-4e649ad2b768.png#id=hcluY&originHeight=1020&originWidth=1414&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),R=n("h3",{id:"源码地址",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#源码地址","aria-hidden":"true"},"#"),a(" 源码地址")],-1),H={href:"https://github.com/itwanger/coding-more",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/itwanger/codingmore-learning/tree/main/codingmore-mysql",target:"_blank",rel:"noopener noreferrer"},W=n("hr",null,null,-1),V={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},F={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},G=n("p",null,[a("微信搜 "),n("strong",null,"沉默王二"),a(" 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 "),n("strong",null,"222"),a(" 即可免费领取。")],-1),K=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function Y(Z,X){const e=o("ExternalLinkIcon");return l(),r("div",null,[p,d,u,m,b,g,n("blockquote",null,[n("p",null,[n("a",v,[a("https://dev.mysql.com/doc/refman/8.0/en/"),s(e)])])]),f,n("p",null,[a("我在讲 MySQL 的时候也有专门讲过，更详细："),n("a",h,[a("MySQL 的安装(Windows、macOS、Linux)"),s(e)])]),k,n("blockquote",null,[n("p",null,[n("a",y,[a("https://dev.mysql.com/doc/refman/8.0/en/linux-installation.html"),s(e)])])]),_,n("blockquote",null,[n("p",null,[a("宝塔面板安装脚本地址："),n("a",q,[a("https://www.bt.cn/new/download.html"),s(e)])])]),x,S,j,w,n("blockquote",null,[n("p",null,[n("a",L,[a("https://dev.mysql.com/doc/refman/8.0/en/windows-installation.html"),s(e)])])]),I,n("blockquote",null,[n("p",null,[n("a",T,[a("https://dev.mysql.com/doc/refman/8.0/en/macos-installation-pkg.html"),s(e)])])]),D,M,Q,E,z,B,n("p",null,[a("1）使用 Intellij IDEA 新建一个 Spring Boot 项目，使用 Java 8 版本「社区版没有此功能，需要到 (Spring initializr)["),n("a",A,[a("https://start.spring.io/"),s(e)]),a("]）生成项目后导入，推荐使用旗舰版，功能更加强大」。")]),N,n("blockquote",null,[n("p",null,[n("a",C,[a("https://github.com/alibaba/druid/"),s(e)])])]),O,n("blockquote",null,[n("p",null,[n("a",J,[a("https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98"),s(e)])])]),U,R,n("blockquote",null,[n("ul",null,[n("li",null,[a("编程喵 GitHub："),n("a",H,[a("https://github.com/itwanger/coding-more"),s(e)])]),n("li",null,[a("codingmore-mysql："),n("a",P,[a("https://github.com/itwanger/codingmore-learning/tree/main/codingmore-mysql"),s(e)])])])]),W,n("p",null,[a("GitHub 上标星 10000+ 的开源知识库《"),n("a",V,[a("二哥的 Java 进阶之路"),s(e)]),a("》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),n("a",F,[a("太赞了，GitHub 上标星 10000+ 的 Java 教程"),s(e)])]),G,K])}const an=i(c,[["render",Y],["__file","mysql-druid.html.vue"]]);export{an as default};
