import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as i,a as n,d as a,b as t,e}from"./app-72970f25.js";const l={},u=n("h1",{id:"第十五节-jvm-性能监控之可视化篇",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第十五节-jvm-性能监控之可视化篇","aria-hidden":"true"},"#"),a(" 第十五节：JVM 性能监控之可视化篇")],-1),r={href:"https://javabetter.cn/jvm/console-tools.html",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"可视化工具比命令行工具强大的地方就在于这些工具提供了更直观、更易于理解的性能数据视图，肉眼看上去，脑子就能快速 get 到问题所在，那这篇就来带大家看看这些工具的强大之处。",-1),k=n("h2",{id:"jconsole",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jconsole","aria-hidden":"true"},"#"),a(" JConsole")],-1),m=n("p",null,"JConsole（Java Monitoring and Management Console），是一款基于 JMX（Java Manage-ment Extensions）的可视化监视管理工具。",-1),v={href:"https://javabetter.cn/oo/interface.html",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,"JConsole 可以用来监视 Java 应用程序的运行状态，包括内存使用、线程状态、类加载、GC 等，还可以进行一些基本的性能分析。",-1),b=n("h3",{id:"jconsole-连接-java-程序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jconsole-连接-java-程序","aria-hidden":"true"},"#"),a(" JConsole 连接 Java 程序")],-1),h={href:"https://javabetter.cn/overview/jdk-install-config.html#_02%E3%80%81windows-%E5%AE%89%E8%A3%85-jdk",target:"_blank",rel:"noopener noreferrer"},f=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107121534.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),y={href:"https://paicoding.com/",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"连接",-1),_=e(`<figure><img src="https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107122523.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>还可以进行远程链接，比如说对服务器上的 Java 程序进行监控，需要远程服务器上的 Java 程序在启动的时候加上以下这些参数：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-Dcom.sun.management.jmxremote
-Dcom.sun.management.jmxremote.port=&lt;PORT&gt;
-Dcom.sun.management.jmxremote.authenticate=false
-Dcom.sun.management.jmxremote.ssl=false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>&lt;PORT&gt;</code> 是您想要 JMX 代理监听的端口号，例如 9999。</li><li>authenticate=false 表示不需要身份验证来连接到 JMX（注意：这在生产环境中可能不安全）。</li><li>ssl=false 表示不需要使用 SSL 加密连接（同样，这在生产环境中可能不安全）。</li></ul><h3 id="java-程序概况" tabindex="-1"><a class="header-anchor" href="#java-程序概况" aria-hidden="true">#</a> Java 程序概况</h3><p>使用 JConsole 连接了一个本地程序，在<code>概述</code>可以看到 Java 程序的运行时概况，包括<code>堆内存使用量</code>、<code>线程</code>、<code>类</code>、<code>CPU占用率</code>四项信息的曲线图。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107125054.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="内存监控" tabindex="-1"><a class="header-anchor" href="#内存监控" aria-hidden="true">#</a> 内存监控</h3>`,8),j=n("code",null,"内存",-1),x={href:"https://javabetter.cn/jvm/console-tools.html",target:"_blank",rel:"noopener noreferrer"},J={href:"https://javabetter.cn/jvm/whereis-the-object.html",target:"_blank",rel:"noopener noreferrer"},M=e(`<figure><img src="https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107125358.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>为了更加清晰地查看内存变化，可以运行下面这段，然后连接：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token doc-comment comment">/**
 * VM参数： -Xms100m -Xmx100m -XX:+UseSerialGC
 */</span>
<span class="token keyword">class</span> <span class="token class-name">JConcoleRAMMonitor</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/***
     * 内存占位符对象，一个OOMObject大约占64KB
     */</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OOMObject</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> placeholder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">64</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fillHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OOMObject</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OOMObject</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 稍作延时，令监视曲线的变化更加明显</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OOMObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token function">fillHeap</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码的作用是以 64KB/50ms 的速度向 Java 堆中填充数据，一共填充 1000 次。</p><p>观察 Eden 区的运行趋势，发现呈折线趋势增长。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107125932.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击「执行 GC」之后，会发现老年代的柱状图会达到峰值状态，是因为执行 GC 之后，Eden 区的对象被回收，存活的对象被移动到老年代。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107130243.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="线程监控" tabindex="-1"><a class="header-anchor" href="#线程监控" aria-hidden="true">#</a> 线程监控</h3>`,9),C={href:"https://javabetter.cn/jvm/console-tools.html",target:"_blank",rel:"noopener noreferrer"},V=n("p",null,"如下图，JConcole 显示了应用系统内的线程数量，左下方显示了程序中所有的线程。点击线程名称，就可以查看线程的栈信息。",-1),z=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107131040.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),O={href:"https://javabetter.cn/jvm/console-tools.html",target:"_blank",rel:"noopener noreferrer"},q=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">DeadLockDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> lock1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> lock2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程1获取到了锁1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程1获取到了锁2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程2获取到了锁2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程2获取到了锁1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行以上代码，点击 JConsole 线程面板下的 「<code>检测到死锁</code>」按钮，将会看到线程的死锁信息。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107131533.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="类加载情况" tabindex="-1"><a class="header-anchor" href="#类加载情况" aria-hidden="true">#</a> 类加载情况</h3><p>如下图，「类」面板显示了已经装载的类数量。在详细信息栏中，还显示了已经卸载的类的数量。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107131709.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="vm-概要" tabindex="-1"><a class="header-anchor" href="#vm-概要" aria-hidden="true">#</a> VM 概要</h3><p>在<code>VM 概要</code> 面板，JConsole 显示了当前应用程序的运行时环境，包括虚拟机类型、版本、堆信息以及虚拟机参数等。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107131747.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="visualvm" tabindex="-1"><a class="header-anchor" href="#visualvm" aria-hidden="true">#</a> VisualVM</h2><p>VisualVM（All-in-One Java Troubleshooting Tool）一款功能强大的运行监视和故障处理工具之一，在很长一段时间内，VisualVM 都是 Oracle 官方主推的故障处理工具。</p><p>集成了多个 JDK 命令行工具的功能，提供了一个友好的图形界面，非常适用于开发和生产环境。</p><h3 id="visualvm-安装插件" tabindex="-1"><a class="header-anchor" href="#visualvm-安装插件" aria-hidden="true">#</a> VisualVM 安装插件</h3>`,13),T={href:"https://visualvm.github.io",target:"_blank",rel:"noopener noreferrer"},E=e('<figure><img src="https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107132705.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>安装完成后打开的界面如下所示：</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107132947.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>VisualVM 比 JConsole 强的不是一星半点，它不仅拥有更漂亮的身段，还支持插件功能。</p><p>点击<code>tools</code>-&gt; <code>plugins</code>，在<code>可用插件</code>里可以看到大量的插件，按需安装即可。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107133038.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>VisualVM 中<code>概述</code>、<code>监视</code>、<code>线程</code>与 JConsole 差别不大，这里就不在赘述。</p><h3 id="生成、浏览堆转储快照" tabindex="-1"><a class="header-anchor" href="#生成、浏览堆转储快照" aria-hidden="true">#</a> 生成、浏览堆转储快照</h3><p>在 VisualVM 中生成堆转储快照文件有两种方式，可以执行下列任一操作：</p><p>①、在<code>应用程序</code>面板中右键选择<code>堆Dump</code>（也就是 Heap Dump）。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107133459.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>②、在<code>应用程序</code>面板中选择应用程序，在“监视”面板中单击<code>堆Dump</code>。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107133533.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果需要把堆转储快照保存文件后分享出去，可以在 heapdump 节点上右键选择“另存为”菜单，否则当 VisualVM 关闭时，生成的堆转储快照文件会被当作临时文件自动清理掉。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107133756.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="分析程序性能" tabindex="-1"><a class="header-anchor" href="#分析程序性能" aria-hidden="true">#</a> 分析程序性能</h3><p>如果想对应用程序的 CPU 和内存情况进行分析，可以在「分析 profiler」面板中点击「CPU」或者「Memory」，然后 VisualVM 会记录这段时间中应用程序执行过的所有方法。</p><p>比如说 CPU 将会统计每个方法的执行次数、执行耗时。比如说内存将会统计每个方法的内存分配情况。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107134238.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注意点击开始后，回到应用程序进行操作。等要分析的操作执行结束后，点击“停止”按钮结束监控过程。</p><h2 id="java-mission-control" tabindex="-1"><a class="header-anchor" href="#java-mission-control" aria-hidden="true">#</a> Java Mission Control</h2><p>JMC 最初是 JRockit VM 中的诊断工具，但在 Oracle JDK7 Update 40 以后，就绑定到了 HotSpot VM 中。不过后来又被 Oracle 开源出来作为一个单独的产品。</p>',22),S={href:"https://github.com/openjdk/jmc",target:"_blank",rel:"noopener noreferrer"},X=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107154540.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),A={href:"http://jdk.java.net",target:"_blank",rel:"noopener noreferrer"},B={href:"https://jdk.java.net/jmc/8/",target:"_blank",rel:"noopener noreferrer"},D=e(`<p>解压后启动的界面如下所示：</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107154959.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="mbean-server" tabindex="-1"><a class="header-anchor" href="#mbean-server" aria-hidden="true">#</a> MBean Server</h3><p>点击本地进程的<code>MBean服务器</code>：</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107155226.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>MBean 是管理 Java 应用程序的一种标准方式，它是 Java 管理扩展（JMX）的一部分。MBean 代表可管理的 Java 对象，它们的属性和操作可以通过 JMX 进行访问。</p></blockquote><p>仪表盘显示了 Java 堆的使用率，CPU 使用率和 Live Set+Fragmentation（Live Set 是指存活对象的大小，Fragmentation 是指碎片的大小）。</p><h3 id="飞行记录器-flight-recorder" tabindex="-1"><a class="header-anchor" href="#飞行记录器-flight-recorder" aria-hidden="true">#</a> 飞行记录器（Flight Recorder）</h3><p>飞行记录器（JFR）是 JMC 提供的另一功能，通过记录应用程序在一段时间内的运行情况，再进行分析和展示，可以更进一步对应用程序的性能进行分析和诊断。</p><p>要使用 JFR，程序启动需要带以下参数：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-XX:+UnlockCommercialFeatures  -XX:+FlightRecorder
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>连接加了相关参数启动的程序，启动飞行记录，进行一分钟的性能记录：</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107160338.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>记录结束后，JMC 会自动打开刚才的记录：</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107160555.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>JFR 提供的数据质量通常也要比其他工具通过代理形式采样获得的更高。</p><p>以垃圾搜集为例，HotSpot 的 MBean 中一般有各个分代大小、收集次数、时间、占用率等数据，这些都属于“结果”类的信息，而 JFR 中还可以看到内存中这段时间分配了哪些对象、哪些对象被回收了，这些都属于“过程”类的信息。</p><p>我这里提供一些可供测试的代码，大家可以在本地跑一下，看看 JFR 的效果。</p><p>第一个：CPU 使用过高：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 消耗CPU的线程
 * 不断循环进行浮点运算
 */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cpuHigh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;cpu_high_thread&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                pi <span class="token operator">+=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Pi: &quot;</span> <span class="token operator">+</span> pi <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二个：内存使用过高：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 不断新增 BigDecimal 信息到 list
 */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;memory_allocate_thread&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BigDecimal</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整示例可以参考这个 GitHub 仓库：</p>`,23),H={href:"https://github.com/itwanger/paicoding/blob/main/paicoding-web/src/test/java/com/github/paicoding/forum/test/javabetter/jvm/HotCode.java",target:"_blank",rel:"noopener noreferrer"},P=e('<p>比如说通过「内存面板」可以看出 BigDecimal 对象占用了最多的内存。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107162040.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果想进一步分析内存占用来源，可以切到线程页面，勾选三个复选框，可以在 memory 这里看到内存情况。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107162307.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>还可以看到这里的 <code>cpu_high_thread</code> 在不断地计算浮点数，所以占用了较多的 CPU。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107162511.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>死锁的情况也可以在这里看得到。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/view-tools-20240107162559.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="第三方工具" tabindex="-1"><a class="header-anchor" href="#第三方工具" aria-hidden="true">#</a> 第三方工具</h2><p>以上三个都属于 Oracle 官方提供的性能监控工具，除此之外还有一些第三方的性能监控工具。</p><ul><li><strong>「MAT」</strong></li></ul><p>Java 堆内存分析工具。</p><ul><li><strong>「GChisto」</strong></li></ul><p>GC 日志分析工具。</p><ul><li><strong>「GCViewer」</strong></li></ul><p><code>GC</code> 日志分析工具。</p><ul><li><strong>「JProfiler」</strong></li></ul><p>商用的性能分析利器。</p><ul><li><strong>「arthas」</strong></li></ul><p>阿里开源诊断工具。</p><ul><li><strong>「async-profiler」</strong></li></ul><p>Java 应用性能分析工具，开源、火焰图、跨平台。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本篇我们介绍了一些可视化的性能监控工具，包括 JConsole、VisualVM、Java Mission Control 等，阿里的 Arthas 我们留到后面单独去讲。</p>',24),L={href:"https://mp.weixin.qq.com/s/iqZ0KZILAvzmFXpw6gH3mA",target:"_blank",rel:"noopener noreferrer"},U=n("hr",null,null,-1),F={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},G={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},R=n("p",null,[a("微信搜 "),n("strong",null,"沉默王二"),a(" 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 "),n("strong",null,"222"),a(" 即可免费领取。")],-1),I=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function N(K,W){const s=p("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[a("前面我们已经讲了 "),n("a",r,[a("JVM 性能监控工具之命令行篇"),t(s)]),a("，本篇我们来介绍一些可视化的性能监控工具，包括 JConsole、VisualVM、Java Mission Control 等，阿里的 Arthas 我们留到后面单独去讲。")]),d,k,m,n("blockquote",null,[n("p",null,[a("JMX 的全称是 Java Management Extensions，翻译过来就是 Java 管理扩展，既是 Java 管理系统中的一个标准，一个规范，也是一个"),n("a",v,[a("接口"),t(s)]),a("，一个框架。JConsole 就相当于是 JMX 的一个实现类。")])]),g,b,n("p",null,[a("JConsole 程序位于%JAVA_HOME%bin 目录下，不过我当前的操作系统是 macOS，和 Windows 有一些不一样，我就不再刻意截 "),n("a",h,[a("Windows 的图"),t(s)]),a("了，希望大家可以理解。")]),f,n("p",null,[a("直接启动 JConsole，会弹出一个窗口，显示本机正在运行的 Java 程序，选择一个程序（比如说"),n("a",y,[a("技术派"),t(s)]),a("的 28966），点击"),w,a("即可。")]),_,n("p",null,[j,a("的作用相当于可视化的 "),n("a",x,[a("jstat 命令"),t(s)]),a("（上一节讲过了），用于监视 Java 堆的使用情况，可以更细化到 "),n("a",J,[a("eden 区、suvivior 区、老年代"),t(s)]),a("的使用情况。")]),M,n("p",null,[a("JConcole 还可以监控线程，相当于可视化的 "),n("a",C,[a("jstack 命令"),t(s)]),a("（上一节讲过了）。")]),V,z,n("p",null,[a("使用 JConsole 还可以快速定位死锁问题。上一篇我们曾写过一个"),n("a",O,[a("死锁的例子"),t(s)]),a("，这里我们再来看一下。")]),q,n("p",null,[a("VisualVM 的安装非常简单，下载地址："),n("a",T,[a("https://visualvm.github.io"),t(s)])]),E,n("blockquote",null,[n("p",null,[a("GitHub 地址："),n("a",S,[a("https://github.com/openjdk/jmc"),t(s)])])]),X,n("p",null,[a("Oracle 官方下载比较慢，可以通过 "),n("a",A,[a("jdk.java.net"),t(s)]),a(" 下载。")]),n("blockquote",null,[n("p",null,[n("a",B,[a("https://jdk.java.net/jmc/8/"),t(s)])])]),D,n("blockquote",null,[n("p",null,[n("a",H,[a("https://github.com/itwanger/paicoding/blob/main/paicoding-web/src/test/java/com/github/paicoding/forum/test/javabetter/jvm/HotCode.java"),t(s)])])]),P,n("blockquote",null,[n("p",null,[a("参考链接：星球嘉宾三分恶 "),n("a",L,[a("性能监控工具-可视化工具篇"),t(s)])])]),U,n("p",null,[a("GitHub 上标星 10000+ 的开源知识库《"),n("a",F,[a("二哥的 Java 进阶之路"),t(s)]),a("》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),n("a",G,[a("太赞了，GitHub 上标星 10000+ 的 Java 教程"),t(s)])]),R,I])}const Y=o(l,[["render",N],["__file","view-tools.html.vue"]]);export{Y as default};
