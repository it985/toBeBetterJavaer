import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c,a as s,d as a,b as e,e as t}from"./app-72970f25.js";const r={},i=t(`<h1 id="第五节-javap-与字节码" tabindex="-1"><a class="header-anchor" href="#第五节-javap-与字节码" aria-hidden="true">#</a> 第五节：javap 与字节码</h1><p>计算机比较“傻”，只认 0 和 1，这意味着我们编写的代码最终都要编译成机器码才能被计算机执行。Java 在诞生之初就提出了一个非常著名的宣传口号: &quot;<strong>一次编写，处处运行</strong>&quot;。</p><blockquote><p><strong>Write Once, Run Anywhere.</strong></p></blockquote><p>为了这个口号，Java 的亲妈 Sun 公司以及其他虚拟机提供商发布了许多可以在不同平台上运行的 Java 虚拟机，而这些虚拟机都拥有一个共同的功能，那就是可以载入和执行同一种与平台无关的字节码（Byte Code）。</p><p>（前面其实我们也讲过，但为了这篇内容的完整性，我们简单过一下，这一节我们的重点是<strong>通过 javap 这个命令来了解字节码</strong>）</p><p>有了 Java 虚拟机的帮助，我们编写的 Java 源代码不必再根据不同平台编译成对应的机器码了，只需要生成一份字节码，然后再将字节码文件交由运行在不同平台上的 Java 虚拟机读取后执行就可以了。</p><p>如今的 Java 虚拟机非常强大，不仅支持 Java 语言，还支持很多其他的编程语言，比如说 Groovy、Scala、Koltin 等等。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/bytecode-dd31bbd6-c75c-4426-9437-c0f57ea3b86f.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>来看一段代码吧。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),d=s("code",null,"xxd Main.class",-1),u={href:"https://javabetter.cn/jvm/class-load.html",target:"_blank",rel:"noopener noreferrer"},m=s("figure",null,[s("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/bytecode-bd941085-ff0e-4abf-a5f9-afb0493bfed7.png",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),k=s("p",null,"对于这些 16 进制内容，除了开头的 cafe babe，剩下的内容大致可以翻译成：啥玩意啊这......",-1),v={href:"https://javabetter.cn/jvm/class-file-jiegou.html",target:"_blank",rel:"noopener noreferrer"},b=s("h2",{id:"javap",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#javap","aria-hidden":"true"},"#"),a(" javap")],-1),g=s("p",null,[a("Java 内置了一个反编译命令 javap，可以通过 "),s("code",null,"javap -help"),a(" 了解 javap 的基本用法。")],-1),h=s("figure",null,[s("img",{src:"https://cdn.tobebetterjavaer.com/stutymore/bytecode-20231215214357.png",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),j={href:"https://javabetter.cn/overview/jdk-install-config.html",target:"_blank",rel:"noopener noreferrer"},_=s("p",null,"javap 是 JDK 自带的一个命令行工具，主要用于反编译类文件（.class 文件）。我本机是 macOS，使用了 jenv 来管理的 JDK 版本，所以看到的位置如下图所示。",-1),f={href:"https://javabetter.cn/overview/jdk-install-config.html",target:"_blank",rel:"noopener noreferrer"},y=s("figure",null,[s("img",{src:"https://cdn.tobebetterjavaer.com/stutymore/bytecode-20231215215011.png",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),w={href:"https://javabetter.cn/oo/construct.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://javabetter.cn/oo/method.html",target:"_blank",rel:"noopener noreferrer"},C={href:"https://javabetter.cn/oo/var.html",target:"_blank",rel:"noopener noreferrer"},A=t(`<p>前面我们已经写了一个简单的类，大家应该还记得：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),L={href:"https://javabetter.cn/overview/IDEA-install-config.html",target:"_blank",rel:"noopener noreferrer"},M={href:"https://javabetter.cn/jvm/how-run-java-code.html",target:"_blank",rel:"noopener noreferrer"},U=t(`<p>OK，我们在 class 文件的同级目录下输入命令 <code>javap -v -p Main.class</code> 来查看一下输出的内容（-v 显示附加信息，如局部变量表、操作码等；-p 显示所有类和成员，包括私有的，不懂的同学可以回头看在看一眼 <code>javap -help</code> 的输出结果 😁）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Classfile</span> <span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>maweiqing<span class="token operator">/</span><span class="token class-name">Documents</span><span class="token operator">/</span><span class="token class-name">GitHub</span><span class="token operator">/</span><span class="token class-name">TechSisterLearnJava</span><span class="token operator">/</span>codes<span class="token operator">/</span><span class="token class-name">TechSister</span><span class="token operator">/</span>target<span class="token operator">/</span>classes<span class="token operator">/</span>com<span class="token operator">/</span>itwanger<span class="token operator">/</span>jvm<span class="token operator">/</span><span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span>
  <span class="token class-name">Last</span> modified <span class="token number">2021</span>年<span class="token number">4</span>月<span class="token number">15</span>日<span class="token punctuation">;</span> size <span class="token number">385</span> bytes
  <span class="token constant">SHA</span><span class="token operator">-</span><span class="token number">256</span> checksum <span class="token number">6688843e4f</span><span class="token number">70</span>ae8d83040dc7c8e2dd3694bf10ba7c518a6ea9b88b318a8967c6
  <span class="token class-name">Compiled</span> from <span class="token string">&quot;Main.java&quot;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>itwanger<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span></span>Main</span>
  minor version<span class="token operator">:</span> <span class="token number">0</span>
  major version<span class="token operator">:</span> <span class="token number">55</span>
  flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0021</span><span class="token punctuation">)</span> <span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token constant">ACC_SUPER</span>
  this_class<span class="token operator">:</span> #<span class="token number">3</span>                          <span class="token comment">// com/itwanger/jvm/Main</span>
  super_class<span class="token operator">:</span> #<span class="token number">4</span>                         <span class="token comment">// java/lang/Object</span>
  interfaces<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> fields<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> methods<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> attributes<span class="token operator">:</span> <span class="token number">1</span>
<span class="token class-name">Constant</span> pool<span class="token operator">:</span>
   #<span class="token number">1</span> <span class="token operator">=</span> <span class="token class-name">Methodref</span>          #<span class="token number">4.</span>#<span class="token number">18</span>         <span class="token comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
   #<span class="token number">2</span> <span class="token operator">=</span> <span class="token class-name">Fieldref</span>           #<span class="token number">3.</span>#<span class="token number">19</span>         <span class="token comment">// com/itwanger/jvm/Main.age:I</span>
   #<span class="token number">3</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">20</span>            <span class="token comment">// com/itwanger/jvm/Main</span>
   #<span class="token number">4</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">21</span>            <span class="token comment">// java/lang/Object</span>
   #<span class="token number">5</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               age
   #<span class="token number">6</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">I</span>
   #<span class="token number">7</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">&gt;</span></span>
   #<span class="token number">8</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>
   #<span class="token number">9</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Code</span>
  #<span class="token number">10</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">LineNumberTable</span>
  #<span class="token number">11</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">LocalVariableTable</span>
  #<span class="token number">12</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token keyword">this</span>
  #<span class="token number">13</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Lcom</span><span class="token operator">/</span>itwanger<span class="token operator">/</span>jvm<span class="token operator">/</span><span class="token class-name">Main</span><span class="token punctuation">;</span>
  #<span class="token number">14</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               getAge
  #<span class="token number">15</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">I</span>
  #<span class="token number">16</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">SourceFile</span>
  #<span class="token number">17</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Main</span><span class="token punctuation">.</span>java
  #<span class="token number">18</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">7</span><span class="token operator">:</span>#<span class="token number">8</span>          <span class="token comment">// &quot;&lt;init&gt;&quot;:()V</span>
  #<span class="token number">19</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">5</span><span class="token operator">:</span>#<span class="token number">6</span>          <span class="token comment">// age:I</span>
  #<span class="token number">20</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               com<span class="token operator">/</span>itwanger<span class="token operator">/</span>jvm<span class="token operator">/</span><span class="token class-name">Main</span>
  #<span class="token number">21</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span>
<span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    descriptor<span class="token operator">:</span> <span class="token class-name">I</span>
    flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0002</span><span class="token punctuation">)</span> <span class="token constant">ACC_PRIVATE</span>

  <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>itwanger<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span></span>Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>
    flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0001</span><span class="token punctuation">)</span> <span class="token constant">ACC_PUBLIC</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>
         <span class="token number">0</span><span class="token operator">:</span> aload_0
         <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
         <span class="token number">4</span><span class="token operator">:</span> aload_0
         <span class="token number">5</span><span class="token operator">:</span> bipush        <span class="token number">18</span>
         <span class="token number">7</span><span class="token operator">:</span> putfield      #<span class="token number">2</span>                  <span class="token comment">// Field age:I</span>
        <span class="token number">10</span><span class="token operator">:</span> <span class="token keyword">return</span>
      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>
        line <span class="token number">6</span><span class="token operator">:</span> <span class="token number">0</span>
        line <span class="token number">7</span><span class="token operator">:</span> <span class="token number">4</span>
      <span class="token class-name">LocalVariableTable</span><span class="token operator">:</span>
        <span class="token class-name">Start</span>  <span class="token class-name">Length</span>  <span class="token class-name">Slot</span>  <span class="token class-name">Name</span>   <span class="token class-name">Signature</span>
            <span class="token number">0</span>      <span class="token number">11</span>     <span class="token number">0</span>  <span class="token keyword">this</span>   <span class="token class-name">Lcom</span><span class="token operator">/</span>itwanger<span class="token operator">/</span>jvm<span class="token operator">/</span><span class="token class-name">Main</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">I</span>
    flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0001</span><span class="token punctuation">)</span> <span class="token constant">ACC_PUBLIC</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
      stack<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>
         <span class="token number">0</span><span class="token operator">:</span> aload_0
         <span class="token number">1</span><span class="token operator">:</span> getfield      #<span class="token number">2</span>                  <span class="token comment">// Field age:I</span>
         <span class="token number">4</span><span class="token operator">:</span> ireturn
      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>
        line <span class="token number">9</span><span class="token operator">:</span> <span class="token number">0</span>
      <span class="token class-name">LocalVariableTable</span><span class="token operator">:</span>
        <span class="token class-name">Start</span>  <span class="token class-name">Length</span>  <span class="token class-name">Slot</span>  <span class="token class-name">Name</span>   <span class="token class-name">Signature</span>
            <span class="token number">0</span>       <span class="token number">5</span>     <span class="token number">0</span>  <span class="token keyword">this</span>   <span class="token class-name">Lcom</span><span class="token operator">/</span>itwanger<span class="token operator">/</span>jvm<span class="token operator">/</span><span class="token class-name">Main</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">SourceFile</span><span class="token operator">:</span> <span class="token string">&quot;Main.java&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>睁大眼睛瞧过去，内容挺多。同学们不要着急，我们来一行一行分析。</p><h2 id="字节码的基本信息" tabindex="-1"><a class="header-anchor" href="#字节码的基本信息" aria-hidden="true">#</a> 字节码的基本信息</h2><p>第 1 行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Classfile</span> <span class="token operator">/</span><span class="token class-name">Users</span><span class="token operator">/</span>maweiqing<span class="token operator">/</span><span class="token class-name">Documents</span><span class="token operator">/</span><span class="token class-name">GitHub</span><span class="token operator">/</span><span class="token class-name">TechSisterLearnJava</span><span class="token operator">/</span>codes<span class="token operator">/</span><span class="token class-name">TechSister</span><span class="token operator">/</span>target<span class="token operator">/</span>classes<span class="token operator">/</span>com<span class="token operator">/</span>itwanger<span class="token operator">/</span>jvm<span class="token operator">/</span><span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token keyword">class</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>顾名思义，这行表示字节码文件的位置。</p><p>第 2 行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Last</span> modified <span class="token number">2021</span>年<span class="token number">4</span>月<span class="token number">15</span>日<span class="token punctuation">;</span> size <span class="token number">385</span> bytes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>字节码文件的修改日期（我 2021 年在「沉默王二」公众号里分享过，不知道还有多少同学记得 😄）、文件大小是 385 bytes。</p><p>第 3 行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">SHA</span><span class="token operator">-</span><span class="token number">256</span> checksum <span class="token number">6688843e4f</span><span class="token number">70</span>ae8d83040dc7c8e2dd3694bf10ba7c518a6ea9b88b318a8967c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>字节码文件的 SHA-256 值，用于校验文件的完整性。</p><blockquote><p>SHA-256 是一种加密哈希算法，将任意长度的输入数据处理成固定长度（256 位，即 32 字节）的输出数据，且输出数据的哈希值在数学上很难被反向计算出原始数据，所以常用于校验数据的完整性。</p></blockquote><p>第 4 行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Compiled</span> from <span class="token string">&quot;Main.java&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>说明该字节码文件编译自 Main.java 源文件。</p><p>第 5 行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>itwanger<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span></span>Main</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类访问修饰符和类型，表明这是一个公开的类，名为 <code>com.itwanger.jvm.Main</code>。</p><p>第 6 行 <code>minor version: 0</code>，次版本号。</p>`,21),T=s("code",null,"major version: 55",-1),S={href:"https://javabetter.cn/jvm/class-file-jiegou.html",target:"_blank",rel:"noopener noreferrer"},I=t(`<p>第 8 行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0021</span><span class="token punctuation">)</span> <span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token constant">ACC_SUPER</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),J={href:"https://javabetter.cn/jvm/class-file-jiegou.html",target:"_blank",rel:"noopener noreferrer"},q=s("figure",null,[s("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/bytecode-d12d6983-f427-40d2-bb4b-3a2c6c4c7806.png",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),N=s("code",null,"ACC_PUBLIC | ACC_SUPER",-1),V={href:"https://javabetter.cn/oo/access-control.html",target:"_blank",rel:"noopener noreferrer"},z={href:"https://javabetter.cn/oo/this-super.html#_07%E3%80%81super-%E5%85%B3%E9%94%AE%E5%AD%97",target:"_blank",rel:"noopener noreferrer"},E={href:"https://javabetter.cn/basic-grammar/operator.html#_03%E3%80%81%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6",target:"_blank",rel:"noopener noreferrer"},O=s("code",null,"|",-1),B=s("code",null,"0x0001 | 0x0020",-1),F=s("code",null,"0x0021",-1),P=t(`<p>第 9 行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>this_class<span class="token operator">:</span> #<span class="token number">3</span> <span class="token comment">// com/itwanger/jvm/Main</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),D={href:"https://javabetter.cn/jvm/class-file-jiegou.html#_03%E3%80%81%E5%B8%B8%E9%87%8F%E6%B1%A0",target:"_blank",rel:"noopener noreferrer"},H=t(`<p>第 10 行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>super_class<span class="token operator">:</span> #<span class="token number">4</span> <span class="token comment">// java/lang/Object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>父类的索引，指向常量池中下标为 6 的常量，可以看得出当前类的父类是 Object 类（所有没有明确父类都默认继承超类，这也是<strong>万物皆对象</strong>的重要原因）。</p><p>第 11 行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>interfaces<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> fields<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> methods<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> attributes<span class="token operator">:</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),R=s("code",null,"write()",-1),G={href:"https://javabetter.cn/oo/object-class.html",target:"_blank",rel:"noopener noreferrer"},K=s("h2",{id:"常量池",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#常量池","aria-hidden":"true"},"#"),a(" 常量池")],-1),W=s("p",null,"接下来是 Constant pool，也就是字节码文件最重要的常量池部分。可以把常量池理解为字节码文件中的资源仓库，主要存放两大类信息。",-1),Q={href:"https://javabetter.cn/jvm/class-file-jiegou.html",target:"_blank",rel:"noopener noreferrer"},X=t(`<p><strong>1）字面量（Literal）</strong>，有点类似 Java 中的常量概念，比如文本字符串，final 常量等。</p><p><strong>2）符号引用（Symbolic References）</strong>，属于编译原理方面的概念，包括 3 种：</p><ul><li>类和接口的全限定名（Fully Qualified Name）</li><li>字段的名称和描述符（Descriptor）</li><li>方法的名称和描述符</li></ul><p>Java 虚拟机是在加载字节码文件的时候才进行的动态链接，也就是说，字段和方法的符号引用只有经过运行期转换后才能获得真正的内存地址。</p><p>当 Java 虚拟机运行时，需要从常量池获取对应的符号引用，然后在类创建或者运行时解析并翻译到具体的内存地址上。</p><p>当前字节码文件中一共有 21 个常量，它们之间是有链接的，逐个分析会比较乱，我们采用顺藤摸瓜的方式，从上依次往下看，那些被链接的常量我们就点到为止。</p><p><em>注</em>：</p><ul><li><code>#</code> 号后面跟的是索引，索引没有从 0 开始而是从 1 开始，是因为设计者考虑到，“如果要表达不引用任何一个常量的含义时，可以将索引值设为 0 来表示”（周志明老师《深入理解 Java 虚拟机》一书描述的）。</li><li><code>=</code> 号后面跟的是常量的类型，没有包含前缀 <code>CONSTANT_</code> 和后缀 <code>_info</code>。</li><li><strong>全文中提到的索引等同于下标</strong>，为了灵活描述，没有做统一。</li></ul><p>好，开始。</p><p>第 1 个常量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>#<span class="token number">1</span> <span class="token operator">=</span> <span class="token class-name">Methodref</span> #<span class="token number">4.</span>#<span class="token number">18</span> <span class="token comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类型为 Methodref，表明是用来定义方法的，指向常量池中下标为 4 和 18 的常量。</p><p>第 4 个常量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>#<span class="token number">4</span> <span class="token operator">=</span> <span class="token class-name">Class</span> #<span class="token number">21</span> <span class="token comment">// java/lang/Object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类型为 Class，表明是用来定义类（或者接口）的，指向常量池中下标为 21 的常量。</p><p>第 21 个常量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>#<span class="token number">21</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span> java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类型为 Utf8，UTF-8 编码的字符串，值为 <code>java/lang/Object</code>。</p><p>第 18 个常量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>#<span class="token number">18</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span> #<span class="token number">7</span><span class="token operator">:</span>#<span class="token number">8</span> <span class="token comment">// &quot;&lt;init&gt;&quot;:()V</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类型为 NameAndType，表明是字段或者方法的部分符号引用，指向常量池中下标为 7 和 8 的常量。</p><p>第 7 个常量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>#<span class="token number">7</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span> <span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类型为 Utf8，UTF-8 编码的字符串，值为 <code>&lt;init&gt;</code>，表明为构造方法。</p><p>第 8 个常量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>#<span class="token number">8</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类型为 Utf8，UTF-8 编码的字符串，值为 <code>()V</code>，表明方法的返回值为 void。</p><p>到此为止，第 1 个常量算是摸完了。组合起来的意思就是，Main 类使用的是默认的构造方法，来源于 Object 类。<code>#4</code> 指向 <code>Class #21</code>（即 <code>java/lang/Object</code>），<code>#18</code> 指向 <code>NameAndType #7:#8</code>（即 <code>&lt;init&gt;:()V</code>）。</p><p>第 2 个常量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>#<span class="token number">2</span> <span class="token operator">=</span> <span class="token class-name">Fieldref</span> #<span class="token number">3.</span>#<span class="token number">19</span> <span class="token comment">// com/itwanger/jvm/Main.age:I</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类型为 Fieldref，表明是用来定义字段的，指向常量池中下标为 3 和 19 的常量。</p><p>第 3 个常量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>#<span class="token number">3</span> <span class="token operator">=</span> <span class="token class-name">Class</span> #<span class="token number">20</span> <span class="token comment">// com/itwanger/jvm/Main</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类型为 Class，表明是用来定义类（或者接口）的，指向常量池中下标为 20 的常量。</p><p>第 19 个常量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>#<span class="token number">19</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span> #<span class="token number">5</span><span class="token operator">:</span>#<span class="token number">6</span> <span class="token comment">// age:I</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类型为 NameAndType，表明是字段或者方法的部分符号引用，指向常量池中下标为 5 和 6 的常量。</p><p>第 5 个常量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>#<span class="token number">5</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span> age
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类型为 Utf8，UTF-8 编码的字符串，值为 <code>age</code>，表明字段名为 age。</p><p>第 6 个常量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>#<span class="token number">6</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">I</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类型为 Utf8，UTF-8 编码的字符串，值为 <code>I</code>，表明字段的类型为 int。</p>`,43),Y={href:"https://javabetter.cn/jvm/class-file-jiegou.html",target:"_blank",rel:"noopener noreferrer"},Z=t('<figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/bytecode-cbf16ce9-7853-4050-a1c0-8b874f3b0c1e.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>到此为止，第 2 个常量算是摸完了。组合起来的意思就是，声明了一个类型为 int 的字段 age。<code>#3</code> 指向 <code>Class #20</code>（即 <code>com/itwanger/jvm/Main</code>），<code>#19</code> 指向 <code>NameAndType #5:#6</code>（即 <code>age:I</code>）。</p><h2 id="字段表集合" tabindex="-1"><a class="header-anchor" href="#字段表集合" aria-hidden="true">#</a> 字段表集合</h2><p>字段表用来描述接口或者类中声明的变量，包括类变量和成员变量，但不包含声明在方法中局部变量。</p><blockquote><p>带链接的都是我们之前讲过的，是不是发现所有的知识都串联起来了？这就是我们学习 javap 和字节码的原因，了解字节码的同时，也能够加深对 Java 知识的理解。</p></blockquote><p>字段的修饰符一般有：</p>',6),$={href:"https://javabetter.cn/oo/access-control.html",target:"_blank",rel:"noopener noreferrer"},aa={href:"https://javabetter.cn/oo/static.html",target:"_blank",rel:"noopener noreferrer"},sa={href:"https://javabetter.cn/oo/final.html",target:"_blank",rel:"noopener noreferrer"},na={href:"https://javabetter.cn/thread/volatile.html",target:"_blank",rel:"noopener noreferrer"},ea={href:"https://javabetter.cn/io/transient.html",target:"_blank",rel:"noopener noreferrer"},ta={href:"https://javabetter.cn/basic-grammar/basic-data-type.html",target:"_blank",rel:"noopener noreferrer"},pa={href:"https://javabetter.cn/array/array.html",target:"_blank",rel:"noopener noreferrer"},oa={href:"https://javabetter.cn/oo/object-class.html",target:"_blank",rel:"noopener noreferrer"},la=t(`<p>在 Main.class 字节码文件中，字段表的信息如下所示。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    descriptor<span class="token operator">:</span> <span class="token class-name">I</span>
    flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0002</span><span class="token punctuation">)</span> <span class="token constant">ACC_PRIVATE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表明字段的访问权限修饰符为 private，类型为 int，名称为 age。字段的访问标志和类的访问标志非常类似。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/bytecode-5f328e11-3486-4eb4-8fa9-5c5febfab894.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="方法表集合" tabindex="-1"><a class="header-anchor" href="#方法表集合" aria-hidden="true">#</a> 方法表集合</h2>`,5),ca={href:"https://javabetter.cn/oo/interface.html",target:"_blank",rel:"noopener noreferrer"},ra={href:"https://javabetter.cn/thread/synchronized-1.html",target:"_blank",rel:"noopener noreferrer"},ia={href:"https://javabetter.cn/oo/native-method.html",target:"_blank",rel:"noopener noreferrer"},da={href:"https://javabetter.cn/basic-extra-meal/48-keywords.html",target:"_blank",rel:"noopener noreferrer"},ua={href:"https://javabetter.cn/oo/abstract.html",target:"_blank",rel:"noopener noreferrer"},ma=t(`<figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/jvm/bytecode-fd434d5c-ffc6-4a24-9787-98e573035068.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="构造方法" tabindex="-1"><a class="header-anchor" href="#构造方法" aria-hidden="true">#</a> 构造方法</h3><p>下面这部分为构造方法，返回类型为 void，访问标志为 public。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>itwanger<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span></span>Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>
  flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0001</span><span class="token punctuation">)</span> <span class="token constant">ACC_PUBLIC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>声明：<code>public com.itwanger.jvm.Main();</code> 这是 Main 类的构造方法，用于创建 Main 类的实例。它是公开的（public）。</li><li>描述符：<code>descriptor: ()V</code><br> 这表示构造方法没有参数 (<code>()</code>) 并且没有返回值 （<code>V</code>，代表 <code>void</code>）。</li><li>访问标志：<code>flags: (0x0001) ACC_PUBLIC</code>，表示这个构造方法是公开的，可以从其他类中访问。</li></ul><p>来详细看一下其中 Code 属性。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Code</span><span class="token operator">:</span>
  stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>
      <span class="token number">0</span><span class="token operator">:</span> aload_0
      <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
      <span class="token number">4</span><span class="token operator">:</span> aload_0
      <span class="token number">5</span><span class="token operator">:</span> bipush        <span class="token number">18</span>
      <span class="token number">7</span><span class="token operator">:</span> putfield      #<span class="token number">2</span>                  <span class="token comment">// Field age:I</span>
    <span class="token number">10</span><span class="token operator">:</span> <span class="token keyword">return</span>
  <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>
    line <span class="token number">6</span><span class="token operator">:</span> <span class="token number">0</span>
    line <span class="token number">7</span><span class="token operator">:</span> <span class="token number">4</span>
  <span class="token class-name">LocalVariableTable</span><span class="token operator">:</span>
    <span class="token class-name">Start</span>  <span class="token class-name">Length</span>  <span class="token class-name">Slot</span>  <span class="token class-name">Name</span>   <span class="token class-name">Signature</span>
        <span class="token number">0</span>      <span class="token number">11</span>     <span class="token number">0</span>  <span class="token keyword">this</span>   <span class="token class-name">Lcom</span><span class="token operator">/</span>itwanger<span class="token operator">/</span>jvm<span class="token operator">/</span><span class="token class-name">Main</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),ka={href:"https://javabetter.cn/jvm/how-jvm-run-zijiema-zhiling.html",target:"_blank",rel:"noopener noreferrer"},va=t("<p>操作栈是一个 LIFO（后进先出）栈，用于存放临时变量和中间结果。在构造方法中，bipush 和 aload_0 指令可能会同时需要栈空间，所以需要 2 个操作数栈深度。</p><p>②、locals 为局部变量所需要的存储空间，单位为槽（slot），方法的参数变量和方法内的局部变量都会存储在局部变量表中。</p><p>局部变量表的容量以变量槽为最小单位，一个变量槽可以存放一个 32 位以内的数据类型，比如 boolean、byte、char、short、int、float、reference 和 returnAddress 类型。</p><p>局部变量表所需的容量大小是在编译期间完成计算的，大小由编译器决定，因此不同的编译器编译出来的字节码可能会不一样。</p><p>locals=1，这表示局部变量表中有 1 个变量的空间。对于实例方法（如构造方法），局部变量表的第一个位置（索引 0）总是用于存储 this 引用。</p><p>③、args_size 为方法的参数个数。</p><p>为什么 stack 的值为 2，locals 的值为 1，args_size 的值为 1 呢？<strong>默认的构造方法不是没有参数和局部变量吗</strong>？</p><p>这是因为有一个隐藏的 this 变量，只要不是静态方法，都会有一个当前类的对象 this 悄悄的存在着。</p><p>这就解释了为什么 locals 和 args_size 的值为 1 的问题。</p><p>那为什么 stack 的值为 2 呢？因为字节码指令 invokespecial（调用父类的构造方法进行初始化）会消耗掉一个当前类的引用，所以 aload_0 执行了 2 次，也就意味着操作数栈的大小为 2。</p>",10),ba={href:"https://javabetter.cn/jvm/zijiema-zhiling.html",target:"_blank",rel:"noopener noreferrer"},ga=t(`<p>④、LineNumberTable，该属性的作用是描述源码行号与字节码行号(字节码偏移量)之间的对应关系。这对于调试非常重要，因为它允许调试器将正在执行的字节码指令精确地关联到源代码的特定行。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>LineNumberTable:
  line 6: 0
  line 7: 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的意思是，第 6 行对应的字节码行号为 0，第 7 行对应的字节码行号为 4。</p><p>在调试过程中，当一个断点被触发或出现异常时，通过 LineNumberTable，我们可以知道这是源代码中的哪一行导致的。</p><p>④、LocalVariableTable，该属性的作用是描述帧栈中的局部变量与源码中定义的变量之间的关系。大家仔细看一下，就能看到 this 的影子了。</p><ul><li>Start 和 Length：定义变量在方法中的作用域。Start 是变量生效的字节码偏移量，Length 是它保持活动的长度。</li><li>Slot：变量在局部变量数组中的索引。</li><li>Name：变量的名称，如在源代码中定义的。</li><li>Signature：变量的类型描述符。</li></ul><p>这里，只有一个局部变量 this，它指代构造方法正在初始化的对象。它的作用域是从指令偏移量 0 开始，持续整个方法的长度（长度为 11），并且被分配到局部变量表的第一个槽位（索引 0）。<code>Lcom/itwanger/jvm/Main;</code> 表明这个变量的类型是 com.itwanger.jvm.Main。</p><h3 id="成员方法" tabindex="-1"><a class="header-anchor" href="#成员方法" aria-hidden="true">#</a> 成员方法</h3><p>下面这部分为成员方法 <code>getAge()</code>，返回类型为 int，访问标志为 public。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">I</span>
  flags<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">0x0001</span><span class="token punctuation">)</span> <span class="token constant">ACC_PUBLIC</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>理解了构造方法的 Code 属性后，再看 <code>getAge()</code> 方法的 Code 属性时，就很容易理解了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Code</span><span class="token operator">:</span>
  stack<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>
      <span class="token number">0</span><span class="token operator">:</span> aload_0
      <span class="token number">1</span><span class="token operator">:</span> getfield      #<span class="token number">2</span>                  <span class="token comment">// Field age:I</span>
      <span class="token number">4</span><span class="token operator">:</span> ireturn
  <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>
    line <span class="token number">9</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token class-name">LocalVariableTable</span><span class="token operator">:</span>
    <span class="token class-name">Start</span>  <span class="token class-name">Length</span>  <span class="token class-name">Slot</span>  <span class="token class-name">Name</span>   <span class="token class-name">Signature</span>
        <span class="token number">0</span>       <span class="token number">5</span>     <span class="token number">0</span>  <span class="token keyword">this</span>   <span class="token class-name">Lcom</span><span class="token operator">/</span>itwanger<span class="token operator">/</span>jvm<span class="token operator">/</span><span class="token class-name">Main</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最大操作数栈为 1，局部变量所需要的存储空间为 1，方法的参数个数为 1，是因为局部变量只有一个隐藏的 this，并且字节码指令中只执行了一次 aload_0。</p><p>①、字节码指令</p><ul><li>aload_0: 加载 this 引用到栈顶，以便接下来访问实例字段 age。</li><li><code>getfield #2</code>: 获取字段值。这条指令读取 this 对象的 age 字段的值，并将其推送到栈顶。<code>#2</code> 是对常量池中的字段引用。</li><li>ireturn: 返回栈顶整型值。这里返回的是 age 字段的值。</li></ul><p>②、附加信息</p><p>LineNumberTable 和 LocalVariableTable 同样提供了源代码的行号对应和局部变量信息，有助于调试和理解代码的执行流程。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>其实学习是这样的，可以横向扩展，也可以纵向扩展。当我们初学编程的时候，特别想多学一点，属于横向扩展，当有了一定的编程经验后，想更上一层楼，就需要纵向扩展，不断深入地学，连根拔起，从而形成自己的知识体系。</p><p>无论是从十六进制的字节码角度，还是 jclasslib 图形化查看反编译后的字节码的角度，也或者是今天这样从 javap 反编译后的角度，都能窥探出一些新的内容来！</p><p>初学者一开始接触字节码的时候会感觉比较头大，没关系，我当初也是这样，随着时间的推移，经验的积累，慢慢就好了，越往深处钻，就越能体会到那种“技术我有，雄霸天下”的感觉~</p><hr>`,22),ha={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},ja={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},_a=s("p",null,[a("微信搜 "),s("strong",null,"沉默王二"),a(" 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 "),s("strong",null,"222"),a(" 即可免费领取。")],-1),fa=s("figure",null,[s("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1);function ya(wa,xa){const n=o("ExternalLinkIcon");return l(),c("div",null,[i,s("p",null,[a("编译生成 Main.class 文件后，可以在命令行使用 "),d,a(" 打开 class 文件（"),s("a",u,[a("前面我们已经讲过了"),e(n)]),a("，还不会用的同学可以回头看一眼）。")]),m,k,s("p",null,[a("但经过"),s("a",v,[a("上一节类文件结构"),e(n)]),a("的洗礼，相信大家对这份文件的内容已经很熟悉了。")]),b,g,h,s("p",null,[a("当然了，执行这个命令的前提条件是你需要配置好 Java 环境变量，如果没有配置好，可以参考"),s("a",j,[a("这篇文章"),e(n)]),a("。")]),_,s("blockquote",null,[s("p",null,[a("Windows 用户以及没有使用 jenv 的 macOS 用户可以根据"),s("a",f,[a("这个帖子"),e(n)]),a("了解 jenv，真的好用。")])]),y,s("p",null,[a("javap 主要用于反编译 Java 类文件，即将编译后的 .class 文件转换回更易于理解的形式。虽然它不会生成原始的 Java 源代码，但它可以显示类的结构，包括"),s("a",w,[a("构造方法"),e(n)]),a("、"),s("a",x,[a("方法"),e(n)]),a("、"),s("a",C,[a("字段"),e(n)]),a("等，帮助我们更好地理解 Java 字节码以及 Java 程序的运行机制。")]),A,s("p",null,[a("当然了，我希望你是用 "),s("a",L,[a("Intellij IDEA"),e(n)]),a(" 来编写而不是记事本，这样就省去了我们主动编译的过程，可以直接在 "),s("a",M,[a("target 目录下找到 class 文件"),e(n)]),a("，这些知识我们前面都已经讲过了。")]),U,s("p",null,[a("第 7 行 "),T,a("，主版本号（由 Java 11 编译，"),s("a",S,[a("上一节"),e(n)]),a("讲过）。")]),I,s("p",null,[a("类访问标记，一共有 8 种，"),s("a",J,[a("上一节"),e(n)]),a("我们曾提到。")]),q,s("p",null,[a("表明当前类是 "),N,a("（表明这个类是 "),s("a",V,[a("public"),e(n)]),a(" 的，并且使用了 "),s("a",z,[a("super 关键字"),e(n)]),a("）。")]),s("p",null,[s("a",E,[a("位运算符"),e(n)]),a(),O,a(" 的意思是如果相对应位是 0，则结果为 0，否则为 1，所以 "),B,a(" 的结果是 "),F,a("（需要转成二进制进行运算）。")]),P,s("p",null,[a("当前类的索引，指向"),s("a",D,[a("常量池"),e(n)]),a("中下标为 3 的常量（上一节刚讲过），可以看得出当前类是 Main 类。")]),H,s("p",null,[a("当前类有 0 个接口，1 个字段（age），2 个方法（"),R,a("方法和缺省的默认构造方法，讲《"),s("a",G,[a("面向对象编程"),e(n)]),a("》的时候都讲过），1 个属性（该类仅有的一个属性是 SourceFIle，包含了源码文件的信息，第一行讲过了）。")]),K,W,s("blockquote",null,[s("p",null,[s("a",Q,[a("上一节"),e(n)]),a("我们就讲过字面量和符号引用，这里再讲一次，应该是第三次讲了，确实比较难懂，我们就多讲几次，直到大家都能理解为止（😁）。")])]),X,s("p",null,[a("关于字段类型的描述符映射表如下图所示，"),s("a",Y,[a("上一节"),e(n)]),a("其实也讲过，只不过是从 16 进制来看的，这一节是从 javap 的角度来看的。")]),Z,s("ul",null,[s("li",null,[s("a",$,[a("访问权限修饰符"),e(n)]),a("，比如 public private protected")]),s("li",null,[s("a",aa,[a("静态变量修饰符"),e(n)]),a("，比如 static")]),s("li",null,[s("a",sa,[a("final 修饰符"),e(n)])]),s("li",null,[a("并发可见性修饰符，比如 "),s("a",na,[a("volatile"),e(n)])]),s("li",null,[a("序列化修饰符，比如 "),s("a",ea,[a("transient"),e(n)])])]),s("p",null,[a("然后是字段的类型（可以是"),s("a",ta,[a("基本数据类型"),e(n)]),a("、"),s("a",pa,[a("数组"),e(n)]),a("和"),s("a",oa,[a("对象"),e(n)]),a("）和名称。")]),la,s("p",null,[a("方法表用来描述"),s("a",ca,[a("接口"),e(n)]),a("或者类中声明的方法，包括类方法和成员方法，以及构造方法。方法的修饰符和字段略有不同，比如说 volatile 和 transient 不能用来修饰方法，再比如说方法的修饰符多了 "),s("a",ra,[a("synchronized"),e(n)]),a("、"),s("a",ia,[a("native"),e(n)]),a("、"),s("a",da,[a("strictfp"),e(n)]),a(" 和 "),s("a",ua,[a("abstract"),e(n)]),a("。")]),ma,s("p",null,[a("①、stack 为最大操作数栈，Java 虚拟机在运行的时候会根据这个值来分配栈帧的操作数栈深度（关于操作数栈和栈帧，我们会在"),s("a",ka,[a("下一节"),e(n)]),a("详细讲解），这里的值为 2，意味着操作数栈的深度为 2。")]),va,s("p",null,[a("关于"),s("a",ba,[a("字节码指令"),e(n)]),a("，我们后面会详细介绍，这里只是简单提一下。")]),ga,s("p",null,[a("GitHub 上标星 10000+ 的开源知识库《"),s("a",ha,[a("二哥的 Java 进阶之路"),e(n)]),a("》第一版 PDF 终于来了！包括 Java 基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM 等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),s("a",ja,[a("太赞了，GitHub 上标星 10000+ 的 Java 教程"),e(n)])]),_a,fa])}const La=p(r,[["render",ya],["__file","bytecode.html.vue"]]);export{La as default};
