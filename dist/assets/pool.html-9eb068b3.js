const e=JSON.parse('{"key":"v-147d8971","path":"/thread/pool.html","title":"24张图带你彻底弄懂 Java 线程池","lang":"zh-CN","frontmatter":{"title":"24张图带你彻底弄懂 Java 线程池","shortTitle":"线程池","description":"Java线程池是Java多线程编程的一个重要部分，特别是在并发编程和后台任务处理方面。线程池帮助我们优化线程的使用，特别是在面对大量的并发请求时。","category":["Java核心"],"tag":["Java并发编程"],"head":[["meta",{"name":"keywords","content":"Java,并发编程,多线程,Thread,线程池,ThreadPoolExecutor,Executors"}],["meta",{"property":"og:url","content":"https://javabetter.cn/thread/pool.html"}],["meta",{"property":"og:site_name","content":"二哥的Java进阶之路"}],["meta",{"property":"og:title","content":"24张图带你彻底弄懂 Java 线程池"}],["meta",{"property":"og:description","content":"Java线程池是Java多线程编程的一个重要部分，特别是在并发编程和后台任务处理方面。线程池帮助我们优化线程的使用，特别是在面对大量的并发请求时。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-08T12:03:00.000Z"}],["meta",{"property":"article:author","content":"沉默王二"}],["meta",{"property":"article:tag","content":"Java并发编程"}],["meta",{"property":"article:modified_time","content":"2023-12-08T12:03:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"24张图带你彻底弄懂 Java 线程池\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-08T12:03:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"沉默王二\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"一、什么是线程池","slug":"一、什么是线程池","link":"#一、什么是线程池","children":[]},{"level":2,"title":"二、线程池的构造","slug":"二、线程池的构造","link":"#二、线程池的构造","children":[]},{"level":2,"title":"三、线程池的运行原理","slug":"三、线程池的运行原理","link":"#三、线程池的运行原理","children":[]},{"level":2,"title":"四、线程池中线程实现复用的原理","slug":"四、线程池中线程实现复用的原理","link":"#四、线程池中线程实现复用的原理","children":[]},{"level":2,"title":"五、线程是如何获取任务以及如何实现超时的","slug":"五、线程是如何获取任务以及如何实现超时的","link":"#五、线程是如何获取任务以及如何实现超时的","children":[]},{"level":2,"title":"六、线程池的 5 种状态","slug":"六、线程池的-5-种状态","link":"#六、线程池的-5-种状态","children":[]},{"level":2,"title":"七、线程池的关闭","slug":"七、线程池的关闭","link":"#七、线程池的关闭","children":[]},{"level":2,"title":"八、线程池的监控","slug":"八、线程池的监控","link":"#八、线程池的监控","children":[]},{"level":2,"title":"九、线程池的使用场景","slug":"九、线程池的使用场景","link":"#九、线程池的使用场景","children":[{"level":3,"title":"01、Web服务器模拟：","slug":"_01、web服务器模拟","link":"#_01、web服务器模拟","children":[]},{"level":3,"title":"02、并行计算：","slug":"_02、并行计算","link":"#_02、并行计算","children":[]},{"level":3,"title":"03、异步任务处理：","slug":"_03、异步任务处理","link":"#_03、异步任务处理","children":[]}]},{"level":2,"title":"十、Executors 构建线程池以及问题分析","slug":"十、executors-构建线程池以及问题分析","link":"#十、executors-构建线程池以及问题分析","children":[]},{"level":2,"title":"十一、实际项目中如何合理的自定义线程池","slug":"十一、实际项目中如何合理的自定义线程池","link":"#十一、实际项目中如何合理的自定义线程池","children":[{"level":3,"title":"线程数","slug":"线程数","link":"#线程数","children":[]},{"level":3,"title":"线程工厂","slug":"线程工厂","link":"#线程工厂","children":[]},{"level":3,"title":"有界队列","slug":"有界队列","link":"#有界队列","children":[]},{"level":3,"title":"Web服务器模拟：","slug":"web服务器模拟","link":"#web服务器模拟","children":[]},{"level":3,"title":"并行计算：","slug":"并行计算","link":"#并行计算","children":[]},{"level":3,"title":"异步任务处理：","slug":"异步任务处理","link":"#异步任务处理","children":[]}]},{"level":2,"title":"十二、总结","slug":"十二、总结","link":"#十二、总结","children":[]}],"git":{"createdTime":1648037338000,"updatedTime":1702036980000,"contributors":[{"name":"itwanger","email":"www.qing_gee@163.com","commits":16},{"name":"沉默王二","email":"www.qing_gee@163.com","commits":3}]},"readingTime":{"minutes":22.84,"words":6852},"filePathRelative":"thread/pool.md","localizedDate":"2022年3月23日","excerpt":"<h1> 第二十五节：线程池</h1>\\n<p>好，终于到 Java 的线程池了，这是 Java 并发编程中非常重要的一块内容，今天我们就通过图文的方式来彻底弄懂线程池的工作原理，以及在实际项目中该如何自定义适合业务的线程池。</p>\\n<h2> 一、什么是线程池</h2>\\n<p>线程池其实是一种池化的技术实现，池化技术的核心思想就是实现资源的复用，避免资源的重复创建和销毁带来的性能开销。线程池可以管理一堆线程，让线程执行完任务之后不进行销毁，而是继续去处理其它线程已经提交的任务。</p>\\n<p>使用线程池的好处</p>\\n<ul>\\n<li>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li>\\n<li>提高响应速度。当任务到达时，任务可以不需要等到线程创建就能立即执行。</li>\\n<li>提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li>\\n</ul>"}');export{e as data};
