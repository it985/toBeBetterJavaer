import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,d as a,b as e,e as t}from"./app-72970f25.js";const i={},r=t('<h1 id="mysql-表的基本操作" tabindex="-1"><a class="header-anchor" href="#mysql-表的基本操作" aria-hidden="true">#</a> MySQL 表的基本操作</h1><p>有了数据库以后，我们就可以在数据库中对表进行增删改查了，这也就意味着，一名真正的 CRUD Boy 即将到来（😁）。</p><h2 id="查表" tabindex="-1"><a class="header-anchor" href="#查表" aria-hidden="true">#</a> 查表</h2><p>查看当前数据库中的所有表，可以使用 <code>show tables;</code> 命令。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/table-20240127180015.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>由于当前数据库中还没有表，所以输出 <code>Empty set</code>。</p><h3 id="不指定数据库" tabindex="-1"><a class="header-anchor" href="#不指定数据库" aria-hidden="true">#</a> 不指定数据库</h3>',7),u={href:"https://javabetter.cn/mysql/database.html",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"use 数据库名;",-1),k=t(`<p>那假如不指定数据库的话，我们可以通过 <code>show tables from database</code> 的方式，来指定要操作的表，例如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token keyword">from</span> itwanger<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/table-20240127183044.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>可以在建表后再尝试哈。</p></blockquote><h2 id="建表" tabindex="-1"><a class="header-anchor" href="#建表" aria-hidden="true">#</a> 建表</h2><p>既然没有表，那我们就创建一张表吧。创建表的语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>
    列名<span class="token number">1</span> 数据类型<span class="token number">1</span><span class="token punctuation">,</span>
    列名<span class="token number">2</span> 数据类型<span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    列名n 数据类型n
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如，我们创建一张文章表，表中包含文章的标题、内容、作者、发布时间、阅读量等信息，那么可以这样创建：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> article<span class="token punctuation">(</span>
    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>
    title <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    content <span class="token keyword">text</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    author <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    create_time <span class="token keyword">datetime</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    read_count <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>article 是表名；</li><li>id 是主键，类型为 int，自增长；</li><li>title 是标题，类型为 varchar，长度为 100，不允许为空；</li><li>content 是内容，类型为 text，不允许为空；</li><li>author 是作者，类型为 varchar，长度为 20，不允许为空；</li><li>create_time 是发布时间，类型为 datetime，不允许为空；</li><li>read_count 是阅读量，类型为 int，默认值为 0。</li></ul><p>执行上述语句后，可以使用 <code>show tables;</code> 命令查看当前数据库中的所有表，可以看到，已经创建了一张 article 表。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/table-20240127180502.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当然了，实际工作中，我们可能不会直接通过 SQL 语句来创建表，而是通过一些建表的工具，比如说 Navicat、DataGrip 等。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/table-20240127180836.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>以及 PowerDesigner、chiner 这种建模工具，关于工具的使用，可以戳这篇帖子：</p>`,15),m={href:"https://javabetter.cn/gongju/chiner.html",target:"_blank",rel:"noopener noreferrer"},v=t(`<h3 id="给表添加注释" tabindex="-1"><a class="header-anchor" href="#给表添加注释" aria-hidden="true">#</a> 给表添加注释</h3><p>在建表的时候，我们可以给表添加注释，语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>
    列名<span class="token number">1</span> 数据类型<span class="token number">1</span> <span class="token keyword">comment</span> <span class="token string">&#39;注释1&#39;</span><span class="token punctuation">,</span>
    列名<span class="token number">2</span> 数据类型<span class="token number">2</span> <span class="token keyword">comment</span> <span class="token string">&#39;注释2&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    列名n 数据类型n <span class="token keyword">comment</span> <span class="token string">&#39;注释n&#39;</span>
<span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;表注释&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样方便我们在后期维护的时候，能够更好的理解表的含义。</p><p>我们来一个简单的例子，在之前的基础上增加了一些字段的注释和表注释：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> article<span class="token punctuation">(</span>
    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">&#39;主键&#39;</span><span class="token punctuation">,</span>
    title <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;标题&#39;</span><span class="token punctuation">,</span>
    content <span class="token keyword">text</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;内容&#39;</span><span class="token punctuation">,</span>
    author <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;作者&#39;</span><span class="token punctuation">,</span>
    create_time <span class="token keyword">datetime</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;发布时间&#39;</span><span class="token punctuation">,</span>
    read_count <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token keyword">comment</span> <span class="token string">&#39;阅读量&#39;</span>
<span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;文章表&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="假如表已经存在" tabindex="-1"><a class="header-anchor" href="#假如表已经存在" aria-hidden="true">#</a> 假如表已经存在</h3><p>由于之前 article 表已经创建了，这时候再执行上述语句，就会报错 <code>Table &#39;article&#39; already exists</code>：</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/table-20240127181331.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>为了避免这种情况，我们可以在建表的时候，先判断表是否存在，如果不存在，再创建表，语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> 表名<span class="token punctuation">(</span>
    列名<span class="token number">1</span> 数据类型<span class="token number">1</span><span class="token punctuation">,</span>
    列名<span class="token number">2</span> 数据类型<span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    列名n 数据类型n
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际的例子如下所示：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> article<span class="token punctuation">(</span>
    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">&#39;主键&#39;</span><span class="token punctuation">,</span>
    title <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;标题&#39;</span><span class="token punctuation">,</span>
    content <span class="token keyword">text</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;内容&#39;</span><span class="token punctuation">,</span>
    author <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;作者&#39;</span><span class="token punctuation">,</span>
    create_time <span class="token keyword">datetime</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;发布时间&#39;</span><span class="token punctuation">,</span>
    read_count <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token keyword">comment</span> <span class="token string">&#39;阅读量&#39;</span>
<span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;文章表&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="删表" tabindex="-1"><a class="header-anchor" href="#删表" aria-hidden="true">#</a> 删表</h2><p>删除表的语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">table</span> 表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同样的，在删表的时候尽量眨眨眼😂，看看自己是不是被坏人给控制了，否则又是“删库跑路”的悲剧。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/table-20240127181740.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>同样，在删除表的时候也可以加上 <code>if exists</code>，语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> 表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样可以防止表不存在的时候，报错。</p><h2 id="查看表结构" tabindex="-1"><a class="header-anchor" href="#查看表结构" aria-hidden="true">#</a> 查看表结构</h2><p>有时候，我们想知道表的结构是什么样的，也就是 create table 的时候包含了哪些列、列有哪些属性，那这时候我们可以使用以下这些命令查看：</p><ul><li><code>desc 表名;</code></li><li><code>describe 表名;</code></li><li><code>explain 表名;</code></li><li><code>show columns from 表名;</code></li><li><code>show fields from 表名;</code></li></ul><p>结果都是一样的，大家可以根据自己的喜好，记住其中的一个就行了。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/table-20240127182413.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>还有一个命令 <code>show create table 表名;</code>，可以查看建表语句。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/table-20240127182525.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,28),b={href:"https://javabetter.cn/mysql/data-type.html",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>那假如没有使用 <code>use 数据库名;</code> 命令指定要操作的数据库，那我们可以通过 <code>show columns from 数据库名.表名;</code> 的方式，来查看表的结构，例如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> itwanger<span class="token punctuation">.</span>article<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>;</code> 结尾查询到的信息格式比较乱，可以通过 <code> \\G</code> 来格式化输出，例如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> itwanger<span class="token punctuation">.</span>article \\G<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/table-20240127183428.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="改表" tabindex="-1"><a class="header-anchor" href="#改表" aria-hidden="true">#</a> 改表</h2><p>通常来说，创建表之前就要做好充分的设计，尽量增加一些冗余字段来应对未来的需求变更，这样整个程序的改动量是最小的，也不容易出现 bug。</p><p>因为改动表的结构，就意味着对应的 SQL 语句要改、程序的逻辑代码要改、测试用例要改，很容易出现遗漏，导致程序出现意料之外的 bug。</p><p>所以，该表操作一定要慎重。</p><p>但又不能过度设计表，因为过度设计会导致表结构过于复杂，增加了维护成本，而且也不利于后期的扩展。</p><p>所以，<strong>改表操作也是一门学问，需要大家在实际工作中慢慢体会</strong>。</p><h3 id="增加字段" tabindex="-1"><a class="header-anchor" href="#增加字段" aria-hidden="true">#</a> 增加字段</h3><p>通常来说，增加字段是改表操作中最常见的操作，语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> 列名 数据类型<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如，我们要给 article 表增加一个 <code>update_time</code> 字段，类型为 datetime，那么可以这样写：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> article <span class="token keyword">add</span> update_time <span class="token keyword">datetime</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/table-20240127195547.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="增加字段的位置" tabindex="-1"><a class="header-anchor" href="#增加字段的位置" aria-hidden="true">#</a> 增加字段的位置</h4><p>在上面的例子中，我们给 article 表增加了一个 <code>update_time</code> 字段，但是这个字段是添加到了最后，如果我们想要添加到某个字段的前面，那么可以这样写：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> article <span class="token keyword">add</span> update_time <span class="token keyword">datetime</span> <span class="token keyword">after</span> create_time<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/table-20240127195838.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="删除字段" tabindex="-1"><a class="header-anchor" href="#删除字段" aria-hidden="true">#</a> 删除字段</h3><p>删除字段的语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> 列名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如，我们要删除 article 表中的 <code>update_time</code> 字段，那么可以这样写：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> article <span class="token keyword">drop</span> update_time<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="修改字段" tabindex="-1"><a class="header-anchor" href="#修改字段" aria-hidden="true">#</a> 修改字段</h3><p>修改字段发生的频率其实很低，毕竟设计的时候，都是经过深思熟虑的，但是有时候，也会因为一些原因，需要修改字段，比如说字段类型、字段长度等。</p><p>修改字段的语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> 列名 数据类型<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如，我们要修改 article 表中的 <code>title</code> 字段，将类型从 varchar(100) 修改为 varchar(200)，那么可以这样写：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> article <span class="token keyword">modify</span> title <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要注意的是，如果表中已经存在数据了，那么修改表的时候就要格外注意，比如说原来的 <code>title</code> 字段的长度是 100，现在修改为 10，那么就容纳不下原来的数据了，这时候就会报错。</p>`,33),h={href:"https://javabetter.cn/mysql/install.html",target:"_blank",rel:"noopener noreferrer"},y=t(`<h3 id="修改字段名" tabindex="-1"><a class="header-anchor" href="#修改字段名" aria-hidden="true">#</a> 修改字段名</h3><p>有时候，可能我们设计表字段的时候犯了蠢，字段名起的不太好，这时候就需要修改字段名了。修改字段名的语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 change 原列名 新列名 数据类型<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如，我们要修改 article 表中的 <code>title</code> 字段名为 <code>article_title</code>，那么可以这样写：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> article change title article_title <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/table-20240127200813.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="修改表名" tabindex="-1"><a class="header-anchor" href="#修改表名" aria-hidden="true">#</a> 修改表名</h3><p>同样的，当我们需要修改表名时，可这么做：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> 原表名 <span class="token keyword">rename</span> 新表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如，我们要将 article 表名修改为 article_info，那么可以这样写：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> article <span class="token keyword">rename</span> article_info<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/table-20240127200946.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="技术派的表设计" tabindex="-1"><a class="header-anchor" href="#技术派的表设计" aria-hidden="true">#</a> 技术派的表设计</h2>`,13),w={href:"https://javabetter.cn/zhishixingqiu/paicoding.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://javabetter.cn/zhishixingqiu/paicoding.html",target:"_blank",rel:"noopener noreferrer"},q=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/stutymore/table-20240127201143.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),_=n("p",null,"整个库表的设计，首先要先厘清楚业务和需求，然后再进行设计，这样才能做到合理、高效。",-1),x=n("h3",{id:"技术派是如何初始化表的",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#技术派是如何初始化表的","aria-hidden":"true"},"#"),a(" 技术派是如何初始化表的？")],-1),S=n("p",null,"技术派的表初始化是借助 Liquibase 来实现的，具体实现的方法我放在了技术派的教程里，大家可以通过这个链接获取技术派实战教程。",-1),j={href:"https://javabetter.cn/zhishixingqiu/paicoding.html",target:"_blank",rel:"noopener noreferrer"},D=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/stutymore/table-20240127203938.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),z={href:"https://www.liquibase.org/",target:"_blank",rel:"noopener noreferrer"},P=t(`<p>这里我给大家留两个小的作业：</p><ul><li>第一，在不使用 liquibase 的情况下，实现表的初始化。</li><li>第二，借助 liquibase，实现表的初始化。</li></ul><p>我这里只介绍第一种方案，第二种方法大家可以移步到技术派的教程中查看。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForumDataSourceInitializerTest</span> <span class="token keyword">extends</span> <span class="token class-name">BasicTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:liquibase/data/init_schema_221209.sql&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Resource</span> schemaSql<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:liquibase/data/init_data_221209.sql&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Resource</span> initData<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dataSourceInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token function">createCustomDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">DataSourceInitializer</span> initializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置数据源</span>
        initializer<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        initializer<span class="token punctuation">.</span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">final</span> <span class="token class-name">ResourceDatabasePopulator</span> populator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceDatabasePopulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        populator<span class="token punctuation">.</span><span class="token function">addScript</span><span class="token punctuation">(</span>schemaSql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        populator<span class="token punctuation">.</span><span class="token function">addScript</span><span class="token punctuation">(</span>initData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        initializer<span class="token punctuation">.</span><span class="token function">setDatabasePopulator</span><span class="token punctuation">(</span>populator<span class="token punctuation">)</span><span class="token punctuation">;</span>
        initializer<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">DataSource</span> <span class="token function">createCustomDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DriverManagerDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DriverManagerDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/itwanger&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里简单解释一下大家可能比较陌生的代码：</p><p>①、通过 <code>@Value</code> 注解，将 <code>init_schema_221209.sql</code> 和 <code>init_data_221209.sql</code> 文件加载到 Resource 对象中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:liquibase/data/init_schema_221209.sql&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Resource</span> schemaSql<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:liquibase/data/init_data_221209.sql&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Resource</span> initData<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>schema.sql 为表结构文件，data.sql 为表数据文件。</p><p>②、createCustomDataSource 方法用于创建数据源，这里使用的是 Spring 提供的 DriverManagerDataSource，当然了，也可以使用 DruidDataSource、HikariDataSource 等。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">DataSource</span> <span class="token function">createCustomDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DriverManagerDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DriverManagerDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://localhost:3306/itwanger&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>③、ResourceDatabasePopulator 是用于填充数据库的工具类，实现了 DatabasePopulator 接口。主要用于执行 SQL 脚本文件，这些文件可以包含创建表、插入数据等 SQL 命令，也就是前面提到的 schema.sql 和 data.sql。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">ResourceDatabasePopulator</span> populator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceDatabasePopulator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
populator<span class="token punctuation">.</span><span class="token function">addScript</span><span class="token punctuation">(</span>schemaSql<span class="token punctuation">)</span><span class="token punctuation">;</span>
populator<span class="token punctuation">.</span><span class="token function">addScript</span><span class="token punctuation">(</span>initData<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>④、DataSourceInitializer 用于在应用程序启动时自动初始化数据库。通过执行 SQL 脚本来完成这项工作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">DataSourceInitializer</span> initializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置数据源</span>
initializer<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置是否启用初始化</span>
initializer<span class="token punctuation">.</span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 设置填充数据库的工具类</span>
initializer<span class="token punctuation">.</span><span class="token function">setDatabasePopulator</span><span class="token punctuation">(</span>populator<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 执行初始化</span>
initializer<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行该测试类后，可以在控制台看到对应的日志信息。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/table-20240127214129.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后通过 <code>show tables;</code> 命令，可以看到数据库中已经创建了对应的表。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/table-20240127214230.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,18),L={href:"https://github.com/itwanger/paicoding/blob/main/paicoding-web/src/test/java/com/github/paicoding/forum/test/mysql1/ForumDataSourceInitializerTest.java",target:"_blank",rel:"noopener noreferrer"},I=n("h2",{id:"小结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#小结","aria-hidden":"true"},"#"),a(" 小结")],-1),R=n("p",null,"本篇我们主要讲解了 MySQL 表的基本操作，包括查表、建表、删表、查看表结构、改表等。",-1),V=n("p",null,"并结合技术派实战项目，讲解了如何在 Spring Boot 中初始化数据表。",-1),C=n("p",null,"希望大家都能动手实现一样，这样才能掌握真正的表增删改查操作。",-1),M=n("hr",null,null,-1),B={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},N={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},Q=n("p",null,[a("微信搜 "),n("strong",null,"沉默王二"),a(" 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 "),n("strong",null,"222"),a(" 即可免费领取。")],-1),E=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function J(T,U){const s=o("ExternalLinkIcon");return c(),l("div",null,[r,n("p",null,[n("a",u,[a("上一节"),e(s)]),a("，我们提到，在操作表之前，可以通过 "),d,a(" 命令，指定要操作的数据库。")]),k,n("ul",null,[n("li",null,[n("a",m,[a("一款国人开源的数据库设计工具"),e(s)])])]),v,n("p",null,[a("关于"),n("a",b,[a("表的数据类型"),e(s)]),a("，比如说 int、varchar、datetime 等，这些我们会留到后面的章节来讲。")]),g,n("p",null,[a("我们留到"),n("a",h,[a("数据插入"),e(s)]),a("的时候再来演示。")]),y,n("p",null,[n("a",w,[a("技术派"),e(s)]),a("的库表设计，我们放在了技术派的教程里，大家可以通过这个链接获取技术派实战教程。")]),n("p",null,[n("a",f,[a("二哥的原创实战项目技术派详细介绍"),e(s)])]),q,_,x,S,n("p",null,[n("a",j,[a("二哥的原创实战项目技术派详细介绍"),e(s)])]),D,n("blockquote",null,[n("p",null,[n("a",z,[a("Liquibase"),e(s)]),a(" 提供了一种结构化和系统化的方法来管理数据库架构的更改。它通过变更日志和变更集来控制数据库的状态变化，确保了数据库架构变更的可追溯性、可重复性和一致性，同时也支持跨团队的协作。适用于持续集成和持续部署的环境。")])]),P,n("p",null,[a("源码地址："),n("a",L,[a("技术派的表初始化"),e(s)])]),I,R,V,C,M,n("p",null,[a("GitHub 上标星 10000+ 的开源知识库《"),n("a",B,[a("二哥的 Java 进阶之路"),e(s)]),a("》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),n("a",N,[a("太赞了，GitHub 上标星 10000+ 的 Java 教程"),e(s)])]),Q,E])}const F=p(i,[["render",J],["__file","table.html.vue"]]);export{F as default};
