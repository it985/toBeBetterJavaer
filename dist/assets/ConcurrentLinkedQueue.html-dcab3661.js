const e=JSON.parse('{"key":"v-109bb8a4","path":"/thread/ConcurrentLinkedQueue.html","title":"吊打Java并发面试官之线程安全的队列实现ConcurrentLinkedQueue","lang":"zh-CN","frontmatter":{"title":"吊打Java并发面试官之线程安全的队列实现ConcurrentLinkedQueue","shortTitle":"ConcurrentLinkedQueue","description":"ConcurrentLinkedQueue 是 Java 的 java.util.concurrent 包中的一种线程安全的队列实现。它使用非阻塞算法来确保多线程环境下的高并发性能。","category":["Java核心"],"tag":["Java并发编程"],"head":[["meta",{"name":"keywords","content":"Java,并发编程,多线程,Thread,ConcurrentLinkedQueue"}],["meta",{"property":"og:url","content":"https://javabetter.cn/thread/ConcurrentLinkedQueue.html"}],["meta",{"property":"og:site_name","content":"二哥的Java进阶之路"}],["meta",{"property":"og:title","content":"吊打Java并发面试官之线程安全的队列实现ConcurrentLinkedQueue"}],["meta",{"property":"og:description","content":"ConcurrentLinkedQueue 是 Java 的 java.util.concurrent 包中的一种线程安全的队列实现。它使用非阻塞算法来确保多线程环境下的高并发性能。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-08T12:03:00.000Z"}],["meta",{"property":"article:author","content":"沉默王二"}],["meta",{"property":"article:tag","content":"Java并发编程"}],["meta",{"property":"article:modified_time","content":"2023-12-08T12:03:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"吊打Java并发面试官之线程安全的队列实现ConcurrentLinkedQueue\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-08T12:03:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"沉默王二\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"节点类Node","slug":"节点类node","link":"#节点类node","children":[]},{"level":2,"title":"offer方法","slug":"offer方法","link":"#offer方法","children":[{"level":3,"title":"单线程执行角度分析","slug":"单线程执行角度分析","link":"#单线程执行角度分析","children":[]},{"level":3,"title":"多线程执行角度分析","slug":"多线程执行角度分析","link":"#多线程执行角度分析","children":[]}]},{"level":2,"title":"poll方法","slug":"poll方法","link":"#poll方法","children":[{"level":3,"title":"单线程执行角度分析","slug":"单线程执行角度分析-1","link":"#单线程执行角度分析-1","children":[]},{"level":3,"title":"多线程执行情况分析","slug":"多线程执行情况分析","link":"#多线程执行情况分析","children":[]}]},{"level":2,"title":"部分线程 offer 部分线程 poll","slug":"部分线程-offer-部分线程-poll","link":"#部分线程-offer-部分线程-poll","children":[]},{"level":2,"title":"延迟更新策略","slug":"延迟更新策略","link":"#延迟更新策略","children":[]},{"level":2,"title":"使用示例","slug":"使用示例","link":"#使用示例","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1648037338000,"updatedTime":1702036980000,"contributors":[{"name":"itwanger","email":"www.qing_gee@163.com","commits":19},{"name":"沉默王二","email":"www.qing_gee@163.com","commits":3}]},"readingTime":{"minutes":20.25,"words":6075},"filePathRelative":"thread/ConcurrentLinkedQueue.md","localizedDate":"2022年3月23日","excerpt":"<h1> 第二十一节：非阻塞队列ConcurrentLinkedQueue</h1>\\n<p>ConcurrentLinkedQueue 是 <code>java.util.concurrent</code>（JUC） 包下的一个线程安全的队列实现。基于非阻塞算法（Michael-Scott 非阻塞算法的一种变体），这意味着 ConcurrentLinkedQueue 不再使用传统的锁机制来保护数据安全，而是依靠底层原子的操作（如 <a href=\\"https://javabetter.cn/thread/cas.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">CAS</a>）来实现。</p>"}');export{e as data};
