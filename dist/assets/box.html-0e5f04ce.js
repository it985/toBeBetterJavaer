import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,d as s,b as e,e as t}from"./app-72970f25.js";const i={},u=n("h1",{id:"_13-3-拆箱和装箱",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_13-3-拆箱和装箱","aria-hidden":"true"},"#"),s(" 13.3 拆箱和装箱")],-1),r={href:"https://javabetter.cn/basic-grammar/basic-data-type.html",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"“是的，三妹。”我接着三妹的问题回答说。",-1),d=n("li",null,"Java 是面向对象的编程语言，但为了提升程序的运行效率，所以 Java 搞出来了基本数据类型这套东西，比如说 int、double、boolean 等等。后面我会讲为什么。",-1),m=n("code",null,"List<Integer> list = new ArrayList<>();",-1),v=n("code",null,"List<int> list = new ArrayList<>();",-1),b={href:"https://javabetter.cn/basic-extra-meal/generic.html",target:"_blank",rel:"noopener noreferrer"},g=t(`<p>那既然存在基本数据类型，又存在包装类型，它们之间肯定存在一些使用上的差异，以及在某些场景下需要进行类型转换。这就是今天我们要讲的拆箱和装箱。</p><p>拆箱就是将包装类型对象转换为其对应的基本数据类型，而装箱则是将基本数据类型转换为相应的包装类型对象。</p><p>示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> chenmo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 装箱</span>
<span class="token keyword">int</span> wanger <span class="token operator">=</span> chenmo<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 拆箱</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="包装类型和基本数据类型之间的区别" tabindex="-1"><a class="header-anchor" href="#包装类型和基本数据类型之间的区别" aria-hidden="true">#</a> 包装类型和基本数据类型之间的区别</h3><p>好，接下来我们先来介绍一下包装类型和基本数据类型之间的区别。</p><h4 id="包装类型可以为-null-而基本数据类型不可以" tabindex="-1"><a class="header-anchor" href="#包装类型可以为-null-而基本数据类型不可以" aria-hidden="true">#</a> 包装类型可以为 null，而基本数据类型不可以</h4><p>别小看这一点区别，这使得包装类型可以应用于 POJO 中，而基本数据类型则不行。</p><p>POJO 是什么呢？</p><p>POJO 的英文全称是 Plain Ordinary Java Object，翻译一下就是，简单无规则的 Java 对象，只有字段以及对应的 setter 和 getter 方法。来看下面这段代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Writer</span> <span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> age<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> name<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是一个非常纯粹，非常典型的 POJO，在我们编写的 Java 应用程序中会经常用到。</p><p>“哥，你说的 POJO 是不是就是 JavaBean 啊？”三妹这时候追问道。</p><p>“是的，如果定义没那么严格的话，JavaBean 也是一种 POJO。”</p><p>和 POJO 类似的，还有：</p><ul><li>数据传输对象 DTO（Data Transfer Object，泛指用于展示层与服务层之间的数据传输对象）</li><li>视图对象 VO（View Object，把某个页面的数据封装起来）</li><li>持久化对象 PO（Persistant Object，可以看成是与数据库中的表映射的 Java 对象）。</li></ul>`,16),h={href:"https://github.com/itwanger/paicoding",target:"_blank",rel:"noopener noreferrer"},f=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/stutymore/box-20231231071807.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),y={href:"https://javabetter.cn/springboot/lombok.html",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"@Data",-1),_=n("p",null,"“那为什么 POJO 的字段必须要用包装类型呢？”三妹又追问道。",-1),j={href:"https://javabetter.cn/pdf/ali-java-shouce.html",target:"_blank",rel:"noopener noreferrer"},I={href:"https://javabetter.cn/exception/npe.html",target:"_blank",rel:"noopener noreferrer"},x=t(`<p>“什么是自动拆箱呢？”</p><p>“自动拆箱指的是，将包装类型转为基本数据类型，比如说把 Integer 对象转换成 int 值；对应的，把基本数据类型转为包装类型，则称为自动装箱。”</p><p>“哦。”</p><h4 id="包装类型可用于泛型-而基本数据类型不可以" tabindex="-1"><a class="header-anchor" href="#包装类型可用于泛型-而基本数据类型不可以" aria-hidden="true">#</a> 包装类型可用于泛型，而基本数据类型不可以</h4><p>“那接下来，我们来看第二点不同。<strong>包装类型可用于泛型，而基本数据类型不可以</strong>，否则就会出现编译错误。”一边说着，我一边在 Intellij IDEA 中噼里啪啦地敲了起来。</p><p>“三妹，你瞧，编译器提示错误了。”</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 提示 Syntax error, insert &quot;Dimensions&quot; to complete ReferenceType</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>“为什么呢？”三妹及时地问道。</p>`,8),O={href:"https://javabetter.cn/basic-extra-meal/generic.html",target:"_blank",rel:"noopener noreferrer"},J={href:"https://javabetter.cn/basic-extra-meal/generic.html",target:"_blank",rel:"noopener noreferrer"},A=n("p",null,"“嗯，我记得。”",-1),L=n("h4",{id:"基本数据类型比包装类型更高效",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基本数据类型比包装类型更高效","aria-hidden":"true"},"#"),s(" 基本数据类型比包装类型更高效")],-1),M=n("p",null,"“哥，你之前说到，Java 搞出来了基本数据类型这套东西，是为了提升程序的运行效率，为什么呢？”三妹又追问道。",-1),V=n("p",null,"那这里其实就是为了讲这个问题。",-1),P=n("p",null,[s("“好，接下来，我们来说第三点，"),n("strong",null,"基本数据类型比包装类型更高效"),s("。”我喝了一口布丁奶茶后继续说道。")],-1),S={href:"https://app.diagrams.net/",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"draw.io",-1),q=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/core-points/box-01.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),B={href:"https://javabetter.cn/jvm/neicun-jiegou.html",target:"_blank",rel:"noopener noreferrer"},z=t(`<p>很显然，相比较于基本类型而言，包装类型需要占用更多的内存空间。</p><ul><li>基本数据类型：仅占用足够存储其值的固定大小的内存。例如，一个 int 值占用 4 字节。</li><li>包装类型：占用的内存空间要大得多，因为它们是对象，并且要存储对象的元数据。例如，一个 Integer 对象占用 16 字节。</li></ul><p>并且不仅要存储对象，还要存储引用。假如没有基本数据类型的话，对于数值这类经常使用到的数据来说，每次都要通过 new 一个包装类型就显得非常笨重。</p><p>我们通过一个简单的例子来印证这一点：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemoryUsageTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Runtime</span> runtime <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> memoryBefore<span class="token punctuation">,</span> memoryAfter<span class="token punctuation">;</span>
        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span>

        <span class="token comment">// 测试基本类型 int 的内存占用</span>
        runtime<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        memoryBefore <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> runtime<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
        memoryAfter <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> runtime<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;基本数据类型数组占用内存: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>memoryAfter <span class="token operator">-</span> memoryBefore<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 测试包装类型 Integer 的内存占用</span>
        runtime<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        memoryBefore <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> runtime<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> integerArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            integerArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// 自动装箱</span>
        <span class="token punctuation">}</span>
        memoryAfter <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> runtime<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;包装类型数组占用内存空间: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>memoryAfter <span class="token operator">-</span> memoryBefore<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建 100万个数组，一个用基本数据类型，一个用包装类型，然后比较它们的内存占用情况。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>基本数据类型数组占用内存: 5342192
包装类型数组占用内存空间: 22790672
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看得出来，基本数据类型数组占用的内存空间比包装类型的少了一个数量级。当然了，这种方法没那么严谨，但多少能说明一些问题。</p><h4 id="不同类型数据存储的位置" tabindex="-1"><a class="header-anchor" href="#不同类型数据存储的位置" aria-hidden="true">#</a> 不同类型数据存储的位置</h4><p>“三妹，你想知道程序运行时，数据都存储在什么地方吗？”</p><p>“嗯嗯，哥，你说说呗。”</p><p>“通常来说，有 4 个地方可以用来存储数据。”</p><p>1）寄存器。这是最快的存储区，因为它位于 CPU 内部，用来暂时存放参与运算的数据和运算结果。</p><p>2）栈。位于 RAM（Random Access Memory，也叫主存，与 CPU 直接交换数据的内部存储器）中，速度仅次于寄存器。但是，在分配内存的时候，存放在栈中的数据大小与生存周期必须在编译时是确定的，缺乏灵活性。基本数据类型的值和对象的引用通常存储在这块区域。</p><p>3）堆。也位于 RAM 区，可以动态分配内存大小，编译器不必知道要从堆里分配多少存储空间，生存周期也不必事先告诉编译器，Java 的垃圾收集器会自动收走不再使用的数据，因此可以得到更大的灵活性。但是，运行时动态分配内存和销毁对象都需要占用时间，所以效率比栈低一些。new 创建的对象都会存储在这块区域。</p><p>4）磁盘。如果数据完全存储在程序之外，就可以不受程序的限制，在程序没有运行时也可以存在。像文件、数据库，就是通过持久化的方式，让对象存放在磁盘上。当需要的时候，再反序列化成程序可以识别的对象。</p><p>“能明白吗？三妹？”</p><p>“这节讲完后，我再好好消化一下。”</p>`,18),D={href:"https://javabetter.cn/jvm/neicun-jiegou.html",target:"_blank",rel:"noopener noreferrer"},E=t(`<h4 id="包装类型的值可以相同-但却不相等" tabindex="-1"><a class="header-anchor" href="#包装类型的值可以相同-但却不相等" aria-hidden="true">#</a> 包装类型的值可以相同，但却不相等</h4><p>“那好，我们来说第四点，<strong>两个包装类型的值可以相同，但却不相等</strong>。”</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> chenmo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> wanger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>chenmo <span class="token operator">==</span> wanger<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>chenmo<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>wanger <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>“两个包装类型在使用“==”进行判断的时候，判断的是其指向的地址是否相等，由于是两个对象，所以地址是不同的。”</p><p>“而 <code>chenmo.equals(wanger)</code> 的输出结果为 true，是因为 <code>equals()</code> 方法内部比较的是两个 int 值是否相等。”</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然 chenmo 和 wanger 的值都是 10，但他们并不相等。换句话说就是：将“==”操作符应用于包装类型比较的时候，其结果很可能会和预期的不符。</p><h3 id="自动装箱和自动拆箱" tabindex="-1"><a class="header-anchor" href="#自动装箱和自动拆箱" aria-hidden="true">#</a> 自动装箱和自动拆箱</h3><p>“三妹，瞧，<code>((Integer)obj).intValue()</code> 这段代码就是用来拆箱的。不过这种属于手动拆箱，对应的还有一种自动拆箱，我们来详细地解释下。”</p><p>既然有基本数据类型和包装类型，肯定有些时候要在它们之间进行转换。把基本数据类型转换成包装类型的过程叫做装箱（boxing）。反之，把包装类型转换成基本数据类型的过程叫做拆箱（unboxing）。</p><p>在 Java 1.5 之前，开发人员要手动进行装拆箱，比如说：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> chenmo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 手动装箱</span>
<span class="token keyword">int</span> wanger <span class="token operator">=</span> chenmo<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 手动拆箱</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 1.5 为了减少开发人员的工作，提供了自动装箱与自动拆箱的功能。这下就方便了。</p><div class="language-jav line-numbers-mode" data-ext="jav"><pre class="language-jav"><code>Integer chenmo  = 10;  // 自动装箱
int wanger = chenmo;     // 自动拆箱
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>来看一下反编译后的代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> chenmo <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> wanger <span class="token operator">=</span> chenmo<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，自动装箱是通过 <code>Integer.valueOf()</code> 完成的；自动拆箱是通过 <code>Integer.intValue()</code> 完成的。</p><p>“嗯，三妹，给你出一道面试题吧。”</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1）基本数据类型和包装类型</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2）两个包装类型</span>
<span class="token class-name">Integer</span> c <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> d <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3）</span>
c <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
d <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>“给你 3 分钟时间，你先思考下，我去抽根华子，等我回来，然后再来分析一下为什么。”</p><p>。。。。。。</p><p>“嗯，哥，你过来吧，我说一说我的想法。”</p><p>第一段代码，基本数据类型和包装类型进行 == 比较，这时候 b 会自动拆箱，直接和 a 比较值，所以结果为 true。</p><p>第二段代码，两个包装类型都被赋值为了 100，这时候会进行自动装箱，按照你之前说的，将“==”操作符应用于包装类型比较的时候，其结果很可能会和预期的不符，我想结果可能为 false。</p><p>第三段代码，两个包装类型重新被赋值为了 200，这时候仍然会进行自动装箱，我想结果仍然为 false。</p><p>“嗯嗯，三妹，你分析的很有逻辑，但第二段代码的结果为 true，是不是感到很奇怪？”</p><p>“为什么会这样呀？”三妹急切地问。</p><h3 id="integercache" tabindex="-1"><a class="header-anchor" href="#integercache" aria-hidden="true">#</a> IntegerCache</h3><p>“你说的没错，自动装箱是通过 <code>Integer.valueOf()</code> 完成的，我们来看看这个方法的源码就明白为什么了。”</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30),N={href:"https://javabetter.cn/basic-extra-meal/int-cache.html",target:"_blank",rel:"noopener noreferrer"},R=t(`<p>“难道说是 Integer 的缓存类？”三妹做出了自己的判断。</p><p>“是的，来看一下 IntegerCache 的源码吧。”</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">{</span>
    <span class="token comment">// 缓存的最小值，默认为 -128</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>

    <span class="token comment">// 缓存的最大值，默认为 127，但可以通过 JVM 参数配置</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> cache<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token comment">// 默认情况下 high 值为 127</span>
        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>

        <span class="token comment">// 通过系统属性获取用户可能配置的更高的缓存上限</span>
        <span class="token comment">// integerCacheHighPropValue 是一个字符串，代表配置的高值</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>integerCacheHighPropValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 确保缓存的最高值至少为 127</span>
        i <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 设置 high 的值，但不能超过 Integer.MAX_VALUE - (-low) - 1</span>
        h <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">-</span>low<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        high <span class="token operator">=</span> h<span class="token punctuation">;</span>

        <span class="token comment">// 初始化缓存数组，大小为 high - low + 1</span>
        cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token comment">// 填充缓存，从 low 开始，为每个值创建一个 Integer 对象</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
            cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 断言确保 high 的值至少为 127，这是 Java 语言规范要求的</span>
        <span class="token keyword">assert</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high <span class="token operator">&gt;=</span> <span class="token number">127</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大致瞟一下这段代码你就全明白了。-128 到 127 之间的数会从 IntegerCache 中取，然后比较，所以第二段代码（100 在这个范围之内）的结果是 true，而第三段代码（200 不在这个范围之内，所以 new 出来了两个 Integer 对象）的结果是 false。</p><p>“三妹，看完上面的分析之后，我希望你记住一点：<strong>当需要进行自动装箱时，如果数字在 -128 至 127 之间时，会直接使用缓存中的对象，而不是重新创建一个对象</strong>。”</p><h3 id="自动拆箱的注意事项" tabindex="-1"><a class="header-anchor" href="#自动拆箱的注意事项" aria-hidden="true">#</a> 自动拆箱的注意事项</h3><p>“自动装拆箱是一个很好的功能，大大节省了我们开发人员的精力，但也会引发一些麻烦，比如下面这段代码，性能就很差。”</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">long</span> t1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Long</span> sum <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">long</span> t2 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t2<span class="token operator">-</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>“知道为什么吗？三妹。”</p><p>“难道是因为 sum 被声明成了包装类型 Long 而不是基本数据类型 long。”三妹若有所思。</p><p>“是滴，由于 sum 是个 Long 型，而 i 为 int 类型，<code>sum += i</code> 在执行的时候，会先把 i 强转为 long 型，然后再把 sum 拆箱为 long 型进行相加操作，之后再自动装箱为 Long 型赋值给 sum。”</p>`,11),T={href:"https://javabetter.cn/jvm/bytecode.html",target:"_blank",rel:"noopener noreferrer"},U=n("code",null,"javap -v xxx.class",-1),H=t('<figure><img src="https://cdn.tobebetterjavaer.com/stutymore/box-20231231092746.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从这里面，你应该能看到 <code>Long.valueOf()</code> 和 <code>Long.longValue()</code> 的身影。它们分别对应了自动装箱和自动拆箱。</p><p>“三妹，你可以试一下，把 sum 换成 long 型比较一下它们运行的时间。”</p><p>。。。。。。</p><p>“哇，sum 为 Long 型的时候，足足运行了 5825 毫秒；sum 为 long 型的时候，只需要 679 毫秒。”</p><p>“好了，三妹，今天的主题就先讲到这吧。我再去来根华子。”</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>今天我们讲了拆箱和装箱的概念，以及包装类型和基本数据类型之间的区别。最后，我们还讲了自动装箱和自动拆箱的原理，以及自动拆箱的注意事项。</p><hr>',9),X={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},F={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},G=n("p",null,[s("微信搜 "),n("strong",null,"沉默王二"),s(" 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 "),n("strong",null,"222"),s(" 即可免费领取。")],-1),W=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function K(Q,Y){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("“哥，听说 Java 的每个"),n("a",r,[s("基本数据类型"),e(a)]),s("都对应了一个包装类型，比如说 int 的包装类型为 Integer，double 的包装类型为 Double，是这样吗？”从三妹这句话当中，能听得出来，她已经提前预习这块内容了。")]),k,n("ul",null,[d,n("li",null,[s("但是，基本数据类型又不能满足所有的应用场景，比如说，我们定义一个 int 类型的 ArrayList，你就只能用 "),m,s(" 这种方式来定义，不能用 "),v,s(" 这种方式来定义，因为"),n("a",b,[s("泛型"),e(a)]),s("不支持基本数据类型。后面我也会讲为什么。")])]),g,n("p",null,[n("a",h,[s("技术派实战项目"),e(a)]),s("当中就有大量 POJO，我截图大家感受下，工作后其实会经常碰到。")]),f,n("p",null,[s("只不过，我们不再写 setter 和 getter 方法，而是使用 "),n("a",y,[s("Lombok"),e(a)]),s(" 来自动生成。也就是上图当中的 "),w,s(" 注解。")]),_,n("p",null,[s("“《"),n("a",j,[s("阿里巴巴 Java 开发手册"),e(a)]),s("》上有详细的说明，你看。”我打开 PDF，并翻到了对应的内容，指着屏幕念道。")]),n("blockquote",null,[n("p",null,[s("数据库的查询结果可能是 null，如果使用基本数据类型的话，因为要自动拆箱，就会抛出 "),n("a",I,[s("NullPointerException 的异常"),e(a)]),s("。")])]),x,n("p",null,[s("“因为"),n("a",O,[s("泛型"),e(a)]),s("在编译时会进行类型擦除，最后只保留原始类型，而原始类型只能是 Object 类及其子类——基本数据类型是个例外。”")]),n("p",null,[s("这个我们在讲"),n("a",J,[s("泛型"),e(a)]),s("的时候，也有详细讲过，你应该还记得吧？")]),A,L,M,V,P,n("p",null,[s("“作为局部变量时，基本数据类型在栈中直接存储的具体数值，而包装类型则存储的是堆中的引用。”我一边说着，一边打开 "),n("a",S,[C,e(a)]),s(" 画起了图。")]),q,n("blockquote",null,[n("p",null,[s("关于堆和栈的知识，我们会在讲 "),n("a",B,[s("JVM 运行时数据区"),e(a)]),s("的时候详细讲解。")])]),z,n("p",null,[s("“别担心，后面讲 "),n("a",D,[s("JVM 运行时数据区"),e(a)]),s("的时候也会重新讲到。”")]),E,n("p",null,[s("是不是看到了一个之前见过的类——"),n("a",N,[s("IntegerCache"),e(a)]),s("？")]),R,n("p",null,[s("等后面你学了 "),n("a",T,[s("javap"),e(a)]),s(" 命令之后，就可以通过 "),U,s(" 命令来查看这段代码的执行过程。")]),H,n("p",null,[s("GitHub 上标星 10000+ 的开源知识库《"),n("a",X,[s("二哥的 Java 进阶之路"),e(a)]),s("》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),n("a",F,[s("太赞了，GitHub 上标星 10000+ 的 Java 教程"),e(a)])]),G,W])}const nn=p(i,[["render",K],["__file","box.html.vue"]]);export{nn as default};
