import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o,c as p,a as s,d as a,b as n,e as t}from"./app-72970f25.js";const r={},c=t('<h1 id="mysql-bin目录下的可执行文件" tabindex="-1"><a class="header-anchor" href="#mysql-bin目录下的可执行文件" aria-hidden="true">#</a> MySQL bin目录下的可执行文件</h1><p>这节我们穿插讲一点轻松的内容，关于 MySQL 安装成功后，bin 目录下的一些可执行文件，它们到底是干嘛用的？</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205172946.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我本机是 macOS 环境，目前能看到的可执行文件就如上图所示，Windows 下看到的是一些带 exe 后缀的文件，但它们的功能都是一样的。</p><h2 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> mysql</h2>',5),d={href:"https://javabetter.cn/mysql/install.html",target:"_blank",rel:"noopener noreferrer"},u=t(`<p>如果 MySQL 已经添加到 PATH 环境变量中的话，不管你在任何地方打开终端，只要执行 <code>mysql -uroot -p</code> 就可以连接到 MySQL 服务器，否则就要在 bin 目录下执行 <code>./mysql -uroot -p</code> 或者 <code>mysql -uroot -p</code>（macOS 环境）。</p><p>Windows 环境的话，需要在 cmd 中切换到 bin 目录下，再执行 <code>mysql -uroot -p</code>。</p><p>我们前面也讲过为什么要这样，这里就不再赘述了。</p><p>这里讲一些连接到 MySQL 服务器后的注意事项，属于比较细节的内容。</p><h3 id="命令结束符" tabindex="-1"><a class="header-anchor" href="#命令结束符" aria-hidden="true">#</a> 命令结束符</h3><p>在敲入一条 SQL 语句后，需要加上命令结束符 <code>;</code>，否则 MySQL 服务器会认为你还没有输入完整的 SQL 语句，会一直等待你输入，直到你输入 <code>;</code>。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205174107.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>那除了 <code>;</code> 之外，你还可以使用 <code>\\g</code> 或者 <code>\\G</code> 作为命令结束符，它们的区别是：</p><ul><li><code>;</code>：表示一次性执行所有 SQL 语句；</li><li><code>\\g</code>：同上；</li><li><code>\\G</code>：表示一次性执行所有 SQL 语句，并且以纵向显示结果，如果查询结果的列数比较多的话，该结尾符会让结果更加清晰。</li></ul><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205174327.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="命令可以随意换行" tabindex="-1"><a class="header-anchor" href="#命令可以随意换行" aria-hidden="true">#</a> 命令可以随意换行</h3><p>在输入 SQL 语句的时候，可以随意换行，不需要在意换行的位置，只要 SQL 语句的逻辑是正确的，MySQL 服务器就会认为你输入的是一条完整的 SQL 语句。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205174621.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="一次性执行多条-sql-语句" tabindex="-1"><a class="header-anchor" href="#一次性执行多条-sql-语句" aria-hidden="true">#</a> 一次性执行多条 SQL 语句</h3><p>可以在一行 SQL 语句里执行多条 SQL 语句，只需要用 <code>;</code> 分隔开即可。这对于批量执行 SQL 语句是非常方便的。</p><p>举例来说，下面的 SQL 语句就是一次性执行了两条 SQL 语句。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span> <span class="token keyword">use</span> mysql<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205174853.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="放弃执行-sql-语句" tabindex="-1"><a class="header-anchor" href="#放弃执行-sql-语句" aria-hidden="true">#</a> 放弃执行 SQL 语句</h3><p>如果你输入了一条 SQL 语句，但是又不想执行了，可以输入 <code>\\c</code> 来放弃执行。</p><p>当你SQL 输错了，又懒得删改，就可以使用 <code>\\c</code> 来放弃执行。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205175026.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="sql-语句大小写不敏感" tabindex="-1"><a class="header-anchor" href="#sql-语句大小写不敏感" aria-hidden="true">#</a> SQL 语句大小写不敏感</h3><p>MySQL 默认对命令的大小写是不敏感的，也就是说，你可以随意输入大小写，MySQL 服务器都会认为你输入的是一样的。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205175153.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>不过通常来说，SQL 语句的关键字都是大写的，而表名、字段名等都是小写的，这样可以让 SQL 语句更加清晰。</p><blockquote><p>不过，这只是一种约定，不是强制的。</p></blockquote><h3 id="字符串的引号" tabindex="-1"><a class="header-anchor" href="#字符串的引号" aria-hidden="true">#</a> 字符串的引号</h3><p>在 SQL 语句中，可以使用单引号或者双引号表示字符串字面量。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205175523.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>建议使用单引号，因为 MySQL 在开启 <code>ANSI_QUOTES</code> 模式的情况下，双引号会有其他特殊的含义。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205175915.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查询 MySQL 是不是开启了 <code>ANSI_QUOTES</code> 模式，可以使用 <code>show variables like &#39;sql_mode&#39;;</code> 来查询。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205180347.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到默认是没有开启的。</p><p>我们可以使用单引号和双引号来定义字符串，使用反引号 \` 来定义标识符，比如表名、字段名等。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205180656.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们给 sql_mode 添加 <code>ANSI_QUOTES</code> 模式：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">set</span> sql_mode<span class="token operator">=</span><span class="token string">&#39;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,ANSI_QUOTES&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205181238.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>再执行下面的 SQL 语句：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">\`</span>title<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token string">&quot;short_title&quot;</span> <span class="token keyword">FROM</span> <span class="token identifier"><span class="token punctuation">\`</span>article<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>会发现，双引号也被认为是标识符了，和反引号 \` 的效果是一样的。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205181258.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="退出-mysql-连接" tabindex="-1"><a class="header-anchor" href="#退出-mysql-连接" aria-hidden="true">#</a> 退出 MySQL 连接</h3><p>在 MySQL 连接状态下，可以使用 <code>exit</code>、<code>quit</code>、<code>\\q</code>、<code>Ctrl + D</code> 来退出连接。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205181608.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>看，我们在添加 sql_mode 的时候，是针对当前连接 session 的，所以当我们退出连接后，再重新连接，就会发现 sql_mode 又变成了默认的。</p><h2 id="mysqldump" tabindex="-1"><a class="header-anchor" href="#mysqldump" aria-hidden="true">#</a> mysqldump</h2><p>mysqldump 是一个非常实用的 MySQL 数据库备份工具，用于创建一个或多个 MySQL 数据库级别的 SQL 转储文件，包括数据库的表结构和数据。对数据备份、迁移或恢复非常重要。</p><p>备份整个数据库的语法如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqldump <span class="token parameter variable">-u</span> <span class="token punctuation">[</span>username<span class="token punctuation">]</span> -p<span class="token punctuation">[</span>password<span class="token punctuation">]</span> <span class="token punctuation">[</span>database_name<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token punctuation">[</span>filename<span class="token punctuation">]</span>.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>-u</code>：指定用户名；</li><li><code>-p</code>：指定密码；如果没有输入密码，系统会在执行命令后提示输入密码；</li><li><code>database_name</code>：指定要备份的数据库；</li><li><code>filename</code>：指定备份文件的名称。</li></ul><p>比如说，我要备份<a href="%5Bhttps://%5D(https://javabetter.cn/zhishixingqiu/paicoding.html)">技术派实战项目</a>的整个数据库，可以使用下面的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqldump <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> pai_coding <span class="token operator">&gt;</span> pai_coding.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行完再打个压缩包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">gzip</span> pai_coding.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205183507.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>也可以备份指定的表，比如说，我要备份 article 表：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqldump <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> pai_coding article <span class="token operator">&gt;</span> article.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在数据库名后面加上表名就好了。</p><p>也可以备份多个数据库，比如说，我要备份 pai_coding 和 test 两个数据库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqldump <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> <span class="token parameter variable">--databases</span> pai_coding <span class="token builtin class-name">test</span> <span class="token operator">&gt;</span> pai_coding_test.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 <code>--databases</code> 参数，后面跟上要备份的数据库名，中间用空格隔开。</p><p>要备份所有数据库的话，可以使用 <code>--all-databases</code> 参数。</p>`,65),m={href:"https://help.aliyun.com/document_detail/133509.html",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>我们来写一个简单的备份脚本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># 设置 MySQL 用户名、密码、数据库名和备份目录</span>
<span class="token assign-left variable">MYSQL_USER</span><span class="token operator">=</span><span class="token string">&quot;your_username&quot;</span>
<span class="token assign-left variable">MYSQL_PASSWORD</span><span class="token operator">=</span><span class="token string">&quot;your_password&quot;</span>
<span class="token assign-left variable">DATABASE_NAME</span><span class="token operator">=</span><span class="token string">&quot;your_database_name&quot;</span>
<span class="token assign-left variable">BACKUP_DIR</span><span class="token operator">=</span><span class="token string">&quot;/path/to/your/backup/directory&quot;</span>

<span class="token comment"># 生成备份文件名，包含日期</span>
<span class="token assign-left variable">DATE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y%m%d_%H%M%S<span class="token variable">)</span></span>
<span class="token assign-left variable">BACKUP_FILE</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$BACKUP_DIR</span>/<span class="token variable">$DATABASE_NAME_</span><span class="token variable">$DATE</span>.sql&quot;</span>

<span class="token comment"># 使用 mysqldump 创建数据库备份</span>
mysqldump <span class="token parameter variable">-u</span> <span class="token variable">$MYSQL_USER</span> -p<span class="token variable">$MYSQL_PASSWORD</span> <span class="token variable">$DATABASE_NAME</span> <span class="token operator">&gt;</span> <span class="token variable">$BACKUP_FILE</span>

<span class="token comment"># 检查备份操作是否成功</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;数据库备份成功: <span class="token variable">$BACKUP_FILE</span>&quot;</span>
<span class="token keyword">else</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;备份出错了！&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将上面的脚本保存为 <code>backup.sh</code>，然后添加执行权限：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chmod</span> +x backup.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后执行脚本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./backup.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205185257.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>OK，打开 crontab：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">crontab</span> <span class="token parameter variable">-e</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加一行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">0</span> <span class="token number">3</span> * * * /path/to/your/backup.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样就可以在每天凌晨三点执行备份操作了。我就不再演示了。</p><p>当数据库较大时，mysqldump 可能会消耗较长的时间和系统资源，所以尽量在数据库不繁忙的时候执行备份操作，比如说凌晨两三点。</p>`,13),g=s("code",null,"--single-transaction",-1),v={href:"https://javabetter.cn/mysql/InnoDB.html",target:"_blank",rel:"noopener noreferrer"},h=t(`<h2 id="mysqladmin" tabindex="-1"><a class="header-anchor" href="#mysqladmin" aria-hidden="true">#</a> mysqladmin</h2><p>mysql 后面加上 admin 就表明这是一个 MySQL 的管理工具，它可以用来执行一些管理操作，比如说创建数据库、删除数据库、查看 MySQL 服务器的状态等。</p><p>比如说，我要查看 MySQL 服务器的状态：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqladmin <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205190217.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>比如说，重新加载授权表、刷新日志文件等：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqladmin <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> flush-privileges
mysqladmin <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> reload
mysqladmin <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> flush-logs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>flush-privileges 和 reload 是一样的效果。</li><li>flush-logs 是刷新日志文件。</li></ul><p>比如说，我要创建一个数据库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqladmin <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> create <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如说，我要删除一个数据库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqladmin <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> drop <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在自动化脚本中，会经常使用 mysqladmin 来执行一些管理操作。</p><h2 id="mysqlcheck" tabindex="-1"><a class="header-anchor" href="#mysqlcheck" aria-hidden="true">#</a> mysqlcheck</h2><p>mysqlcheck 是 MySQL 提供的一个命令行工具，用于检查、修复、分析和优化数据库表，对数据库的维护和性能优化非常有用。</p><p>比如说，我要检查数据库的所有表：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqlcheck <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> <span class="token parameter variable">--check</span> your_database_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205191424.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="mysqlimport" tabindex="-1"><a class="header-anchor" href="#mysqlimport" aria-hidden="true">#</a> mysqlimport</h2><p>mysqlimport 用于从文本文件中导入数据到数据库表中，非常适合用于批量导入数据。比如说，我有一个 CSV 文件，我要导入到数据库表中：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqlimport <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> --fields-terminated-by<span class="token operator">=</span>, --fields-enclosed-by<span class="token operator">=</span><span class="token string">&#39;&quot;&#39;</span> --lines-terminated-by<span class="token operator">=</span><span class="token string">&#39;\\n&#39;</span> your_database_name your_table_name.csv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>--fields-terminated-by</code>：指定字段之间的分隔符；</li><li><code>--fields-enclosed-by</code>：指定字段的包围符；</li><li><code>--lines-terminated-by</code>：指定行的结束符。</li><li><code>your_table_name.csv</code>：指定要导入的文件。</li><li><code>your_database_name</code>：指定要导入的数据库。</li></ul><p>好，我们来创建一个 CSV 文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;1, &#39;Java&#39;, &#39;Java is the best language&#39;, &#39;2022-02-05 19:30:00&#39;&quot;</span> <span class="token operator">&gt;</span> article.csv
<span class="token builtin class-name">echo</span> <span class="token string">&quot;2, &#39;Python&#39;, &#39;Python is the best language&#39;, &#39;2022-02-05 19:30:00&#39;&quot;</span> <span class="token operator">&gt;&gt;</span> article.csv
<span class="token builtin class-name">echo</span> <span class="token string">&quot;3, &#39;Go&#39;, &#39;Go is the best language&#39;, &#39;2022-02-05 19:30:00&#39;&quot;</span> <span class="token operator">&gt;&gt;</span> article.csv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着创建一张表：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>article<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>title<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>content<span class="token punctuation">\`</span></span> <span class="token keyword">text</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>create_time<span class="token punctuation">\`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后导入：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqlimport <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> --fields-terminated-by<span class="token operator">=</span>, --fields-enclosed-by<span class="token operator">=</span><span class="token string">&#39;&quot;&#39;</span> --lines-terminated-by<span class="token operator">=</span><span class="token string">&#39;\\n&#39;</span> pai_coding article.csv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>哦，出现了 <code>--secure-file-priv</code> 错误：</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205194729.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们可以先查看一下 <code>--secure-file-priv</code> 参数的值：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;secure_file_priv&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205195109.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>为 null，表明 MySQL 并没有限制导入文件的目录。我们只需要加入 <code>--local</code> 参数即可：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqlimport <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> --fields-terminated-by<span class="token operator">=</span>, --fields-enclosed-by<span class="token operator">=</span><span class="token string">&#39;&quot;&#39;</span> --lines-terminated-by<span class="token operator">=</span><span class="token string">&#39;\\n&#39;</span> <span class="token parameter variable">--local</span> pai_coding article.csv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205195624.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>OK，导入成功。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205195636.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="mysqlshow" tabindex="-1"><a class="header-anchor" href="#mysqlshow" aria-hidden="true">#</a> mysqlshow</h2><p>mysqlshow 用于显示 MySQL 数据库服务器中的数据库、表、列等信息。</p><p>比如说，我要查看数据库中的所有表：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqlshow <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> your_database_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205200127.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>比如说，我要查看表中的所有列：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqlshow <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> your_database_name your_table_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205200227.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>比如说，我要查看表的索引信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqlshow <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> <span class="token parameter variable">--keys</span> your_database_name your_table_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/bin-20240205200416.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在部署新应用或进行数据库迁移时，可以使用 mysqlshow 快速确认目标数据库是否已经存在。</p><h2 id="mysqlbinlog" tabindex="-1"><a class="header-anchor" href="#mysqlbinlog" aria-hidden="true">#</a> mysqlbinlog</h2><p>mysqlbinlog 用于查看 MySQL 二进制日志文件的内容，可以用于恢复数据、查看数据变更等。二进制日志是 MySQL 服务器的一个重要特性，记录了数据库更改的所有“事件”，如表的创建、数据的插入、更新和删除操作。</p><p>如果发生数据丢失或损坏，就可以使用 mysqlbinlog 来查看和恢复自上次备份以来执行的更改。</p><p>比如说，我要查看二进制日志文件的内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqlbinlog <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> /path/to/your/binlog.000001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>前提条件是你已经开启了二进制日志。</p><p>假设你想要查看并恢复从昨天晚上 10 点到今天早上 2 点之间发生的所有数据库更改，你可以使用 mysqlbinlog 的 <code>--start-datetime</code> 和 <code>--stop-datetime</code> 选项来过滤这个时间范围内的事件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqlbinlog --start-datetime<span class="token operator">=</span><span class="token string">&quot;YYYY-MM-DD 22:00:00&quot;</span> <span class="token punctuation">\\</span>
            --stop-datetime<span class="token operator">=</span><span class="token string">&quot;YYYY-MM-DD 02:00:00&quot;</span> <span class="token punctuation">\\</span>
            /path/to/binlog-file <span class="token operator">&gt;</span> /path/to/output.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,58),k={href:"https://javabetter.cn/mysql/binlog.html",target:"_blank",rel:"noopener noreferrer"},y=t('<h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><p>bin 目录下还有一些其他的可执行文件，比如说 mysqlslap、mysql_upgrade、mysqld_safe、mysql_secure_installation、mysqlpump、mysql_config、mysql_tzinfo_to_sql 等等，我们就不一次性全讲了，后面遇到我觉得值得给大家细讲的，我们再回来来补充。</p><p>这里就简单做一个表格吧：</p><table><thead><tr><th>可执行文件</th><th>作用</th></tr></thead><tbody><tr><td>mysqlslap</td><td>用于模拟多个客户端并发访问 MySQL 服务器，用于测试 MySQL 服务器的性能。</td></tr><tr><td>mysql_upgrade</td><td>用于升级 MySQL 数据库。</td></tr><tr><td>mysqld_safe</td><td>用于启动 MySQL 服务器的守护进程。</td></tr><tr><td>mysql_secure_installation</td><td>用于执行一系列安全相关的操作来提高 MySQL 安装的安全性。它包括设置 root 密码、删除匿名用户、禁用远程 root 登录等步骤。</td></tr><tr><td>mysqlpump</td><td>一个类似于 mysqldump 的 MySQL 备份工具，但它支持并行备份操作，可以更快地备份大型数据库。</td></tr><tr><td>mysql_config</td><td>用于获取编译和链接客户端应用所需的 MySQL 选项的脚本。</td></tr><tr><td>mysql_tzinfo_to_sql</td><td>用于加载时区信息到 MySQL 服务器。</td></tr></tbody></table><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>bin 目录下的可执行文件合起来为 MySQL 的安装、运行、管理和维护提供了全面的支持。</p><hr>',7),f={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},q={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},_=s("p",null,[a("微信搜 "),s("strong",null,"沉默王二"),a(" 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 "),s("strong",null,"222"),a(" 即可免费领取。")],-1),S=s("figure",null,[s("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png",alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1);function x(L,Q){const e=l("ExternalLinkIcon");return o(),p("div",null,[c,s("p",null,[a("MySQL 是 CS 架构，当客户端想要连接 MySQL 服务器的时候，就需要执行 mysql 这个可执行文件，我们在 "),s("a",d,[a("MySQL 安装"),n(e)]),a("的时候也讲到过。")]),u,s("p",null,[a("在生产环境中，为了防止数据丢失，我们可以编写脚本并使用 "),s("a",m,[a("cron 表达式"),n(e)]),a("在后台自动执行这些备份操作。")]),b,s("p",null,[a("对于非常大的数据库，可以使用 "),g,a(" 参数来执行备份，这样可以避免锁表，但是要求数据库引擎是 "),s("a",v,[a("InnoDB"),n(e)]),a("。")]),h,s("p",null,[a("这部分我们在讲 "),s("a",k,[a("binlog"),n(e)]),a(" 的时候会详细讲。")]),y,s("p",null,[a("GitHub 上标星 10000+ 的开源知识库《"),s("a",f,[a("二哥的 Java 进阶之路"),n(e)]),a("》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),s("a",q,[a("太赞了，GitHub 上标星 10000+ 的 Java 教程"),n(e)])]),_,S])}const w=i(r,[["render",x],["__file","bin.html.vue"]]);export{w as default};
