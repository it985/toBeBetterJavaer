import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,d as a,b as e,e as t}from"./app-72970f25.js";const l={},r=n("h1",{id:"_4-8-stringbuilder和stringbuffer",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-8-stringbuilder和stringbuffer","aria-hidden":"true"},"#"),a(" 4.8 StringBuilder和StringBuffer")],-1),u={href:"https://javabetter.cn/string/intern.html",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"“好啊，它们之间的关系还真的是挺和谐的。”看着三妹好奇的样子，我感到学技术就应该是这个样子才对。",-1),k=n("h3",{id:"stringbuffer和stringbuilder的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#stringbuffer和stringbuilder的区别","aria-hidden":"true"},"#"),a(" StringBuffer和StringBuilder的区别")],-1),v={href:"https://javabetter.cn/string/immutable.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://javabetter.cn/string/join.html",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"+",-1),g=t(`<p>于是 Java 就设计了一个专门用来解决此问题的 StringBuffer 类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">StringBuffer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">StringBuffer</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 其他方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),h={href:"https://javabetter.cn/thread/synchronized-1.html",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"synchronized",-1),f={href:"https://javabetter.cn/thread/ThreadLocal.html",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"ThreadLocal",-1),w=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractStringBuilder</span>
    <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span>
<span class="token punctuation">{</span>
    <span class="token comment">// ...</span>

    <span class="token keyword">public</span> <span class="token class-name">StringBuilder</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Create a copy, don&#39;t share the array</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了类名不同，方法没有加 synchronized，基本上完全一样。</p><p>实际开发中，StringBuilder 的使用频率也是远高于 StringBuffer，甚至可以这么说，StringBuilder 完全取代了 StringBuffer。</p><h3 id="stringbuilder的使用" tabindex="-1"><a class="header-anchor" href="#stringbuilder的使用" aria-hidden="true">#</a> StringBuilder的使用</h3>`,4),S={href:"https://javabetter.cn/overview/what-is-java.html",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"+",-1),B=n("code",null,'new String("二哥") + new String("三妹")',-1),C=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;二哥&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;三妹&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个过程是我们看不见的，但这正是 Java 的“智能”之处，它可以在编译的时候偷偷地帮我们做很多优化，这样既可以提高我们的开发效率（<code>+</code> 号写起来比创建 StringBuilder 对象便捷得多），也不会影响 JVM 的执行效率。</p>`,2),x={href:"https://javabetter.cn/jvm/bytecode.html",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,'new String("二哥") + new String("三妹")',-1),q={href:"https://javabetter.cn/jvm/bytecode.html",target:"_blank",rel:"noopener noreferrer"},A=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0: new           #2                  // class java/lang/StringBuilder
3: dup
4: invokespecial #3                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V
7: new           #4                  // class java/lang/String
10: dup
11: ldc           #5                  // String 二哥
13: invokespecial #6                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V
16: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
19: new           #4                  // class java/lang/String
22: dup
23: ldc           #8                  // String 三妹
25: invokespecial #6                  // Method java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V
28: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
31: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
34: areturn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 Java 编译器将字符串拼接操作（<code>+</code>）转换为了 StringBuilder 对象的 append 方法，然后再调用 StringBuilder 对象的 toString 方法返回拼接后的字符串。</p><h3 id="stringbuilder的内部实现" tabindex="-1"><a class="header-anchor" href="#stringbuilder的内部实现" aria-hidden="true">#</a> StringBuilder的内部实现</h3><p>来看一下 StringBuilder 的 toString 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),J={href:"https://javabetter.cn/array/array.html",target:"_blank",rel:"noopener noreferrer"},I=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * The value is used for character storage.
 */</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 StringBuilder 对象创建时，会为 value 分配一定的内存空间（初始容量 16），用于存储字符串。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Constructs a string builder with no characters in it and an
 * initial capacity of 16 characters.
 */</span>
<span class="token keyword">public</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),M={href:"https://javabetter.cn/collection/arraylist.html",target:"_blank",rel:"noopener noreferrer"},V=t(`<p>继续来看 StringBuilder 的 toString 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>value 用于存储 StringBuilder 对象中包含的字符序列。count 是一个 int 类型的变量，表示字符序列的长度。toString() 方法会调用 <code>new String(value, 0, count)</code>，使用 value 数组中从 0 开始的前 count 个元素创建一个新的字符串对象，并将其返回。</p><p>再来看一下 append 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">StringBuilder</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上是调用了 AbstractStringBuilder 中的 <code>append(String str)</code> 方法。在 AbstractStringBuilder 中，<code>append(String str)</code> 方法会检查当前字符序列中的字符是否够用，如果不够用则会进行扩容，并将指定字符串追加到字符序列的末尾。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token function">appendNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>count <span class="token operator">+</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    str<span class="token punctuation">.</span><span class="token function">getChars</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> value<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    count <span class="token operator">+=</span> len<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>append(String str)</code> 方法将指定字符串追加到当前字符序列中。如果指定字符串为 null，则追加字符串 &quot;null&quot;；否则会检查指定字符串的长度，然后根据当前字符序列中的字符数和指定字符串的长度来判断是否需要扩容。</p><p>如果需要扩容，则会调用 <code>ensureCapacityInternal(int minimumCapacity) </code>方法。扩容之后，将指定字符串的字符拷贝到字符序列中。</p><p>来看一下 ensureCapacityInternal 方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> minimumCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 不够用了，扩容</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>minimumCapacity <span class="token operator">-</span> value<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">expandCapacity</span><span class="token punctuation">(</span>minimumCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">expandCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> minimumCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 扩容策略：新容量为旧容量的两倍加上 2</span>
    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> value<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果新容量小于指定的最小容量，则新容量为指定的最小容量</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minimumCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        newCapacity <span class="token operator">=</span> minimumCapacity<span class="token punctuation">;</span>
    <span class="token comment">// 如果新容量小于 0，则新容量为 Integer.MAX_VALUE</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>minimumCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfMemoryError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        newCapacity <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将字符序列的容量扩容到新容量的大小</span>
    value <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ensureCapacityInternal(int minimumCapacity)</code> 方法用于确保当前字符序列的容量至少等于指定的最小容量 minimumCapacity。如果当前容量小于指定的容量，就会为字符序列分配一个新的内部数组。新容量的计算方式如下：</p><ul><li>如果指定的最小容量大于当前容量，则新容量为两倍的旧容量加上 2。为什么要加 2 呢？对于非常小的字符串（比如空的或只有一个字符的 StringBuilder），仅仅将容量加倍可能仍然不足以容纳更多的字符。在这种情况下，+ 2 提供了一个最小的增长量，确保即使对于很小的初始容量，扩容后也能至少添加一些字符而不需要立即再次扩容。</li><li>如果指定的最小容量小于等于当前容量，则不会进行扩容，直接返回当前对象。</li></ul><p>在进行扩容之前，<code>ensureCapacityInternal(int minimumCapacity)</code> 方法会先检查当前字符序列的容量是否足够，如果不足就会调用 <code>expandCapacity(int minimumCapacity)</code> 方法进行扩容。<code>expandCapacity(int minimumCapacity)</code> 方法首先计算出新容量，然后使用 <code>Arrays.copyOf(char[] original, int newLength)</code> 方法将原字符数组扩容到新容量的大小。</p>`,14),z={href:"https://javabetter.cn/common-tool/arrays.html",target:"_blank",rel:"noopener noreferrer"},O={href:"https://javabetter.cn/collection/arraylist.html",target:"_blank",rel:"noopener noreferrer"},E=t(`<h3 id="stringbuilder的-reverse-方法" tabindex="-1"><a class="header-anchor" href="#stringbuilder的-reverse-方法" aria-hidden="true">#</a> StringBuilder的 reverse 方法</h3><p>StringBuilder 还提供了一个 reverse 方法，用于反转当前字符序列中的字符。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">StringBuilder</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也是调用了父类 AbstractStringBuilder 中的 <code>reverse()</code> 方法，我把一些非核心代码剔除掉了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 字符序列的最后一个字符的索引</span>
    <span class="token comment">// 遍历字符串的前半部分</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> n <span class="token operator">-</span> j<span class="token punctuation">;</span> <span class="token comment">// 计算相对于 j 对称的字符的索引</span>
        <span class="token keyword">char</span> cj <span class="token operator">=</span> value<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 获取当前位置的字符</span>
        <span class="token keyword">char</span> ck <span class="token operator">=</span> value<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 获取对称位置的字符</span>
        value<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> ck<span class="token punctuation">;</span> <span class="token comment">// 交换字符</span>
        value<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> cj<span class="token punctuation">;</span> <span class="token comment">// 交换字符</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">// 返回反转后的字符串构建器对象</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><strong>初始化</strong>： <code>n</code> 是字符串中最后一个字符的索引。</li><li><strong>字符串反转</strong>： <ul><li>方法通过一个 <code>for</code> 循环遍历字符串的前半部分和后半部分，这是一个非常巧妙的点，比从头到尾遍历省了一半的时间。<code>(n-1) &gt;&gt; 1</code> 是 <code>(n-1) / 2</code> 的位运算表示，也就是字符串的前半部分的最后一个字符的索引。</li><li>在每次迭代中，计算出与当前索引 <code>j</code> 对称的索引 <code>k</code>，并交换这两个索引位置的字符。</li></ul></li></ol>`,6),N={href:"https://leetcode-cn.com/problems/reverse-integer/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://paicoding.com/column/7/7",target:"_blank",rel:"noopener noreferrer"},G=n("h3",{id:"小结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#小结","aria-hidden":"true"},"#"),a(" 小结")],-1),H=n("p",null,"“我想，关于 StringBuilder、StringBuilder 之间的差别，你都搞清楚了吧？”我问。",-1),P={href:"https://paicoding.com/column/7/6",target:"_blank",rel:"noopener noreferrer"},U=n("p",null,"“哥，你真棒！区别我是搞清楚了，你后面讲的源码扩容还没消化，我一会去加个餐，再细看一下。”三妹说。",-1),X=n("p",null,"“可以的，实际上，你现在只需要知道 StringBuilder 的用法就可以了。”喝了一口右手边的可口可乐（无糖）后，我感觉好爽快啊。",-1),D=n("hr",null,null,-1),F={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},K=n("p",null,[a("微信搜 "),n("strong",null,"沉默王二"),a(" 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 "),n("strong",null,"222"),a(" 即可免费领取。")],-1),Q=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function R(W,Y){const s=o("ExternalLinkIcon");return c(),i("div",null,[r,n("p",null,[a("“哥，"),n("a",u,[a("上一篇深入理解 String.intern()"),e(s)]),a(" 讲到了 StringBuilder，这一节我们就来聊聊吧！”三妹很期待。")]),d,k,n("p",null,[a("由于"),n("a",v,[a("字符串是不可变的"),e(s)]),a("，所以当遇到"),n("a",m,[a("字符串拼接"),e(s)]),a("（尤其是使用"),b,a("号操作符）的时候，就需要考量性能的问题，你不能毫无顾虑地生产太多 String 对象，对珍贵的内存造成不必要的压力。")]),g,n("p",null,[a("不过，由于 StringBuffer 操作字符串的方法加了 "),n("a",h,[y,a(" 关键字"),e(s)]),a("进行了同步，主要是考虑到多线程环境下的安全问题，所以如果在非多线程环境下，执行效率就会比较低，因为加了没必要的锁。")]),n("p",null,[a("于是 Java 就给 StringBuffer “生了个兄弟”，名叫 StringBuilder，说，“孩子，你别管线程安全了，你就在单线程环境下使用，这样效率会高得多，如果要在多线程环境下修改字符串，你到时候可以使用 "),n("a",f,[_,e(s)]),a(" 来避免多线程冲突。”")]),w,n("p",null,[n("a",S,[a("之前我们也曾聊过"),e(s)]),a("，Java 是一门解释型的编程语言，所以当编译器遇到 "),j,a(" 号这个操作符的时候，会将 "),B,a(" 这行代码解释为以下代码：")]),C,n("p",null,[a("当然了，如果我们使用 "),n("a",x,[a("javap"),e(s)]),a(" 反编译 "),L,a(" 的字节码的时候，也是能看出 StringBuilder 的影子的。")]),n("blockquote",null,[n("p",null,[n("a",q,[a("javap 和字节码"),e(s)]),a("会在后面讲 JVM 的时候详细讲解，戳链接了解详情。")])]),A,n("p",null,[a("value 是一个 char 类型的"),n("a",J,[a("数组"),e(s)]),a("：")]),I,n("p",null,[a("随着字符串的拼接，value 数组的长度会不断增加，因此在 StringBuilder 对象的实现中，value 数组的长度是可以"),n("a",M,[a("动态扩展的，就像ArrayList那样"),e(s)]),a("。")]),V,n("blockquote",null,[n("ul",null,[n("li",null,[n("a",z,[a("Arrays"),e(s)]),a(" 是 Java 中用于操作数组的工具类，后面也会讲到。")]),n("li",null,[a("关于扩容，后面在讲"),n("a",O,[a("ArrayList"),e(s)]),a("的时候会再次说明，到时候你可以回头对比来看一下，因为 ArrayList 底部实现也是数组。")])])]),E,n("p",null,[a("LeetCode 的第 7 题《"),n("a",N,[a("007.整数反转"),e(s)]),a("》要求我们反转一个整数，其实就可以借助 StringBuilder 的 reverse 方法来实现。")]),n("blockquote",null,[n("p",null,[a("题解放在了"),n("a",T,[a("技术派"),e(s)]),a("上，可以参考。")])]),G,H,n("p",null,[a("“搞清楚的话，可以通过 LeetCode 的第六题《006.Z 字形变换》进行测试，我把题解放在了"),n("a",P,[a("技术派"),e(s)]),a("上，你可以作为参考。”")]),U,X,D,n("p",null,[a("GitHub 上标星 10000+ 的开源知识库《"),n("a",F,[a("二哥的 Java 进阶之路"),e(s)]),a("》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),n("a",Z,[a("太赞了，GitHub 上标星 10000+ 的 Java 教程"),e(s)])]),K,Q])}const an=p(l,[["render",R],["__file","builder-buffer.html.vue"]]);export{an as default};
