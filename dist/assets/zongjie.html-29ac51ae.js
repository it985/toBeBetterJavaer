const e=JSON.parse('{"key":"v-32ecf2e8","path":"/jvm/zongjie.html","title":"1.2 万字，30 张手绘图，全面总结 JVM 核心知识点","lang":"zh-CN","frontmatter":{"title":"1.2 万字，30 张手绘图，全面总结 JVM 核心知识点","shortTitle":"JVM 核心知识点总结","category":["Java核心"],"tag":["Java虚拟机"],"description":"JVM 核心知识点总结，包括基本概念、Java 内存区域、对象、垃圾收集机制、类加载机制、字节码、JIT、JVM 调优等。","head":[["meta",{"name":"keywords","content":"Java,JavaSE,教程,二哥的Java进阶之路,jvm,Java虚拟机,Java内存模型,Java内存区域,对象,垃圾收集机制,类加载机制,字节码,JIT,JVM调优"}],["meta",{"property":"og:url","content":"https://javabetter.cn/jvm/zongjie.html"}],["meta",{"property":"og:site_name","content":"二哥的Java进阶之路"}],["meta",{"property":"og:title","content":"1.2 万字，30 张手绘图，全面总结 JVM 核心知识点"}],["meta",{"property":"og:description","content":"JVM 核心知识点总结，包括基本概念、Java 内存区域、对象、垃圾收集机制、类加载机制、字节码、JIT、JVM 调优等。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-16T06:07:55.000Z"}],["meta",{"property":"article:author","content":"沉默王二"}],["meta",{"property":"article:tag","content":"Java虚拟机"}],["meta",{"property":"article:modified_time","content":"2024-01-16T06:07:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.2 万字，30 张手绘图，全面总结 JVM 核心知识点\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-16T06:07:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"沉默王二\\",\\"url\\":\\"/about-the-author/\\"}]}"]]},"headers":[{"level":2,"title":"一、基本概念","slug":"一、基本概念","link":"#一、基本概念","children":[{"level":3,"title":"1.1 OpenJDK","slug":"_1-1-openjdk","link":"#_1-1-openjdk","children":[]},{"level":3,"title":"1.2 OracleJDK","slug":"_1-2-oraclejdk","link":"#_1-2-oraclejdk","children":[]},{"level":3,"title":"1.3 HotSpot VM","slug":"_1-3-hotspot-vm","link":"#_1-3-hotspot-vm","children":[]}]},{"level":2,"title":"二、Java 内存区域","slug":"二、java-内存区域","link":"#二、java-内存区域","children":[{"level":3,"title":"2.1 程序计数器","slug":"_2-1-程序计数器","link":"#_2-1-程序计数器","children":[]},{"level":3,"title":"2.2 虚拟机栈","slug":"_2-2-虚拟机栈","link":"#_2-2-虚拟机栈","children":[]},{"level":3,"title":"2.3 本地方法栈","slug":"_2-3-本地方法栈","link":"#_2-3-本地方法栈","children":[]},{"level":3,"title":"2.4 堆","slug":"_2-4-堆","link":"#_2-4-堆","children":[]},{"level":3,"title":"2.5 方法区","slug":"_2-5-方法区","link":"#_2-5-方法区","children":[]}]},{"level":2,"title":"三、对象","slug":"三、对象","link":"#三、对象","children":[{"level":3,"title":"3.1 对象的创建","slug":"_3-1-对象的创建","link":"#_3-1-对象的创建","children":[]},{"level":3,"title":"3.2 对象的内存布局","slug":"_3-2-对象的内存布局","link":"#_3-2-对象的内存布局","children":[]},{"level":3,"title":"3.3 对象的访问定位","slug":"_3-3-对象的访问定位","link":"#_3-3-对象的访问定位","children":[]}]},{"level":2,"title":"四、垃圾收集机制","slug":"四、垃圾收集机制","link":"#四、垃圾收集机制","children":[{"level":3,"title":"1. 引用计数法","slug":"_1-引用计数法","link":"#_1-引用计数法","children":[]},{"level":3,"title":"2. 可达性分析","slug":"_2-可达性分析","link":"#_2-可达性分析","children":[]},{"level":3,"title":"3. 对象引用","slug":"_3-对象引用","link":"#_3-对象引用","children":[]},{"level":3,"title":"4. 对象真正死亡","slug":"_4-对象真正死亡","link":"#_4-对象真正死亡","children":[]},{"level":3,"title":"4.3 垃圾收集算法","slug":"_4-3-垃圾收集算法","link":"#_4-3-垃圾收集算法","children":[]}]},{"level":2,"title":"五、垃圾收集器","slug":"五、垃圾收集器","link":"#五、垃圾收集器","children":[{"level":3,"title":"5.1 Serial 收集器","slug":"_5-1-serial-收集器","link":"#_5-1-serial-收集器","children":[]},{"level":3,"title":"5.2 ParNew 收集器","slug":"_5-2-parnew-收集器","link":"#_5-2-parnew-收集器","children":[]},{"level":3,"title":"5.3 Parallel Scavenge 收集器","slug":"_5-3-parallel-scavenge-收集器","link":"#_5-3-parallel-scavenge-收集器","children":[]},{"level":3,"title":"5.4 Serial Old 收集器","slug":"_5-4-serial-old-收集器","link":"#_5-4-serial-old-收集器","children":[]},{"level":3,"title":"5.5 Paralled Old 收集器","slug":"_5-5-paralled-old-收集器","link":"#_5-5-paralled-old-收集器","children":[]},{"level":3,"title":"5.6 CMS 收集器","slug":"_5-6-cms-收集器","link":"#_5-6-cms-收集器","children":[]},{"level":3,"title":"5.7 Garbage First 收集器","slug":"_5-7-garbage-first-收集器","link":"#_5-7-garbage-first-收集器","children":[]},{"level":3,"title":"5.8 内存分配原则","slug":"_5-8-内存分配原则","link":"#_5-8-内存分配原则","children":[]}]},{"level":2,"title":"六、类加载机制","slug":"六、类加载机制","link":"#六、类加载机制","children":[{"level":3,"title":"6.1 类加载时机","slug":"_6-1-类加载时机","link":"#_6-1-类加载时机","children":[]},{"level":3,"title":"6.2 类加载过程","slug":"_6-2-类加载过程","link":"#_6-2-类加载过程","children":[]},{"level":3,"title":"6.3 类加载器","slug":"_6-3-类加载器","link":"#_6-3-类加载器","children":[]},{"level":3,"title":"6.4 双亲委派模型","slug":"_6-4-双亲委派模型","link":"#_6-4-双亲委派模型","children":[]},{"level":3,"title":"6.5 模块化下的类加载器","slug":"_6-5-模块化下的类加载器","link":"#_6-5-模块化下的类加载器","children":[]}]},{"level":2,"title":"七、程序编译","slug":"七、程序编译","link":"#七、程序编译","children":[{"level":3,"title":"7.1 编译器分类","slug":"_7-1-编译器分类","link":"#_7-1-编译器分类","children":[]},{"level":3,"title":"7.2 解释器与编译器","slug":"_7-2-解释器与编译器","link":"#_7-2-解释器与编译器","children":[]},{"level":3,"title":"7.3 分层编译","slug":"_7-3-分层编译","link":"#_7-3-分层编译","children":[]},{"level":3,"title":"7.4 热点探测","slug":"_7-4-热点探测","link":"#_7-4-热点探测","children":[]}]},{"level":2,"title":"八、代码优化","slug":"八、代码优化","link":"#八、代码优化","children":[{"level":3,"title":"8.1 方法内联","slug":"_8-1-方法内联","link":"#_8-1-方法内联","children":[]},{"level":3,"title":"8.2 逃逸分析","slug":"_8-2-逃逸分析","link":"#_8-2-逃逸分析","children":[]},{"level":3,"title":"8.3 公共子表达式消除","slug":"_8-3-公共子表达式消除","link":"#_8-3-公共子表达式消除","children":[]},{"level":3,"title":"8.4 数组边界检查消除","slug":"_8-4-数组边界检查消除","link":"#_8-4-数组边界检查消除","children":[]}]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1648354033000,"updatedTime":1705385275000,"contributors":[{"name":"itwanger","email":"www.qing_gee@163.com","commits":16},{"name":"沉默王二","email":"www.qing_gee@163.com","commits":6}]},"readingTime":{"minutes":47.06,"words":14119},"filePathRelative":"jvm/zongjie.md","localizedDate":"2022年3月27日","excerpt":"<h1> 第十九节：JVM 核心知识点总结</h1>\\n<h2> 一、基本概念</h2>\\n<h3> 1.1 OpenJDK</h3>\\n<p>自 1996 年 <code>JDK 1.0</code> 发布以来，Sun 公司在大版本上发行了 <code>JDK 1.1</code>、<code>JDK 1.2</code>、<code>JDK 1.3</code>、<code>JDK 1.4</code>、<code>JDK 5</code>，<code>JDK 6</code> ，这些版本的 JDK 都可以统称为 SunJDK 。</p>\\n<p>之后在 2006 年的 JavaOne 大会上，Sun 公司宣布将 Java 开源，在随后的一年多里，它陆续将 JDK 的各个部分在 GPL v2（GNU General Public License，version 2）协议下开源，并建立了 OpenJDK 组织来对这些代码进行独立的管理，这就是 OpenJDK 的来源，此时的 OpenJDK 拥有当时 sunJDK 7 的几乎全部代码。</p>"}');export{e as data};
