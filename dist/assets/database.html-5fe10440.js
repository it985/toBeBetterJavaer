import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,d as s,b as t,e}from"./app-72970f25.js";const l={},u=n("h1",{id:"mysql-的数据库操作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mysql-的数据库操作","aria-hidden":"true"},"#"),s(" MySQL 的数据库操作")],-1),r={href:"https://javabetter.cn/mysql/install.html",target:"_blank",rel:"noopener noreferrer"},d=e('<p>执行 <code>show databases;</code> 命令可以查看当前数据库的所有数据库。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/database-20240125185015.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注意在 MySQL 客户端执行 SQL 语句的时候要带上分号 <code>;</code> 并按下 enter 键，不然 MySQL 会认为你还没有输入完，会换一行继续等待你输入。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/database-20240125185214.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>也就是说，分号 <code>;</code> 是 MySQL 的语句结束符。</p><p>OK，像上面截图中的 information_schema、mysql、performance_schema、sys 这些都是 MySQL 自带的数据库，剩余的 cmower、codingmore、jeesite、jepf、pai_coding 等都是我本地创建的数据库，这些数据库名大家很容易就联系到某些有点名气的开源项目，比如说技术派。</p>',6),k={href:"https://javabetter.cn/mysql/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://javabetter.cn/zhishixingqiu/paicoding.html",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"上面截图中的 pai_coding 就是技术派项目的数据库。对技术派项目还不太了解的小伙伴可以戳下面的链接了解：",-1),b={href:"https://javabetter.cn/zhishixingqiu/paicoding.html",target:"_blank",rel:"noopener noreferrer"},g=e(`<h2 id="创建数据库" tabindex="-1"><a class="header-anchor" href="#创建数据库" aria-hidden="true">#</a> 创建数据库</h2><p>创建数据库的语法是：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">database</span> 数据库名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如说我要创建一个名为 <code>test</code> 的数据库，就可以执行：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">database</span> test<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果提示 <code>Query OK, 1 row affected (0.02 sec)</code>，说明数据库创建成功了。</p><p>再用 <code>show databases;</code> 命令查看一下，就可以看到 <code>test</code> 数据库了。</p><blockquote><p>一个小技巧：MySQL 会记忆之前输入过的命令，使用键盘上的上下箭头按键可以切换命令。</p></blockquote><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/database-20240125190817.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通常情况下，我们在创建数据库的时候会额外加上 <code>if not exists</code>，否则当数据库已经存在的时候，会报 <code>database exists</code> 的错误。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">database</span> test<span class="token punctuation">;</span>
ERROR <span class="token number">1007</span> <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: Can<span class="token string">&#39;t create database &#39;</span>test&#39;<span class="token punctuation">;</span> <span class="token keyword">database</span> <span class="token keyword">exists</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以这样写：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> test<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected<span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，SQL 语句执行成功了，但会有一个 warning 警告，这是因为数据库已经存在了，所以 MySQL 会提示我们。</p><h2 id="切换数据库" tabindex="-1"><a class="header-anchor" href="#切换数据库" aria-hidden="true">#</a> 切换数据库</h2><p>切换数据库的语法是：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">use</span> 数据库名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如说我们要切换到技术派的 <code>pai_coding</code> 数据库，就可以执行：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">use</span> pai_coding<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果提示 <code>Database changed</code>，说明切换成功了。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/database-20240126160536.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>只有切换到技术派数据库下，我们才能对技术派数据库下面的表进行操作。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/database-20240126161020.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="删除数据库" tabindex="-1"><a class="header-anchor" href="#删除数据库" aria-hidden="true">#</a> 删除数据库</h2><p>删除数据库的语法是：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">database</span> 数据库名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如说我们要删除 <code>test</code> 数据库，就可以执行：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">database</span> test<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>是不是很简单？</p><p>但删库跑路之前，最好掐一下自己的大腿，看看自己是不是清醒着，不然后悔都来不及（😂）。</p><p>删除数据库的时候，也可以带上 <code>if exists</code>，这样当数据库不存在的时候，就不会报错了。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> test<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="技术派是如何创建数据库的" tabindex="-1"><a class="header-anchor" href="#技术派是如何创建数据库的" aria-hidden="true">#</a> 技术派是如何创建数据库的？</h2><p>技术派创建数据库是自动完成的，当项目启动的时候就会自动创建数据库。</p><p>具体实现的方法我放在了技术派的教程里，大家可以通过这个链接获取技术派实战教程。</p>`,35),h={href:"https://javabetter.cn/zhishixingqiu/paicoding.html",target:"_blank",rel:"noopener noreferrer"},f=e(`<figure><img src="https://cdn.tobebetterjavaer.com/stutymore/database-20240126170719.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里我做一些简单的介绍，实现源码在 ForumDataSourceInitializer 这个类中。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/database-20240126170743.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注意看 autoInitDatabase 方法，这里是自动创建数据库的逻辑。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">autoInitDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 查询失败，可能是数据库不存在，尝试创建数据库之后再次测试</span>

    <span class="token comment">// 数据库链接</span>
    <span class="token class-name">URI</span> url <span class="token operator">=</span> <span class="token constant">URI</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">SpringUtil</span><span class="token punctuation">.</span><span class="token function">getConfigOrElse</span><span class="token punctuation">(</span><span class="token string">&quot;spring.datasource.url&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;spring.dynamic.datasource.master.url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 用户名</span>
    <span class="token class-name">String</span> uname <span class="token operator">=</span> <span class="token class-name">SpringUtil</span><span class="token punctuation">.</span><span class="token function">getConfigOrElse</span><span class="token punctuation">(</span><span class="token string">&quot;spring.datasource.username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;spring.dynamic.datasource.master.username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 密码</span>
    <span class="token class-name">String</span> pwd <span class="token operator">=</span> <span class="token class-name">SpringUtil</span><span class="token punctuation">.</span><span class="token function">getConfigOrElse</span><span class="token punctuation">(</span><span class="token string">&quot;spring.datasource.password&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;spring.dynamic.datasource.master.password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建连接</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://&quot;</span> <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
            <span class="token string">&quot;?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&quot;</span><span class="token punctuation">,</span> uname<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Statement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 查询数据库是否存在</span>
        <span class="token class-name">ResultSet</span> set <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">&quot;select schema_name from information_schema.schemata where schema_name = &#39;&quot;</span> <span class="token operator">+</span> database <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 不存在时，创建数据库</span>
            <span class="token class-name">String</span> createDb <span class="token operator">=</span> <span class="token string">&quot;CREATE DATABASE IF NOT EXISTS &quot;</span> <span class="token operator">+</span> database<span class="token punctuation">;</span>
            connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            statement<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>createDb<span class="token punctuation">)</span><span class="token punctuation">;</span>
            connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;创建数据库（{}）成功&quot;</span><span class="token punctuation">,</span> database<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                set<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        set<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;数据库已存在，无需初始化&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>逻辑很简单，就是根据 URL、用户名、密码创建数据库连接，客户端到服务端的连接，然后从 <code>information_schema.schemata</code> 表中查询数据库是否存在，如果不存在，就创建数据库。</p><p>用的是最原始的 JDBC 方式，以及一些 Spring 方面的知识，这里就不展开了。大家看代码注释应该是能懂的。</p><p>information_schema 是 MySQL 的元数据信息，数据库的信息会存放在 schemata 表中。我们可以通过终端查看到 schemata 表的结构。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/database-20240126171959.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里给大家留一个作业题，如果你之前学过 Java 或者 Spring Boot 的话，可以仿照技术派的方式实现一个自动创建数据库的功能。</p><h3 id="java-原生" tabindex="-1"><a class="header-anchor" href="#java-原生" aria-hidden="true">#</a> Java 原生</h3><p>Java 原生代码需要你先下载一个 MySQL 的 JDBC 驱动，驱动的作用是让 Java 程序能够和 MySQL 数据库进行交互。</p>`,12),y={href:"https://dev.mysql.com/downloads/connector/j/",target:"_blank",rel:"noopener noreferrer"},S=e(`<figure><img src="https://cdn.tobebetterjavaer.com/stutymore/database-20240126174913.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>将下载的 <code>.jar</code> 包放到项目 classpath 下，什么是 classpath，一般就是项目的 <code>src/main/resources</code> 目录，或者是项目的 <code>lib</code> 目录。</p><p>接下来，编写一个 Java 类来连接到 MySQL 服务器，并在数据库不存在时创建它：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">DatabaseCreator</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">URL</span> <span class="token operator">=</span> <span class="token string">&quot;jdbc:mysql://localhost:3306/?useSSL=false&amp;serverTimezone=UTC&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">USER</span> <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PASSWORD</span> <span class="token operator">=</span> <span class="token string">&quot;Codingmore123&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DATABASE_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;pai_coding&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">,</span> <span class="token constant">USER</span><span class="token punctuation">,</span> <span class="token constant">PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">databaseExists</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token constant">DATABASE_NAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                stmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">&quot;CREATE DATABASE IF NOT EXISTS &quot;</span> <span class="token operator">+</span> <span class="token constant">DATABASE_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数据库创建成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数据库已经存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">databaseExists</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> conn<span class="token punctuation">,</span> <span class="token class-name">String</span> dbName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCatalogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>dbName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里简单解释一下大家可能比较陌生的代码：</p><p>先说 main 方法：</p><p>①、<code>DriverManager.getConnection(URL, USER, PASSWORD)</code>：通过 JDBC 建立到 MySQL 服务器的连接。</p><p>②、<code>conn.createStatement()</code>：创建一个 Statement 对象来执行 SQL 命令。</p><p>③、<code>stmt.executeUpdate(&quot;CREATE DATABASE IF NOT EXISTS &quot; + DATABASE_NAME)</code>：执行 SQL 命令，创建数据库。这就和我们本篇的主题串起来了，哈哈😆。</p><p>再说 databaseExists 方法：</p><p>①、使用 Connection 对象的 <code>getMetaData()</code> 方法可以获取数据库的元数据。这个元数据包含了服务器上所有数据库的信息。</p><p>②、<code>getCatalogs()</code> 方法可以获取服务器上所有数据库的列表，返回的 ResultSet 对象包含了服务器上每个数据库的名称。</p><p>③、<code>resultSet.getString(1)</code> 方法可以获取当前行第一列的值，也就是数据库的名称。</p><h3 id="spring-boot" tabindex="-1"><a class="header-anchor" href="#spring-boot" aria-hidden="true">#</a> Spring Boot</h3><p>Spring Boot 项目的话，就比较省事了，不用去下载驱动，直接在 pom.xml 文件中添加 MySQL 的驱动依赖就可以了。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着在 application.yml 配置文件中，设置数据库的基本连接信息。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/<span class="token punctuation">?</span>useSSL=false<span class="token important">&amp;serverTimezone=UTC</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 Spring Boot 的测试类中进行数据库创建操作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">QuickForumApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseCreationTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createDatabaseTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> dbName <span class="token operator">=</span> <span class="token string">&quot;pai_coding&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">databaseExists</span><span class="token punctuation">(</span>dbName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            jdbcTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">&quot;CREATE DATABASE IF NOT EXISTS &quot;</span> <span class="token operator">+</span> dbName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;创建成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;已存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">databaseExists</span><span class="token punctuation">(</span><span class="token class-name">String</span> dbName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token class-name">Statement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ResultSet</span> set <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">&quot;select schema_name from information_schema.schemata where schema_name = &#39;&quot;</span> <span class="token operator">+</span> dbName <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> set<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里也简单解释一下大家可能比较陌生的代码：</p>`,21),_=n("code",null,"@Slf4j",-1),w={href:"https://javabetter.cn/springboot/lombok.html",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"@SpringBootTest(classes = QuickForumApplication.class)",-1),x={href:"https://javabetter.cn/zhishixingqiu/paicoding.html",target:"_blank",rel:"noopener noreferrer"},E=n("p",null,[s("③、"),n("code",null,"@RunWith(SpringJUnit4ClassRunner.class)"),s("：使用 JUnit4 来支持 Spring 上下文测试。")],-1),j=n("p",null,[s("④、"),n("code",null,"@Autowired"),s("：自动注入 DataSource 和 JdbcTemplate 对象。")],-1),A=n("p",null,"大家可以尝试下，看看能不能成功。",-1),L={href:"https://javabetter.cn/springboot/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/itwanger/paicoding/blob/main/paicoding-web/src/test/java/com/github/paicoding/forum/test/mysql1/DatabaseCreationTest.java",target:"_blank",rel:"noopener noreferrer"},C=n("h2",{id:"小结",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#小结","aria-hidden":"true"},"#"),s(" 小结")],-1),Q=n("p",null,"本篇我们主要讲解了 MySQL 数据库的基本操作，包括创建数据库、切换数据库、删除数据库。",-1),D=n("p",null,"并结合技术派实战项目来讲解了技术派是如何自动创建数据库的。以及如何通过 Java 原生代码和 Spring Boot 项目来创建数据库。",-1),M=n("p",null,"希望大家动动手，练习一下，实战和理论真正的结合起来，冲鸭😁。",-1),R=n("hr",null,null,-1),B={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},J={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},I=n("p",null,[s("微信搜 "),n("strong",null,"沉默王二"),s(" 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 "),n("strong",null,"222"),s(" 即可免费领取。")],-1),U=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function N(z,O){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[n("a",r,[s("MySQL 安装完成并连接"),t(a)]),s("成功后，就可以创建数据库进行操作了。")]),d,n("p",null,[n("a",k,[s("二哥的 MySQL 进阶之路"),t(a)]),s("会结合"),n("a",m,[s("技术派实战项目"),t(a)]),s("来讲解 MySQL 的基本操作。")]),v,n("p",null,[n("a",b,[s("二哥的原创实战项目技术派详细介绍"),t(a)])]),g,n("p",null,[n("a",h,[s("二哥的原创实战项目技术派详细介绍"),t(a)])]),f,n("p",null,[n("a",y,[s("MySQL Connector/J"),t(a)])]),S,n("p",null,[s("①、"),_,s("："),n("a",w,[s("Lombok 库"),t(a)]),s("提供的注解，用于自动创建日志对象（比如 Logger）。")]),n("p",null,[s("②、"),q,s("：表示这是一个 Spring Boot 的集成测试类，它会加载"),n("a",x,[s("技术派项目"),t(a)]),s(" QuickForumApplication 类指定的 Spring Boot 应用程序上下文。")]),E,j,A,n("p",null,[s("关于 Spring Boot 的更多知识，可以参考："),n("a",L,[s("Spring Boot 进阶之路"),t(a)])]),n("p",null,[s("源码："),n("a",T,[s("DatabaseCreationTest"),t(a)])]),C,Q,D,M,R,n("p",null,[s("GitHub 上标星 10000+ 的开源知识库《"),n("a",B,[s("二哥的 Java 进阶之路"),t(a)]),s("》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),n("a",J,[s("太赞了，GitHub 上标星 10000+ 的 Java 教程"),t(a)])]),I,U])}const V=p(l,[["render",N],["__file","database.html.vue"]]);export{V as default};
