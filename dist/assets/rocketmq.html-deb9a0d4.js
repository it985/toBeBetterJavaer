import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as s,c as l,a as e,d as r,b as i,e as t}from"./app-72970f25.js";const c={},d={href:"https://mp.weixin.qq.com/s/N6wq52pBGh8xkS-5uRcO2g",target:"_blank",rel:"noopener noreferrer"},u={href:"https://mp.weixin.qq.com/s/IvBt3tB_IWZgPjKv5WGS4A",target:"_blank",rel:"noopener noreferrer"},p=t('<h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h2><h3 id="_1-为什么要使用消息队列呢" tabindex="-1"><a class="header-anchor" href="#_1-为什么要使用消息队列呢" aria-hidden="true">#</a> 1.为什么要使用消息队列呢？</h3><p>消息队列（Message Queue, MQ）是一种非常重要的中间件技术，广泛应用于分布式系统中，以提高系统的可用性、解耦能力和异步通信效率。</p><p>①、<strong>解耦</strong></p><p>生产者将消息放入队列，消费者从队列中取出消息，这样一来，生产者和消费者之间就不需要直接通信，生产者只管生产消息，消费者只管消费消息，这样就实现了解耦。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-dd332b3f-d5e5-41bc-813a-9f612e582255.jpg" alt="三分恶面渣逆袭：消息队列解耦" tabindex="0" loading="lazy"><figcaption>三分恶面渣逆袭：消息队列解耦</figcaption></figure><p>②、<strong>异步</strong>：</p><p>系统可以将那些耗时的任务放在消息队列中异步处理，从而快速响应用户的请求。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-40d8f782-08cf-48c4-98b2-cb125d287e93.jpg" alt="三分恶面渣逆袭：消息队列异步" tabindex="0" loading="lazy"><figcaption>三分恶面渣逆袭：消息队列异步</figcaption></figure><p>③、<strong>削峰</strong>：</p><p>削峰填谷是一种常见的技术手段，用于应对系统高并发请求的瞬时流量高峰，通过消息队列，可以将瞬时的高峰流量转化为持续的低流量，从而保护系统不会因为瞬时的高流量而崩溃。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-f028cb0c-b1a3-47ef-b290-f7d6f46512fb.jpg" alt="三分恶面渣逆袭：消息队列削峰" tabindex="0" loading="lazy"><figcaption>三分恶面渣逆袭：消息队列削峰</figcaption></figure><h4 id="如何用rocketmq做削峰填谷的" tabindex="-1"><a class="header-anchor" href="#如何用rocketmq做削峰填谷的" aria-hidden="true">#</a> 如何用RocketMQ做削峰填谷的？</h4><p>用户请求到达系统后，由生产者接收请求并将其转化为消息，发送到 RocketMQ 队列中。队列用来充当缓冲区，将大量请求按照顺序排队，这样就可以削减请求高峰时对后端服务的直接压力。</p><p>不仅如此，生产者通过异步方式发送消息，还可以快速响应用户请求。</p><p>消费者从 RocketMQ 队列中按照一定速率读取消息并进行处理。可以根据后端处理能力和当前负载情况动态调整消费者的消费速率，达到填谷的效果。</p>',16),g={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},b=t('<h3 id="_2-为什么要选择-rocketmq" tabindex="-1"><a class="header-anchor" href="#_2-为什么要选择-rocketmq" aria-hidden="true">#</a> 2.为什么要选择 RocketMQ?</h3><p>市场上几大消息队列对比如下：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-c3493e70-67c7-4f0d-bb99-f0fe8074c807.jpg" alt="四大消息队列对比" tabindex="0" loading="lazy"><figcaption>四大消息队列对比</figcaption></figure><p><strong>总结一下</strong>：</p><p>选择中间件的可以从这些维度来考虑：可靠性，性能，功能，可运维行，可拓展性，社区活跃度。目前常用的几个中间件，ActiveMQ 作为“老古董”，市面上用的已经不多，其它几种：</p><ul><li><p>RabbitMQ：</p></li><li><p>优点：轻量，迅捷，容易部署和使用，拥有灵活的路由配置</p></li><li><p>缺点：性能和吞吐量不太理想，不易进行二次开发</p></li><li><p>RocketMQ：</p></li><li><p>优点：性能好，高吞吐量，稳定可靠，有活跃的中文社区</p></li><li><p>缺点：兼容性上不是太好</p></li><li><p>Kafka：</p></li><li><p>优点：拥有强大的性能及吞吐量，兼容性很好</p></li><li><p>缺点：由于“攒一波再处理”导致延迟比较高</p></li></ul><p>我们的系统是面向用户的 C 端系统，具有一定的并发量，对性能也有比较高的要求，所以选择了低延迟、吞吐量比较高，可用性比较好的 RocketMQ。</p><h3 id="_3-rocketmq-有什么优缺点" tabindex="-1"><a class="header-anchor" href="#_3-rocketmq-有什么优缺点" aria-hidden="true">#</a> 3.RocketMQ 有什么优缺点？</h3><p>RocketMQ 优点：</p><ul><li>单机吞吐量：十万级</li><li>可用性：非常高，分布式架构</li><li>消息可靠性：经过参数优化配置，消息可以做到 0 丢失</li><li>功能支持：MQ 功能较为完善，还是分布式的，扩展性好</li><li>支持 10 亿级别的消息堆积，不会因为堆积导致性能下降</li><li>源码是 Java，方便结合公司自己的业务二次开发</li><li>天生为金融互联网领域而生，对于可靠性要求很高的场景，尤其是电商里面的订单扣款，以及业务削峰，在大量交易涌入时，后端可能无法及时处理的情况</li><li><strong>RoketMQ</strong>在稳定性上可能更值得信赖，这些业务场景在阿里双 11 已经经历了多次考验，如果你的业务有上述并发场景，建议可以选择<strong>RocketMQ</strong></li></ul><p>RocketMQ 缺点：</p><ul><li>支持的客户端语言不多，目前是 Java 及 c++，其中 c++不成熟</li><li>没有在 MQ 核心中去实现<strong>JMS</strong>等接口，有些系统要迁移需要修改大量代码</li></ul><h3 id="_4-消息队列有哪些消息模型" tabindex="-1"><a class="header-anchor" href="#_4-消息队列有哪些消息模型" aria-hidden="true">#</a> 4.消息队列有哪些消息模型？</h3><p>消息队列有两种模型：<strong>队列模型</strong>和<strong>发布/订阅模型</strong>。</p><ul><li><strong>队列模型</strong></li></ul><p>这是最初的一种消息队列模型，对应着消息队列“发-存-收”的模型。生产者往某个队列里面发送消息，一个队列可以存储多个生产者的消息，一个队列也可以有多个消费者，但是消费者之间是竞争关系，也就是说每条消息只能被一个消费者消费。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-d94a9bf9-3fed-40a6-8aef-0d0395b6e409.jpg" alt="队列模型" tabindex="0" loading="lazy"><figcaption>队列模型</figcaption></figure><ul><li><strong>发布/订阅模型</strong></li></ul><p>如果需要将一份消息数据分发给多个消费者，并且每个消费者都要求收到全量的消息。很显然，队列模型无法满足这个需求。解决的方式就是发布/订阅模型。</p><p>在发布 - 订阅模型中，消息的发送方称为发布者（Publisher），消息的接收方称为订阅者（Subscriber），服务端存放消息的容器称为主题（Topic）。发布者将消息发送到主题中，订阅者在接收消息之前需要先“订阅主题”。“订阅”在这里既是一个动作，同时还可以认为是主题在消费时的一个逻辑副本，每份订阅中，订阅者都可以接收到主题的所有消息。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-692ec6a0-8499-4de2-be17-a577996bdaef.jpg" alt="发布-订阅模型" tabindex="0" loading="lazy"><figcaption>发布-订阅模型</figcaption></figure><p>它和 “队列模式” 的异同：生产者就是发布者，队列就是主题，消费者就是订阅者，无本质区别。唯一的不同点在于：一份消息数据是否可以被多次消费。</p><h3 id="_5-那-rocketmq-的消息模型呢" tabindex="-1"><a class="header-anchor" href="#_5-那-rocketmq-的消息模型呢" aria-hidden="true">#</a> 5.那 RocketMQ 的消息模型呢？</h3><p>RocketMQ 使用的消息模型是标准的发布-订阅模型，在 RocketMQ 的术语表中，生产者、消费者和主题，与发布-订阅模型中的概念是完全一样的。</p><p>RocketMQ 本身的消息是由下面几部分组成：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-4ab7f942-23d7-4462-8e36-e305cc0a045f.jpg" alt="RocketMQ消息的组成" tabindex="0" loading="lazy"><figcaption>RocketMQ消息的组成</figcaption></figure><ul><li><strong>Message</strong></li></ul><p><strong>Message</strong>（消息）就是要传输的信息。</p><p>一条消息必须有一个主题（Topic），主题可以看做是你的信件要邮寄的地址。</p><p>一条消息也可以拥有一个可选的标签（Tag）和额处的键值对，它们可以用于设置一个业务 Key 并在 Broker 上查找此消息以便在开发期间查找问题。</p><ul><li><strong>Topic</strong></li></ul><p><strong>Topic</strong>（主题）可以看做消息的归类，它是消息的第一级类型。比如一个电商系统可以分为：交易消息、物流消息等，一条消息必须有一个 Topic 。</p><p><strong>Topic</strong> 与生产者和消费者的关系非常松散，一个 Topic 可以有 0 个、1 个、多个生产者向其发送消息，一个生产者也可以同时向不同的 Topic 发送消息。</p><p>一个 Topic 也可以被 0 个、1 个、多个消费者订阅。</p><ul><li><strong>Tag</strong></li></ul><p><strong>Tag</strong>（标签）可以看作子主题，它是消息的第二级类型，用于为用户提供额外的灵活性。使用标签，同一业务模块不同目的的消息就可以用相同 Topic 而不同的 <strong>Tag</strong> 来标识。比如交易消息又可以分为：交易创建消息、交易完成消息等，一条消息可以没有 <strong>Tag</strong> 。</p><p>标签有助于保持你的代码干净和连贯，并且还可以为 <strong>RocketMQ</strong> 提供的查询系统提供帮助。</p><ul><li><strong>Group</strong></li></ul><p>RocketMQ 中，订阅者的概念是通过消费组（Consumer Group）来体现的。每个消费组都消费主题中一份完整的消息，不同消费组之间消费进度彼此不受影响，也就是说，一条消息被 Consumer Group1 消费过，也会再给 Consumer Group2 消费。</p><p>消费组中包含多个消费者，同一个组内的消费者是竞争消费的关系，每个消费者负责消费组内的一部分消息。默认情况，如果一条消息被消费者 Consumer1 消费了，那同组的其他消费者就不会再收到这条消息。</p><ul><li><strong>Message Queue</strong></li></ul><p><strong>Message Queue</strong>（消息队列），一个 Topic 下可以设置多个消息队列，Topic 包括多个 Message Queue ，如果一个 Consumer 需要获取 Topic 下所有的消息，就要遍历所有的 Message Queue。</p><p>RocketMQ 还有一些其它的 Queue——例如 ConsumerQueue。</p><ul><li><strong>Offset</strong></li></ul><p>在 Topic 的消费过程中，由于消息需要被不同的组进行多次消费，所以消费完的消息并不会立即被删除，这就需要 RocketMQ 为每个消费组在每个队列上维护一个消费位置（Consumer Offset），这个位置之前的消息都被消费过，之后的消息都没有被消费过，每成功消费一条消息，消费位置就加一。</p><p>也可以这么说，<code>Queue</code> 是一个长度无限的数组，<strong>Offset</strong> 就是下标。</p><p>RocketMQ 的消息模型中，这些就是比较关键的概念了。画张图总结一下：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-e470b972-f4ac-4b76-bcde-0df5d4765ca7.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_6-消息的消费模式了解吗" tabindex="-1"><a class="header-anchor" href="#_6-消息的消费模式了解吗" aria-hidden="true">#</a> 6.消息的消费模式了解吗？</h3><p>消息消费模式有两种：<strong>Clustering</strong>（集群消费）和<strong>Broadcasting</strong>（广播消费）。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-2c574635-1eaa-4bdd-8aa8-1bdc3f10b274.jpg" alt="两种消费模式" tabindex="0" loading="lazy"><figcaption>两种消费模式</figcaption></figure><p>默认情况下就是集群消费，这种模式下<code>一个消费者组共同消费一个主题的多个队列，一个队列只会被一个消费者消费</code>，如果某个消费者挂掉，分组内其它消费者会接替挂掉的消费者继续消费。</p><p>而广播消费消息会发给消费者组中的每一个消费者进行消费。</p><h3 id="_7-roctetmq-基本架构了解吗" tabindex="-1"><a class="header-anchor" href="#_7-roctetmq-基本架构了解吗" aria-hidden="true">#</a> 7.RoctetMQ 基本架构了解吗？</h3><p>先看图，RocketMQ 的基本架构：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-d4c0e036-0f0e-466f-bd4b-7e6ee10daca4.jpg" alt="RocketMQ架构" tabindex="0" loading="lazy"><figcaption>RocketMQ架构</figcaption></figure><p>RocketMQ 一共有四个部分组成：NameServer，Broker，Producer 生产者，Consumer 消费者，它们对应了：发现、发、存、收，为了保证高可用，一般每一部分都是集群部署的。</p><h3 id="_8-那能介绍一下这四部分吗" tabindex="-1"><a class="header-anchor" href="#_8-那能介绍一下这四部分吗" aria-hidden="true">#</a> 8.那能介绍一下这四部分吗？</h3><p>类比一下我们生活的邮政系统——</p><p>邮政系统要正常运行，离不开下面这四个角色， 一是发信者，二 是收信者， 三是负责暂存传输的邮局， 四是负责协调各个地方邮局的管理机构。对应到 RocketMQ 中，这四个角色就是 Producer、 Consumer、 Broker 、NameServer。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-00175355-5532-4ee6-a48c-e3e3a9b87d64.jpg" alt="RocketMQ类比邮政体系" tabindex="0" loading="lazy"><figcaption>RocketMQ类比邮政体系</figcaption></figure><h5 id="nameserver" tabindex="-1"><a class="header-anchor" href="#nameserver" aria-hidden="true">#</a> NameServer</h5><p>NameServer 是一个无状态的服务器，角色类似于 Kafka 使用的 Zookeeper，但比 Zookeeper 更轻量。</p><p>特点：</p><ul><li>每个 NameServer 结点之间是相互独立，彼此没有任何信息交互。</li><li>Nameserver 被设计成几乎是无状态的，通过部署多个结点来标识自己是一个伪集群，Producer 在发送消息前从 NameServer 中获取 Topic 的路由信息也就是发往哪个 Broker，Consumer 也会定时从 NameServer 获取 Topic 的路由信息，Broker 在启动时会向 NameServer 注册，并定时进行心跳连接，且定时同步维护的 Topic 到 NameServer。</li></ul><p>功能主要有两个：</p><ul><li>1、和 Broker 结点保持长连接。</li><li>2、维护 Topic 的路由信息。</li></ul><h5 id="broker" tabindex="-1"><a class="header-anchor" href="#broker" aria-hidden="true">#</a> Broker</h5><p>消息存储和中转角色，负责存储和转发消息。</p><ul><li>Broker 内部维护着一个个 Consumer Queue，用来存储消息的索引，真正存储消息的地方是 CommitLog（日志文件）。</li></ul><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-789379a9-4a0c-4992-9de1-e49283d089a4.jpg" alt="RocketMQ存储-图片来源官网" tabindex="0" loading="lazy"><figcaption>RocketMQ存储-图片来源官网</figcaption></figure><ul><li>单个 Broker 与所有的 Nameserver 保持着长连接和心跳，并会定时将 Topic 信息同步到 NameServer，和 NameServer 的通信底层是通过 Netty 实现的。</li></ul><h5 id="producer" tabindex="-1"><a class="header-anchor" href="#producer" aria-hidden="true">#</a> Producer</h5><p>消息生产者，业务端负责发送消息，由用户自行实现和分布式部署。</p><ul><li><p><strong>Producer</strong>由用户进行分布式部署，消息由<strong>Producer</strong>通过多种负载均衡模式发送到<strong>Broker</strong>集群，发送低延时，支持快速失败。</p></li><li><p><strong>RocketMQ</strong> 提供了三种方式发送消息：同步、异步和单向</p></li><li><p><strong>同步发送</strong>：同步发送指消息发送方发出数据后会在收到接收方发回响应之后才发下一个数据包。一般用于重要通知消息，例如重要通知邮件、营销短信。</p></li><li><p><strong>异步发送</strong>：异步发送指发送方发出数据后，不等接收方发回响应，接着发送下个数据包，一般用于可能链路耗时较长而对响应时间敏感的业务场景，例如用户视频上传后通知启动转码服务。</p></li><li><p><strong>单向发送</strong>：单向发送是指只负责发送消息而不等待服务器回应且没有回调函数触发，适用于某些耗时非常短但对可靠性要求并不高的场景，例如日志收集。</p></li></ul><h5 id="consumer" tabindex="-1"><a class="header-anchor" href="#consumer" aria-hidden="true">#</a> Consumer</h5><p>消息消费者，负责消费消息，一般是后台系统负责异步消费。</p><ul><li><strong>Consumer</strong>也由用户部署，支持 PUSH 和 PULL 两种消费模式，支持<strong>集群消费</strong>和<strong>广播消费</strong>，提供<strong>实时的消息订阅机制</strong>。</li><li><strong>Pull</strong>：拉取型消费者（Pull Consumer）主动从消息服务器拉取信息，只要批量拉取到消息，用户应用就会启动消费过程，所以 Pull 称为主动消费型。</li><li><strong>Push</strong>：推送型消费者（Push Consumer）封装了消息的拉取、消费进度和其他的内部维护工作，将消息到达时执行的回调接口留给用户应用程序来实现。所以 Push 称为被动消费类型，但其实从实现上看还是从消息服务器中拉取消息，不同于 Pull 的是 Push 首先要注册消费监听器，当监听器处触发后才开始消费消息。</li></ul>',78),h={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},f={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},v=t('<p>微信搜 <strong>沉默王二</strong> 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 <strong>222</strong> 即可免费领取。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="进阶" tabindex="-1"><a class="header-anchor" href="#进阶" aria-hidden="true">#</a> 进阶</h2><h3 id="_9-如何保证消息的可用性-可靠性-不丢失呢" tabindex="-1"><a class="header-anchor" href="#_9-如何保证消息的可用性-可靠性-不丢失呢" aria-hidden="true">#</a> 9.如何保证消息的可用性/可靠性/不丢失呢？</h3><p>消息可能在哪些阶段丢失呢？可能会在这三个阶段发生丢失：生产阶段、存储阶段、消费阶段。</p><p>所以要从这三个阶段考虑：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-692a920d-621f-4b36-87f8-edb53e7f5cd9.jpg" alt="消息传递三阶段" tabindex="0" loading="lazy"><figcaption>消息传递三阶段</figcaption></figure><h5 id="生产" tabindex="-1"><a class="header-anchor" href="#生产" aria-hidden="true">#</a> 生产</h5><p>在生产阶段，主要<strong>通过请求确认机制，来保证消息的可靠传递</strong>。</p><ul><li>1、同步发送的时候，要注意处理响应结果和异常。如果返回响应 OK，表示消息成功发送到了 Broker，如果响应失败，或者发生其它异常，都应该重试。</li><li>2、异步发送的时候，应该在回调方法里检查，如果发送失败或者异常，都应该进行重试。</li><li>3、如果发生超时的情况，也可以通过查询日志的 API，来检查是否在 Broker 存储成功。</li></ul><h5 id="存储" tabindex="-1"><a class="header-anchor" href="#存储" aria-hidden="true">#</a> 存储</h5><p>存储阶段，可以通过<strong>配置可靠性优先的 Broker 参数来避免因为宕机丢消息</strong>，简单说就是可靠性优先的场景都应该使用同步。</p><ul><li>1、消息只要持久化到 CommitLog（日志文件）中，即使 Broker 宕机，未消费的消息也能重新恢复再消费。</li><li>2、Broker 的刷盘机制：同步刷盘和异步刷盘，不管哪种刷盘都可以保证消息一定存储在 pagecache 中（内存中），但是同步刷盘更可靠，它是 Producer 发送消息后等数据持久化到磁盘之后再返回响应给 Producer。</li></ul><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-61a3b092-1329-4738-bef9-6eb7ae429c26.jpg" alt="同步刷盘和异步刷盘-图片来源官网" tabindex="0" loading="lazy"><figcaption>同步刷盘和异步刷盘-图片来源官网</figcaption></figure><ul><li>3、Broker 通过主从模式来保证高可用，Broker 支持 Master 和 Slave 同步复制、Master 和 Slave 异步复制模式，生产者的消息都是发送给 Master，但是消费既可以从 Master 消费，也可以从 Slave 消费。同步复制模式可以保证即使 Master 宕机，消息肯定在 Slave 中有备份，保证了消息不会丢失。</li></ul><h5 id="消费" tabindex="-1"><a class="header-anchor" href="#消费" aria-hidden="true">#</a> 消费</h5><p>从 Consumer 角度分析，如何保证消息被成功消费？</p><ul><li>Consumer 保证消息成功消费的关键在于确认的时机，不要在收到消息后就立即发送消费确认，而是应该在执行完所有消费业务逻辑之后，再发送消费确认。因为消息队列维护了消费的位置，逻辑执行失败了，没有确认，再去队列拉取消息，就还是之前的一条。</li></ul><h3 id="_10-如何处理消息重复的问题呢" tabindex="-1"><a class="header-anchor" href="#_10-如何处理消息重复的问题呢" aria-hidden="true">#</a> 10.如何处理消息重复的问题呢？</h3><p>对分布式消息队列来说，同时做到确保一定投递和不重复投递是很难的，就是所谓的“有且仅有一次” 。RocketMQ 择了确保一定投递，保证消息不丢失，但有可能造成消息重复。</p><p>处理消息重复问题，主要有业务端自己保证，主要的方式有两种：<strong>业务幂等</strong>和<strong>消息去重</strong>。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-05c0538b-abfa-4bb0-973f-6b92555a6e5b.jpg" alt="消息重复处理" tabindex="0" loading="lazy"><figcaption>消息重复处理</figcaption></figure><p><strong>业务幂等</strong>：第一种是保证消费逻辑的幂等性，也就是多次调用和一次调用的效果是一样的。这样一来，不管消息消费多少次，对业务都没有影响。</p><p><strong>消息去重</strong>：第二种是业务端，对重复的消息就不再消费了。这种方法，需要保证每条消息都有一个惟一的编号，通常是业务相关的，比如订单号，消费的记录需要落库，而且需要保证和消息确认这一步的原子性。</p><p>具体做法是可以建立一个消费记录表，拿到这个消息做数据库的 insert 操作。给这个消息做一个唯一主键（primary key）或者唯一约束，那么就算出现重复消费的情况，就会导致主键冲突，那么就不再处理这条消息。</p><h3 id="_11-怎么处理消息积压" tabindex="-1"><a class="header-anchor" href="#_11-怎么处理消息积压" aria-hidden="true">#</a> 11.怎么处理消息积压？</h3><p>发生了消息积压，这时候就得想办法赶紧把积压的消息消费完，就得考虑提高消费能力，一般有两种办法：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-5d1ea064-1a37-4746-ad26-a18a1c8c344e.jpg" alt="消息积压处理" tabindex="0" loading="lazy"><figcaption>消息积压处理</figcaption></figure><ul><li><strong>消费者扩容</strong>：如果当前 Topic 的 Message Queue 的数量大于消费者数量，就可以对消费者进行扩容，增加消费者，来提高消费能力，尽快把积压的消息消费玩。</li><li><strong>消息迁移 Queue 扩容</strong>：如果当前 Topic 的 Message Queue 的数量小于或者等于消费者数量，这种情况，再扩容消费者就没什么用，就得考虑扩容 Message Queue。可以新建一个临时的 Topic，临时的 Topic 多设置一些 Message Queue，然后先用一些消费者把消费的数据丢到临时的 Topic，因为不用业务处理，只是转发一下消息，还是很快的。接下来用扩容的消费者去消费新的 Topic 里的数据，消费完了之后，恢复原状。</li></ul><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-69aa8004-45e9-4e41-b628-1d7ed6d94c92.jpg" alt="消息迁移扩容消费" tabindex="0" loading="lazy"><figcaption>消息迁移扩容消费</figcaption></figure><h3 id="_12-顺序消息如何实现" tabindex="-1"><a class="header-anchor" href="#_12-顺序消息如何实现" aria-hidden="true">#</a> 12.顺序消息如何实现？</h3><p>RocketMQ 实现顺序消息的关键在于保证消息生产和消费过程中严格的顺序控制，即确保同一业务的消息按顺序发送到同一个队列中，并由同一个消费者线程按顺序消费。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-e3de6bb5-b5db-47af-8ae3-73aedd269f32.jpg" alt="三分恶面渣逆袭：顺序消息" tabindex="0" loading="lazy"><figcaption>三分恶面渣逆袭：顺序消息</figcaption></figure><h4 id="局部顺序消息如何实现" tabindex="-1"><a class="header-anchor" href="#局部顺序消息如何实现" aria-hidden="true">#</a> 局部顺序消息如何实现？</h4><p>局部顺序消息保证在某个逻辑分区或业务逻辑下的消息顺序，例如同一个订单或用户的消息按顺序消费，而不同订单或用户之间的顺序不做保证。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-14ab3700-8538-473e-bb66-8acfdd6a77a2.jpg" alt="三分恶面渣逆袭：部分顺序消息" tabindex="0" loading="lazy"><figcaption>三分恶面渣逆袭：部分顺序消息</figcaption></figure><h4 id="全局顺序消息如何实现" tabindex="-1"><a class="header-anchor" href="#全局顺序消息如何实现" aria-hidden="true">#</a> 全局顺序消息如何实现？</h4><p>全局顺序消息保证消息在整个系统范围内的严格顺序，即消息按照生产的顺序被消费。</p><p>可以将所有消息发送到一个单独的队列中，确保所有消息按生产顺序发送和消费。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-8e98ac61-ad47-4ed4-aac6-223201f9aae2.jpg" alt="三分恶面渣逆袭：全局顺序消息" tabindex="0" loading="lazy"><figcaption>三分恶面渣逆袭：全局顺序消息</figcaption></figure>',40),k={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},x=t(`<h3 id="_13-如何实现消息过滤" tabindex="-1"><a class="header-anchor" href="#_13-如何实现消息过滤" aria-hidden="true">#</a> 13.如何实现消息过滤？</h3><p>有两种方案：</p><ul><li>一种是在 Broker 端按照 Consumer 的去重逻辑进行过滤，这样做的好处是避免了无用的消息传输到 Consumer 端，缺点是加重了 Broker 的负担，实现起来相对复杂。</li><li>另一种是在 Consumer 端过滤，比如按照消息设置的 tag 去重，这样的好处是实现起来简单，缺点是有大量无用的消息到达了 Consumer 端只能丢弃不处理。</li></ul><p>一般采用 Cosumer 端过滤，如果希望提高吞吐量，可以采用 Broker 过滤。</p><p>对消息的过滤有三种方式：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-f2c8bf50-dc51-44c8-9d71-b8a22af199c4.jpg" alt="消息过滤" tabindex="0" loading="lazy"><figcaption>消息过滤</figcaption></figure><ul><li>根据 Tag 过滤：这是最常见的一种，用起来高效简单</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(&quot;CID_EXAMPLE&quot;);
consumer.subscribe(&quot;TOPIC&quot;, &quot;TAGA || TAGB || TAGC&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>SQL 表达式过滤：SQL 表达式过滤更加灵活</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(&quot;please_rename_unique_group_name_4&quot;);
// 只有订阅的消息有这个属性a, a &gt;=0 and a &lt;= 3
consumer.subscribe(&quot;TopicTest&quot;, MessageSelector.bySql(&quot;a between 0 and 3&quot;);
consumer.registerMessageListener(new MessageListenerConcurrently() {
   @Override
   public ConsumeConcurrentlyStatus consumeMessage(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context) {
       return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
   }
});
consumer.start();

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Filter Server 方式：最灵活，也是最复杂的一种方式，允许用户自定义函数进行过滤</li></ul><h3 id="_14-延时消息了解吗" tabindex="-1"><a class="header-anchor" href="#_14-延时消息了解吗" aria-hidden="true">#</a> 14.延时消息了解吗？</h3><p>电商的订单超时自动取消，就是一个典型的利用延时消息的例子，用户提交了一个订单，就可以发送一个延时消息，1h 后去检查这个订单的状态，如果还是未付款就取消订单释放库存。</p><p>RocketMQ 是支持延时消息的，只需要在生产消息的时候设置消息的延时级别：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 实例化一个生产者来产生延时消息
DefaultMQProducer producer = new DefaultMQProducer(&quot;ExampleProducerGroup&quot;);
// 启动生产者
producer.start();
int totalMessagesToSend = 100;
for (int i = 0; i &lt; totalMessagesToSend; i++) {
    Message message = new Message(&quot;TestTopic&quot;, (&quot;Hello scheduled message &quot; + i).getBytes());
    // 设置延时等级3,这个消息将在10s之后发送(现在只支持固定的几个时间,详看delayTimeLevel)
    message.setDelayTimeLevel(3);
    // 发送消息
    producer.send(message);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是目前 RocketMQ 支持的延时级别是有限的：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>private String messageDelayLevel = &quot;1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h&quot;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="rocketmq-怎么实现延时消息的" tabindex="-1"><a class="header-anchor" href="#rocketmq-怎么实现延时消息的" aria-hidden="true">#</a> RocketMQ 怎么实现延时消息的？</h4><p>简单，八个字：<code>临时存储</code>+<code>定时任务</code>。</p><p>Broker 收到延时消息了，会先发送到主题（SCHEDULE_TOPIC_XXXX）的相应时间段的 Message Queue 中，然后通过一个定时任务轮询这些队列，到期后，把消息投递到目标 Topic 的队列中，然后消费者就可以正常消费这些消息。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-e3b68480-8006-4cd6-892a-1c72f8b0fbcb.jpg" alt="延迟消息处理流程-图片来源见水印" tabindex="0" loading="lazy"><figcaption>延迟消息处理流程-图片来源见水印</figcaption></figure><h3 id="_15-怎么实现分布式消息事务的-半消息" tabindex="-1"><a class="header-anchor" href="#_15-怎么实现分布式消息事务的-半消息" aria-hidden="true">#</a> 15.怎么实现分布式消息事务的？半消息？</h3><p>半消息：是指暂时还不能被 Consumer 消费的消息，Producer 成功发送到 Broker 端的消息，但是此消息被标记为 “暂不可投递” 状态，只有等 Producer 端执行完本地事务后经过二次确认了之后，Consumer 才能消费此条消息。</p><p>依赖半消息，可以实现分布式消息事务，其中的关键在于二次确认以及消息回查：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-76df2fb9-0f3f-496d-88a8-aac79ad1102c.jpg" alt="RocketMQ实现消息事务" tabindex="0" loading="lazy"><figcaption>RocketMQ实现消息事务</figcaption></figure><ul><li>1、Producer 向 broker 发送半消息</li><li>2、Producer 端收到响应，消息发送成功，此时消息是半消息，标记为 “不可投递” 状态，Consumer 消费不了。</li><li>3、Producer 端执行本地事务。</li><li>4、正常情况本地事务执行完成，Producer 向 Broker 发送 Commit/Rollback，如果是 Commit，Broker 端将半消息标记为正常消息，Consumer 可以消费，如果是 Rollback，Broker 丢弃此消息。</li><li>5、异常情况，Broker 端迟迟等不到二次确认。在一定时间后，会查询所有的半消息，然后到 Producer 端查询半消息的执行情况。</li><li>6、Producer 端查询本地事务的状态</li><li>7、根据事务的状态提交 commit/rollback 到 broker 端。（5，6，7 是消息回查）</li><li>8、消费者段消费到消息之后，执行本地事务，执行本地事务。</li></ul><h3 id="_16-死信队列知道吗" tabindex="-1"><a class="header-anchor" href="#_16-死信队列知道吗" aria-hidden="true">#</a> 16.死信队列知道吗？</h3><p>死信队列用于处理无法被正常消费的消息，即死信消息。</p><p>当一条消息初次消费失败，<strong>消息队列 RocketMQ 会自动进行消息重试</strong>；达到最大重试次数后，若消费依然失败，则表明消费者在正常情况下无法正确地消费该消息，此时，消息队列 RocketMQ 不会立刻将消息丢弃，而是将其发送到该<strong>消费者对应的特殊队列中</strong>，该特殊队列称为<strong>死信队列</strong>。</p><p><strong>死信消息的特点</strong>：</p><ul><li>不会再被消费者正常消费。</li><li>有效期与正常消息相同，均为 3 天，3 天后会被自动删除。因此，需要在死信消息产生后的 3 天内及时处理。</li></ul><p><strong>死信队列的特点</strong>：</p><ul><li>一个死信队列对应一个 Group ID， 而不是对应单个消费者实例。</li><li>如果一个 Group ID 未产生死信消息，消息队列 RocketMQ 不会为其创建相应的死信队列。</li><li>一个死信队列包含了对应 Group ID 产生的所有死信消息，不论该消息属于哪个 Topic。</li></ul><p>RocketMQ 控制台提供对死信消息的查询、导出和重发的功能。</p><h3 id="_17-如何保证-rocketmq-的高可用" tabindex="-1"><a class="header-anchor" href="#_17-如何保证-rocketmq-的高可用" aria-hidden="true">#</a> 17.如何保证 RocketMQ 的高可用？</h3><p>NameServer 因为是无状态，且不相互通信的，所以只要集群部署就可以保证高可用。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-0ce789f4-7a47-4c24-ac08-76f0490298f7.jpg" alt="NameServer集群" tabindex="0" loading="lazy"><figcaption>NameServer集群</figcaption></figure><p>RocketMQ 的高可用主要是在体现在 Broker 的读和写的高可用，Broker 的高可用是通过<code>集群</code>和<code>主从</code>实现的。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-76c5eb61-9605-4620-84fb-dc960f01de85.jpg" alt="Broker集群、主从示意图" tabindex="0" loading="lazy"><figcaption>Broker集群、主从示意图</figcaption></figure><p>Broker 可以配置两种角色：Master 和 Slave，Master 角色的 Broker 支持读和写，Slave 角色的 Broker 只支持读，Master 会向 Slave 同步消息。</p><p>也就是说 Producer 只能向 Master 角色的 Broker 写入消息，Cosumer 可以从 Master 和 Slave 角色的 Broker 读取消息。</p><p>Consumer 的配置文件中，并不需要设置是从 Master 读还是从 Slave 读，当 Master 不可用或者繁忙的时候， Consumer 的读请求会被自动切换到从 Slave。有了自动切换 Consumer 这种机制，当一个 Master 角色的机器出现故障后，Consumer 仍然可以从 Slave 读取消息，不影响 Consumer 读取消息，这就实现了读的高可用。</p><p>如何达到发送端写的高可用性呢？在创建 Topic 的时候，把 Topic 的多个 Message Queue 创建在多个 Broker 组上（相同 Broker 名称，不同 brokerId 机器组成 Broker 组），这样当 Broker 组的 Master 不可用后，其他组 Master 仍然可用， Producer 仍然可以发送消息 RocketMQ 目前还不支持把 Slave 自动转成 Master ，如果机器资源不足，需要把 Slave 转成 Master ，则要手动停止 Slave 色的 Broker ，更改配置文件，用新的配置文件启动 Broker。</p>`,43),_={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},M={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},q=t(`<p>微信搜 <strong>沉默王二</strong> 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 <strong>222</strong> 即可免费领取。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><h3 id="_18-说一下-rocketmq-的整体工作流程" tabindex="-1"><a class="header-anchor" href="#_18-说一下-rocketmq-的整体工作流程" aria-hidden="true">#</a> 18.说一下 RocketMQ 的整体工作流程？</h3><p>简单来说，RocketMQ 是一个分布式消息队列，也就是<code>消息队列</code>+<code>分布式系统</code>。</p><p>作为消息队列，它是<code>发</code>-<code>存</code>-<code>收</code>的一个模型，对应的就是 Producer、Broker、Cosumer；作为分布式系统，它要有服务端、客户端、注册中心，对应的就是 Broker、Producer/Consumer、NameServer</p><p>所以我们看一下它主要的工作流程：RocketMQ 由 NameServer 注册中心集群、Producer 生产者集群、Consumer 消费者集群和若干 Broker（RocketMQ 进程）组成：</p><ol><li>Broker 在启动的时候去向所有的 NameServer 注册，并保持长连接，每 30s 发送一次心跳</li><li>Producer 在发送消息的时候从 NameServer 获取 Broker 服务器地址，根据负载均衡算法选择一台服务器来发送消息</li><li>Conusmer 消费消息的时候同样从 NameServer 获取 Broker 地址，然后主动拉取消息来消费</li></ol><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-ec571bd4-fa24-4ada-87ab-f761a7dfdf3f.jpg" alt="RocketMQ整体工作流程" tabindex="0" loading="lazy"><figcaption>RocketMQ整体工作流程</figcaption></figure><h3 id="_19-为什么-rocketmq-不使用-zookeeper-作为注册中心呢" tabindex="-1"><a class="header-anchor" href="#_19-为什么-rocketmq-不使用-zookeeper-作为注册中心呢" aria-hidden="true">#</a> 19.为什么 RocketMQ 不使用 Zookeeper 作为注册中心呢？</h3><p>Kafka 我们都知道采用 Zookeeper 作为注册中心——当然也开始逐渐去 Zookeeper，RocketMQ 不使用 Zookeeper 其实主要可能从这几方面来考虑：</p><ol><li>基于可用性的考虑，根据 CAP 理论，同时最多只能满足两个点，而 Zookeeper 满足的是 CP，也就是说 Zookeeper 并不能保证服务的可用性，Zookeeper 在进行选举的时候，整个选举的时间太长，期间整个集群都处于不可用的状态，而这对于一个注册中心来说肯定是不能接受的，作为服务发现来说就应该是为可用性而设计。</li><li>基于性能的考虑，NameServer 本身的实现非常轻量，而且可以通过增加机器的方式水平扩展，增加集群的抗压能力，而 Zookeeper 的写是不可扩展的，Zookeeper 要解决这个问题只能通过划分领域，划分多个 Zookeeper 集群来解决，首先操作起来太复杂，其次这样还是又违反了 CAP 中的 A 的设计，导致服务之间是不连通的。</li><li>持久化的机制来带的问题，ZooKeeper 的 ZAB 协议对每一个写请求，会在每个 ZooKeeper 节点上保持写一个事务日志，同时再加上定期的将内存数据镜像（Snapshot）到磁盘来保证数据的一致性和持久性，而对于一个简单的服务发现的场景来说，这其实没有太大的必要，这个实现方案太重了。而且本身存储的数据应该是高度定制化的。</li><li>消息发送应该弱依赖注册中心，而 RocketMQ 的设计理念也正是基于此，生产者在第一次发送消息的时候从 NameServer 获取到 Broker 地址后缓存到本地，如果 NameServer 整个集群不可用，短时间内对于生产者和消费者并不会产生太大影响。</li></ol><h3 id="_20-broker-是怎么保存数据的呢" tabindex="-1"><a class="header-anchor" href="#_20-broker-是怎么保存数据的呢" aria-hidden="true">#</a> 20.Broker 是怎么保存数据的呢？</h3><p>RocketMQ 主要的存储文件包括 CommitLog 文件、ConsumeQueue 文件、Indexfile 文件。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-b6d13d4d-c417-43b4-bfe1-12724777888c.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>消息存储的整体的设计：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-ddbf8773-1d71-4d1a-a186-46f6985b621e.jpg" alt="消息存储整体设计-来源官网" tabindex="0" loading="lazy"><figcaption>消息存储整体设计-来源官网</figcaption></figure><ul><li><strong>CommitLog</strong>：消息主体以及元数据的存储主体，存储 Producer 端写入的消息主体内容,消息内容不是定长的。单个文件大小默认 1G, 文件名长度为 20 位，左边补零，剩余为起始偏移量，比如 00000000000000000000 代表了第一个文件，起始偏移量为 0，文件大小为 1G=1073741824；当第一个文件写满了，第二个文件为 00000000001073741824，起始偏移量为 1073741824，以此类推。消息主要是顺序写入日志文件，当文件满了，写入下一个文件。</li></ul><p>CommitLog 文件保存于\${Rocket_Home}/store/commitlog 目录中，从图中我们可以明显看出来文件名的偏移量，每个文件默认 1G，写满后自动生成一个新的文件。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-a76f7365-8a8c-4b91-9505-9d427cf3bde4.jpg" alt="CommitLog" tabindex="0" loading="lazy"><figcaption>CommitLog</figcaption></figure><ul><li><strong>ConsumeQueue</strong>：消息消费队列，引入的目的主要是提高消息消费的性能，由于 RocketMQ 是基于主题 topic 的订阅模式，消息消费是针对主题进行的，如果要遍历 commitlog 文件中根据 topic 检索消息是非常低效的。</li></ul><p>Consumer 即可根据 ConsumeQueue 来查找待消费的消息。其中，ConsumeQueue（逻辑消费队列）作为消费消息的索引，保存了指定 Topic 下的队列消息在 CommitLog 中的起始物理偏移量 offset，消息大小 size 和消息 Tag 的 HashCode 值。</p><p>ConsumeQueue 文件可以看成是基于 Topic 的 CommitLog 索引文件，故 ConsumeQueue 文件夹的组织方式如下：topic/queue/file 三层组织结构，具体存储路径为：$HOME/store/consumequeue/{topic}/{queueId}/{fileName}。同样 ConsumeQueue 文件采取定长设计，每一个条目共 20 个字节，分别为 8 字节的 CommitLog 物理偏移量、4 字节的消息长度、8 字节 tag hashcode，单个文件由 30W 个条目组成，可以像数组一样随机访问每一个条目，每个 ConsumeQueue 文件大小约 5.72M；</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-c8b22760-35c2-436b-81ed-be49a107357b.jpg" alt="Comsumer Queue" tabindex="0" loading="lazy"><figcaption>Comsumer Queue</figcaption></figure><ul><li><strong>IndexFile</strong>：IndexFile（索引文件）提供了一种可以通过 key 或时间区间来查询消息的方法。Index 文件的存储位置是： {fileName}，文件名 fileName 是以创建时的时间戳命名的，固定的单个 IndexFile 文件大小约为 400M，一个 IndexFile 可以保存 2000W 个索引，IndexFile 的底层存储设计为在文件系统中实现 HashMap 结构，故 RocketMQ 的索引文件其底层实现为 hash 索引。</li></ul><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-f06f306b-fd87-48ff-b1cb-e39750d308e7.jpg" alt="IndexFile文件示意图" tabindex="0" loading="lazy"><figcaption>IndexFile文件示意图</figcaption></figure><p>总结一下：RocketMQ 采用的是混合型的存储结构，即为 Broker 单个实例下所有的队列共用一个日志数据文件（即为 CommitLog）来存储。</p><p>RocketMQ 的混合型存储结构(多个 Topic 的消息实体内容都存储于一个 CommitLog 中)针对 Producer 和 Consumer 分别采用了数据和索引部分相分离的存储结构，Producer 发送消息至 Broker 端，然后 Broker 端使用同步或者异步的方式对消息刷盘持久化，保存至 CommitLog 中。</p><p>只要消息被刷盘持久化至磁盘文件 CommitLog 中，那么 Producer 发送的消息就不会丢失。正因为如此，Consumer 也就肯定有机会去消费这条消息。当无法拉取到消息后，可以等下一次消息拉取，同时服务端也支持长轮询模式，如果一个消息拉取请求未拉取到消息，Broker 允许等待 30s 的时间，只要这段时间内有新消息到达，将直接返回给消费端。</p><p>这里，RocketMQ 的具体做法是，使用 Broker 端的后台服务线程—ReputMessageService 不停地分发请求并异步构建 ConsumeQueue（逻辑消费队列）和 IndexFile（索引文件）数据。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-80af9918-2d4b-4b43-b83a-d44bfc0f30bc.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_21-说说-rocketmq-怎么对文件进行读写的" tabindex="-1"><a class="header-anchor" href="#_21-说说-rocketmq-怎么对文件进行读写的" aria-hidden="true">#</a> 21.说说 RocketMQ 怎么对文件进行读写的？</h3><p>RocketMQ 对文件的读写巧妙地利用了操作系统的一些高效文件读写方式——<code>PageCache</code>、<code>顺序读写</code>、<code>零拷贝</code>。</p><ul><li>PageCache、顺序读取</li></ul><p>在 RocketMQ 中，ConsumeQueue 逻辑消费队列存储的数据较少，并且是顺序读取，在 page cache 机制的预读取作用下，Consume Queue 文件的读性能几乎接近读内存，即使在有消息堆积情况下也不会影响性能。而对于 CommitLog 消息存储的日志数据文件来说，读取消息内容时候会产生较多的随机访问读取，严重影响性能。如果选择合适的系统 IO 调度算法，比如设置调度算法为“Deadline”（此时块存储采用 SSD 的话），随机读的性能也会有所提升。</p><p>页缓存（PageCache)是 OS 对文件的缓存，用于加速对文件的读写。一般来说，程序对文件进行顺序读写的速度几乎接近于内存的读写速度，主要原因就是由于 OS 使用 PageCache 机制对读写访问操作进行了性能优化，将一部分的内存用作 PageCache。对于数据的写入，OS 会先写入至 Cache 内，随后通过异步的方式由 pdflush 内核线程将 Cache 内的数据刷盘至物理磁盘上。对于数据的读取，如果一次读取文件时出现未命中 PageCache 的情况，OS 从物理磁盘上访问读取文件的同时，会顺序对其他相邻块的数据文件进行预读取。</p><ul><li>零拷贝</li></ul><p>另外，RocketMQ 主要通过 MappedByteBuffer 对文件进行读写操作。其中，利用了 NIO 中的 FileChannel 模型将磁盘上的物理文件直接映射到用户态的内存地址中（这种 Mmap 的方式减少了传统 IO，将磁盘文件数据在操作系统内核地址空间的缓冲区，和用户应用程序地址空间的缓冲区之间来回进行拷贝的性能开销），将对文件的操作转化为直接对内存地址进行操作，从而极大地提高了文件的读写效率（正因为需要使用内存映射机制，故 RocketMQ 的文件存储都使用定长结构来存储，方便一次将整个文件映射至内存）。</p><h5 id="说说什么是零拷贝" tabindex="-1"><a class="header-anchor" href="#说说什么是零拷贝" aria-hidden="true">#</a> 说说什么是零拷贝?</h5><p>在操作系统中，使用传统的方式，数据需要经历几次拷贝，还要经历用户态/内核态切换。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-35fd884c-8d1b-4d04-8f09-23ed2f945b23.jpg" alt="传统文件传输示意图-来源《图解操作系统》" tabindex="0" loading="lazy"><figcaption>传统文件传输示意图-来源《图解操作系统》</figcaption></figure><ol><li>从磁盘复制数据到内核态内存；</li><li>从内核态内存复制到用户态内存；</li><li>然后从用户态内存复制到网络驱动的内核态内存；</li><li>最后是从网络驱动的内核态内存复制到网卡中进行传输。</li></ol><p>所以，可以通过零拷贝的方式，<strong>减少用户态与内核态的上下文切换</strong>和<strong>内存拷贝的次数</strong>，用来提升 I/O 的性能。零拷贝比较常见的实现方式是<strong>mmap</strong>，这种机制在 Java 中是通过 MappedByteBuffer 实现的。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-3ebab020-e411-4239-b91e-72147190c7b1.jpg" alt="mmap示意图-来源《图解操作系统》" tabindex="0" loading="lazy"><figcaption>mmap示意图-来源《图解操作系统》</figcaption></figure><h3 id="_22-消息刷盘怎么实现的呢" tabindex="-1"><a class="header-anchor" href="#_22-消息刷盘怎么实现的呢" aria-hidden="true">#</a> 22.消息刷盘怎么实现的呢？</h3><p>RocketMQ 提供了两种刷盘策略：同步刷盘和异步刷盘</p><ul><li>同步刷盘：在消息达到 Broker 的内存之后，必须刷到 commitLog 日志文件中才算成功，然后返回 Producer 数据已经发送成功。</li><li>异步刷盘：异步刷盘是指消息达到 Broker 内存后就返回 Producer 数据已经发送成功，会唤醒一个线程去将数据持久化到 CommitLog 日志文件中。</li></ul><p><strong>Broker</strong> 在消息的存取时直接操作的是内存（内存映射文件），这可以提供系统的吞吐量，但是无法避免机器掉电时数据丢失，所以需要持久化到磁盘中。</p><p>刷盘的最终实现都是使用<strong>NIO</strong>中的 MappedByteBuffer.force() 将映射区的数据写入到磁盘，如果是同步刷盘的话，在<strong>Broker</strong>把消息写到<strong>CommitLog</strong>映射区后，就会等待写入完成。</p><p>异步而言，只是唤醒对应的线程，不保证执行的时机，流程如图所示。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-10a2361b-5e23-462f-86bf-1a9bce2342e5.jpg" alt="异步刷盘" tabindex="0" loading="lazy"><figcaption>异步刷盘</figcaption></figure><h3 id="_22-能说下-rocketmq-的负载均衡是如何实现的" tabindex="-1"><a class="header-anchor" href="#_22-能说下-rocketmq-的负载均衡是如何实现的" aria-hidden="true">#</a> 22.能说下 RocketMQ 的负载均衡是如何实现的？</h3><p>RocketMQ 中的负载均衡都在 Client 端完成，具体来说的话，主要可以分为 Producer 端发送消息时候的负载均衡和 Consumer 端订阅消息的负载均衡。</p><h5 id="producer-的负载均衡" tabindex="-1"><a class="header-anchor" href="#producer-的负载均衡" aria-hidden="true">#</a> Producer 的负载均衡</h5><p>Producer 端在发送消息的时候，会先根据 Topic 找到指定的 TopicPublishInfo，在获取了 TopicPublishInfo 路由信息后，RocketMQ 的客户端在默认方式下 selectOneMessageQueue()方法会从 TopicPublishInfo 中的 messageQueueList 中选择一个队列（MessageQueue）进行发送消息。具这里有一个 sendLatencyFaultEnable 开关变量，如果开启，在随机递增取模的基础上，再过滤掉 not available 的 Broker 代理。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-5f254411-502b-4bd3-89b5-d3157964617b.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>所谓的&quot;latencyFaultTolerance&quot;，是指对之前失败的，按一定的时间做退避。例如，如果上次请求的 latency 超过 550Lms，就退避 3000Lms；超过 1000L，就退避 60000L；如果关闭，采用随机递增取模的方式选择一个队列（MessageQueue）来发送消息，latencyFaultTolerance 机制是实现消息发送高可用的核心关键所在。</p><h5 id="consumer-的负载均衡" tabindex="-1"><a class="header-anchor" href="#consumer-的负载均衡" aria-hidden="true">#</a> Consumer 的负载均衡</h5><p>在 RocketMQ 中，Consumer 端的两种消费模式（Push/Pull）都是基于拉模式来获取消息的，而在 Push 模式只是对 pull 模式的一种封装，其本质实现为消息拉取线程在从服务器拉取到一批消息后，然后提交到消息消费线程池后，又“马不停蹄”的继续向服务器再次尝试拉取消息。如果未拉取到消息，则延迟一下又继续拉取。在两种基于拉模式的消费方式（Push/Pull）中，均需要 Consumer 端知道从 Broker 端的哪一个消息队列中去获取消息。因此，有必要在 Consumer 端来做负载均衡，即 Broker 端中多个 MessageQueue 分配给同一个 ConsumerGroup 中的哪些 Consumer 消费。</p><ol><li>Consumer 端的心跳包发送</li></ol><p>在 Consumer 启动后，它就会通过定时任务不断地向 RocketMQ 集群中的所有 Broker 实例发送心跳包（其中包含了，消息消费分组名称、订阅关系集合、消息通信模式和客户端 id 的值等信息）。Broker 端在收到 Consumer 的心跳消息后，会将它维护在 ConsumerManager 的本地缓存变量—consumerTable，同时并将封装后的客户端网络通道信息保存在本地缓存变量—channelInfoTable 中，为之后做 Consumer 端的负载均衡提供可以依据的元数据信息。</p><ol start="2"><li>Consumer 端实现负载均衡的核心类—RebalanceImpl</li></ol><p>在 Consumer 实例的启动流程中的启动 MQClientInstance 实例部分，会完成负载均衡服务线程—RebalanceService 的启动（每隔 20s 执行一次）。</p><p>通过查看源码可以发现，RebalanceService 线程的 run()方法最终调用的是 RebalanceImpl 类的 rebalanceByTopic()方法，这个方法是实现 Consumer 端负载均衡的核心。</p><p>rebalanceByTopic()方法会根据消费者通信类型为“广播模式”还是“集群模式”做不同的逻辑处理。这里主要来看下集群模式下的主要处理流程：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-7cbfd097-5186-47ba-9641-687bc9381d0b.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>(1) 从 rebalanceImpl 实例的本地缓存变量—topicSubscribeInfoTable 中，获取该 Topic 主题下的消息消费队列集合（mqSet）；</p><p>(2) 根据 topic 和 consumerGroup 为参数调用 mQClientFactory.findConsumerIdList()方法向 Broker 端发送通信请求，获取该消费组下消费者 Id 列表；</p><p>(3) 先对 Topic 下的消息消费队列、消费者 Id 排序，然后用消息队列分配策略算法（默认为：消息队列的平均分配算法），计算出待拉取的消息队列。这里的平均分配算法，类似于分页的算法，将所有 MessageQueue 排好序类似于记录，将所有消费端 Consumer 排好序类似页数，并求出每一页需要包含的平均 size 和每个页面记录的范围 range，最后遍历整个 range 而计算出当前 Consumer 端应该分配到的的 MessageQueue。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-6d1c69e7-5245-495f-8f8d-b5e48162df6f.jpg" alt="Cosumer分配" tabindex="0" loading="lazy"><figcaption>Cosumer分配</figcaption></figure><p>(4) 然后，调用 updateProcessQueueTableInRebalance()方法，具体的做法是，先将分配到的消息队列集合（mqSet）与 processQueueTable 做一个过滤比对。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-c84236ed-77a6-45e9-b086-4927d72ce21a.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>上图中 processQueueTable 标注的红色部分，表示与分配到的消息队列集合 mqSet 互不包含。将这些队列设置 Dropped 属性为 true，然后查看这些队列是否可以移除出 processQueueTable 缓存变量，这里具体执行 removeUnnecessaryMessageQueue()方法，即每隔 1s 查看是否可以获取当前消费处理队列的锁，拿到的话返回 true。如果等待 1s 后，仍然拿不到当前消费处理队列的锁则返回 false。如果返回 true，则从 processQueueTable 缓存变量中移除对应的 Entry；</li><li>上图中 processQueueTable 的绿色部分，表示与分配到的消息队列集合 mqSet 的交集。判断该 ProcessQueue 是否已经过期了，在 Pull 模式的不用管，如果是 Push 模式的，设置 Dropped 属性为 true，并且调用 removeUnnecessaryMessageQueue()方法，像上面一样尝试移除 Entry；</li><li>最后，为过滤后的消息队列集合（mqSet）中的每个 MessageQueue 创建一个 ProcessQueue 对象并存入 RebalanceImpl 的 processQueueTable 队列中（其中调用 RebalanceImpl 实例的 computePullFromWhere(MessageQueue mq)方法获取该 MessageQueue 对象的下一个进度消费值 offset，随后填充至接下来要创建的 pullRequest 对象属性中），并创建拉取请求对象—pullRequest 添加到拉取列表—pullRequestList 中，最后执行 dispatchPullRequest()方法，将 Pull 消息的请求对象 PullRequest 依次放入 PullMessageService 服务线程的阻塞队列 pullRequestQueue 中，待该服务线程取出后向 Broker 端发起 Pull 消息的请求。其中，可以重点对比下，RebalancePushImpl 和 RebalancePullImpl 两个实现类的 dispatchPullRequest()方法不同，RebalancePullImpl 类里面的该方法为空。</li></ul><p>消息消费队列在同一消费组不同消费者之间的负载均衡，其核心设计理念是在一个消息消费队列在同一时间只允许被同一消费组内的一个消费者消费，一个消息消费者能同时消费多个消息队列。</p><h3 id="_23-rocketmq-消息长轮询了解吗" tabindex="-1"><a class="header-anchor" href="#_23-rocketmq-消息长轮询了解吗" aria-hidden="true">#</a> 23.RocketMQ 消息长轮询了解吗？</h3><p>所谓的长轮询，就是 Consumer 拉取消息，如果对应的 Queue 如果没有数据，Broker 不会立即返回，而是把 PullReuqest hold 起来，等待 queue 有了消息后，或者长轮询阻塞时间到了，再重新处理该 queue 上的所有 PullRequest。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin-mianznxrocketmqessw-5a715dea-8e18-471e-9a74-e97299901658.jpg" alt="长轮询简单示意图" tabindex="0" loading="lazy"><figcaption>长轮询简单示意图</figcaption></figure><ul><li>PullMessageProcessor#processRequest</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//如果没有拉到数据
case ResponseCode.PULL_NOT_FOUND:
// broker 和 consumer 都允许 suspend，默认开启
if (brokerAllowSuspend &amp;&amp; hasSuspendFlag) {
    long pollingTimeMills = suspendTimeoutMillisLong;
    if (!this.brokerController.getBrokerConfig().isLongPollingEnable()) {
        pollingTimeMills = this.brokerController.getBrokerConfig().getShortPollingTimeMills();
    }

    String topic = requestHeader.getTopic();
    long offset = requestHeader.getQueueOffset();
    int queueId = requestHeader.getQueueId();
    //封装一个PullRequest
    PullRequest pullRequest = new PullRequest(request, channel, pollingTimeMills,
            this.brokerController.getMessageStore().now(), offset, subscriptionData, messageFilter);
    //把PullRequest挂起来
    this.brokerController.getPullRequestHoldService().suspendPullRequest(topic, queueId, pullRequest);
    response = null;
    break;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>挂起的请求，有一个服务线程会不停地检查，看 queue 中是否有数据，或者超时。</p><ul><li>PullRequestHoldService#run()</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@Override
public void run() {
    log.info(&quot;{} service started&quot;, this.getServiceName());
    while (!this.isStopped()) {
        try {
            if (this.brokerController.getBrokerConfig().isLongPollingEnable()) {
                this.waitForRunning(5 * 1000);
            } else {
                this.waitForRunning(this.brokerController.getBrokerConfig().getShortPollingTimeMills());
            }

            long beginLockTimestamp = this.systemClock.now();
            //检查hold住的请求
            this.checkHoldRequest();
            long costTime = this.systemClock.now() - beginLockTimestamp;
            if (costTime &gt; 5 * 1000) {
                log.info(&quot;[NOTIFYME] check hold request cost {} ms.&quot;, costTime);
            }
        } catch (Throwable e) {
            log.warn(this.getServiceName() + &quot; service has exception. &quot;, e);
        }
    }

    log.info(&quot;{} service end&quot;, this.getServiceName());
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,82),j={href:"https://mp.weixin.qq.com/s/N6wq52pBGh8xkS-5uRcO2g",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://mp.weixin.qq.com/s/IvBt3tB_IWZgPjKv5WGS4A",target:"_blank",rel:"noopener noreferrer"},C=e("hr",null,null,-1),R=e("p",null,[e("em",null,"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟"),r("。")],-1),w=e("p",null,[e("strong",null,"系列内容"),r("：")],-1),P={href:"https://javabetter.cn/sidebar/sanfene/javase.html",target:"_blank",rel:"noopener noreferrer"},B={href:"https://javabetter.cn/sidebar/sanfene/javathread.html",target:"_blank",rel:"noopener noreferrer"},z={href:"https://javabetter.cn/sidebar/sanfene/collection.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://javabetter.cn/sidebar/sanfene/jvm.html",target:"_blank",rel:"noopener noreferrer"},T={href:"https://javabetter.cn/sidebar/sanfene/spring.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://javabetter.cn/sidebar/sanfene/redis.html",target:"_blank",rel:"noopener noreferrer"},I={href:"https://javabetter.cn/sidebar/sanfene/mybatis.html",target:"_blank",rel:"noopener noreferrer"},L={href:"https://javabetter.cn/sidebar/sanfene/mysql.html",target:"_blank",rel:"noopener noreferrer"},N={href:"https://javabetter.cn/sidebar/sanfene/os.html",target:"_blank",rel:"noopener noreferrer"},O={href:"https://javabetter.cn/sidebar/sanfene/network.html",target:"_blank",rel:"noopener noreferrer"},J={href:"https://javabetter.cn/sidebar/sanfene/rocketmq.html",target:"_blank",rel:"noopener noreferrer"},G={href:"https://javabetter.cn/sidebar/sanfene/fenbushi.html",target:"_blank",rel:"noopener noreferrer"},F={href:"https://javabetter.cn/sidebar/sanfene/weifuwu.html",target:"_blank",rel:"noopener noreferrer"},D={href:"https://javabetter.cn/sidebar/sanfene/shejimoshi.html",target:"_blank",rel:"noopener noreferrer"},E={href:"https://javabetter.cn/sidebar/sanfene/linux.html",target:"_blank",rel:"noopener noreferrer"},H=e("hr",null,null,-1),Z={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},A={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},K=e("p",null,[r("微信搜 "),e("strong",null,"沉默王二"),r(" 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 "),e("strong",null,"222"),r(" 即可免费领取。")],-1),U=e("figure",null,[e("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png",alt:"",tabindex:"0",loading:"lazy"}),e("figcaption")],-1);function V(W,X){const a=o("ExternalLinkIcon");return s(),l("div",null,[e("p",null,[r("1.1 万字 45 张手绘图，详解 23 道 RocketMQ 面试高频题（让天下没有难背的八股），面渣背会这些 RocketMQ 八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳"),e("a",d,[r("转载链接"),i(a)]),r("，作者：三分恶，戳"),e("a",u,[r("原文链接"),i(a)]),r("。")]),p,e("blockquote",null,[e("ol",null,[e("li",null,[e("a",g,[r("Java 面试指南（付费）"),i(a)]),r("收录的字节跳动同学 7 Java 后端实习一面的原题：有了解过 MQ 吗？")]),e("li",null,[e("a",m,[r("Java 面试指南（付费）"),i(a)]),r("收录的腾讯面经同学 24 面试原题：如何用消息队列做削峰填谷的？")])])]),b,e("p",null,[r("GitHub 上标星 10000+ 的开源知识库《"),e("a",h,[r("二哥的 Java 进阶之路"),i(a)]),r("》第一版 PDF 终于来了！包括 Java 基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM 等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),e("a",f,[r("太赞了，GitHub 上标星 10000+ 的 Java 教程"),i(a)])]),v,e("blockquote",null,[e("ol",null,[e("li",null,[e("a",k,[r("Java 面试指南（付费）"),i(a)]),r("收录的京东面经同学 2 后端面试原题：说说mq原理，怎么保证消息接受顺序？")])])]),x,e("p",null,[r("GitHub 上标星 10000+ 的开源知识库《"),e("a",_,[r("二哥的 Java 进阶之路"),i(a)]),r("》第一版 PDF 终于来了！包括 Java 基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM 等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),e("a",M,[r("太赞了，GitHub 上标星 10000+ 的 Java 教程"),i(a)])]),q,e("blockquote",null,[e("p",null,[r("图文详解 RocketMQ 面试高频题，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳"),e("a",j,[r("转载链接"),i(a)]),r("，作者：三分恶，戳"),e("a",Q,[r("原文链接"),i(a)]),r("。")])]),C,R,w,e("ul",null,[e("li",null,[e("a",P,[r("面渣逆袭 Java SE 篇 👍"),i(a)])]),e("li",null,[e("a",B,[r("面渣逆袭 Java 集合框架篇 👍"),i(a)])]),e("li",null,[e("a",z,[r("面渣逆袭 Java 并发编程篇 👍"),i(a)])]),e("li",null,[e("a",S,[r("面渣逆袭 JVM 篇 👍"),i(a)])]),e("li",null,[e("a",T,[r("面渣逆袭 Spring 篇 👍"),i(a)])]),e("li",null,[e("a",y,[r("面渣逆袭 Redis 篇 👍"),i(a)])]),e("li",null,[e("a",I,[r("面渣逆袭 MyBatis 篇 👍"),i(a)])]),e("li",null,[e("a",L,[r("面渣逆袭 MySQL 篇 👍"),i(a)])]),e("li",null,[e("a",N,[r("面渣逆袭操作系统篇 👍"),i(a)])]),e("li",null,[e("a",O,[r("面渣逆袭计算机网络篇 👍"),i(a)])]),e("li",null,[e("a",J,[r("面渣逆袭 RocketMQ 篇 👍"),i(a)])]),e("li",null,[e("a",G,[r("面渣逆袭分布式篇 👍"),i(a)])]),e("li",null,[e("a",F,[r("面渣逆袭微服务篇 👍"),i(a)])]),e("li",null,[e("a",D,[r("面渣逆袭设计模式篇 👍"),i(a)])]),e("li",null,[e("a",E,[r("面渣逆袭 Linux 篇 👍"),i(a)])])]),H,e("p",null,[r("GitHub 上标星 10000+ 的开源知识库《"),e("a",Z,[r("二哥的 Java 进阶之路"),i(a)]),r("》第一版 PDF 终于来了！包括 Java 基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM 等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),e("a",A,[r("太赞了，GitHub 上标星 10000+ 的 Java 教程"),i(a)])]),K,U])}const ee=n(c,[["render",V],["__file","rocketmq.html.vue"]]);export{ee as default};
