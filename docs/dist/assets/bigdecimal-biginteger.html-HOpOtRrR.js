import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,e}from"./app-wJXw8B29.js";const l={},n=e(`<p><code>BigDecimal</code>是<code>Java</code>中用于浮点数数值计算的类，其主要适合用于处理需要精确表示和运算的场景。<strong>「<code>BigDecimal</code>不仅能精确表示非常大的或非常小的数字，同时还提供任意精度的运算。其有效的解决了浮点数（<code>float</code>和<code>double</code>）在进行精确计算时可能出现的舍入误差问题。」</strong></p><h2 id="bigdecimal简介" tabindex="-1"><a class="header-anchor" href="#bigdecimal简介"><span>BigDecimal简介</span></a></h2><p>在处理金融、科学等领域的计算时，为了解决<code>double</code>或<code>float</code>在计算值存在的精度缺失问题<code>BigDecimal</code>应运而生。<code>BigDecimal</code>在设计之初**「皆在提供更高的精度和准确性，以确保浮点数运算的准确性」**。因此其具有如下特点：</p><ol><li><strong>「高精度」</strong>：<code>BigDecimal</code>能够精确表示非常大的或非常小的数字，并且提供任意精度的运算。</li><li><strong>「不可变性」</strong>：<code>BigDecimal</code>对象是不可变的。一旦创建，数值就不会改变。所有的算术运算都会返回一个新的<code>BigDecimal</code>对象，而不会修改原来的对象。这种设计使得<code>BigDecimal</code>是线程安全的。</li><li><strong>「丰富的运算方法」</strong>：<code>BigDecimal</code>提供了丰富的算术运算方法，如<code>add</code>（加法）、<code>subtract</code>（减法）、<code>multiply</code>（乘法）和<code>divide</code>（除法），以及用于舍入、取整和比较的方法。</li><li><strong>「灵活的舍入模式」</strong>：提供多种舍入模式（如四舍五入、向上取整等），确保结果的精度和舍入行为可控。</li></ol><p>总的来看，「<code>BigDecimal</code>通过其对象的不可变性，从而确保了线程安全；与此同时，其还并提供丰富的算术运算方法（如加法、减法、乘法、除法）和多种舍入模式（如四舍五入、向上取整等），从而满足精确数值计算的需求。」</p><h2 id="bigdecimal数据存储的秘密" tabindex="-1"><a class="header-anchor" href="#bigdecimal数据存储的秘密"><span>BigDecimal数据存储的秘密</span></a></h2><p>对<code>BigDecimal</code>有了基础认识后，接下来我们便通过<code>Debug</code>的形式来看看<code>BigDecimal</code>内部究竟是如来实现数据的高精度的存储的。为此我们首先通过如下的语句来构建一个<code>BigDecimal</code>对象</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bigDecimal </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;3.1415926&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行代码进入<code>Idea</code>的<code>Debug</code>模式后，可以看到如下内容：</p><figure><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin//zhangwbigdecimalxjqyljzjsj-d87c0e82-6ab7-479f-a5fb-6a1c863f5d76.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>不难发现，对于<code>BigDecimal</code>对象而言其内部有 <strong>「<code>intVal、scal、precision、stringCache、initCompact</code>等五个重要属性。」</strong>   进一步，翻开<code>BigDecimal</code>源码，可以看到这五个属性各自对应的类型：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BigDecimal</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Number</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Comparable</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BigDecimal</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">     </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BigInteger</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> intVal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> scale</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                               </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> transient</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> precision</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> transient</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> stringCache</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">   </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> transient</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> intCompact</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体来看,<strong>「<code>intVal</code>为一个<code>BigInteger</code>对象,其主要用于保存超出基本类型的数值。」</strong> 例如：对于<code>Long</code>数据类型来看，其最大类型为<code>0x7fffffffffffffff</code>即<code>9223372036854775807</code>。因此如下的赋值<code>BigDecimal bigDecimal = new BigDecimal(&quot;9223372036854775808&quot;)</code>其已然超出了<code>Java</code>中基础类型所能表示的范围，而此时在<code>bigDecimal</code>对象中，其内部的<code>intVal</code>如下所示，不难发现<code>9223372036854775808</code>被赋值给<code>intVal</code>。</p><figure><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin//zhangwbigdecimalxjqyljzjsj-5d30da6f-c6a4-44cc-9919-8827d027269c.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>明白了<code>BigDecimal</code>中<code>intVal</code>属性的存储规则后，再来看其中的<code>scale、precision</code>所标示的含义。<strong>「其中<code>scale</code>表示小数点后的位数而<code>precision</code>则代表<code>BigDecimal</code>中数据的总位数，即包括整数和小数部分。」</strong></p><p>进一步，<strong>「<code>BigDecimal</code>的<code>stringCache</code>属性则主要用于保存<code>BigDecimal</code>数据所转成的字符串信息，而<code>intCompact</code>则用于将<code>long</code>数值以内的数据转为基本数据类型<code>long</code>进行存储。」</strong></p><p>(注：如果数据类型范围超过<code>long</code>所能表示的范围，则会将数据保存至<code>intVal</code>中)</p><p>此外还要注意一点，如果是包含小数点的数据其会将其小数点去掉，进而保存其去掉小数点后的数据。例如<code>new BigDecimal(&quot;3.1415926&quot;)</code>在该<code>BigDecimal</code>对象中<code>intCompact = 31415926</code>。</p><h2 id="bigdecimal的最佳实践" tabindex="-1"><a class="header-anchor" href="#bigdecimal的最佳实践"><span>BigDecimal的最佳实践</span></a></h2><p>知晓了<code>BigDecimal</code>内部对于<code>浮点</code>数据的存储原理后，接下来我们来谈一谈有关<code>BigDecimal</code>的几点最佳实践，以避免在使用<code>BigDecimal</code>时踩坑。</p><blockquote><p>❝</p><p>1.为了避免精度丢失，尽量使用<code>BigDecimal(String val)</code>构造方法或者  <code>BigDecimal.valueOf(double val)</code></p><p>❞</p></blockquote><p>如果使用<code>double</code> 类型的数据来构建一个 <code>BigDecimal</code> 对象时，其会出现精度丢失的问题。这主要是因为 <code>double</code> 类型本身在表示浮点数时存在精度限制。</p><p>具体来看，<code>double</code> 类型使用 <code>IEEE 754</code>标准的双精度浮点数格式，该格式在二进制表示中无法精确地表示所有十进制的小数。例如，十进制数 <code>0.1</code> 在二进制浮点数中是一个无限循环小数，只能近似表示为 <code>0.1000000000000000055511151231257827021181583404541015625</code>。而使用 <code>new BigDecimal(double)</code> 构造函数时<code>double</code>类型的数值的会将其近似值传递给 <code>BigDecimal</code>，进入导致精度丢失。例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">double</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> value </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bd </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(value)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(bd);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码最终会输出：<code>0.1000000000000000055511151231257827021181583404541015625</code>而我们所期待的 <code>BigDecimal</code> 实际为 <code>0.1</code>。因此为了避免构建<code>BigDecimal</code>时出现精度丢失的问题，<strong>「推荐使用它的<code>BigDecimal(String val)</code>构造方法或者  <code>BigDecimal.valueOf(double val)</code> 静态方法来创建对象。」</strong></p><blockquote><p>❝</p><p>2.使用 <code>BigDecimal</code>进行除法运算时，指明数据结果的精度</p><p>❞</p></blockquote><p><code>BigDecimal</code> 在进行除法运算时，<strong>「如果不指定截取的精度和舍入模式，当出现数据无法整除时，会出现 <code>ArithmeticException</code> 异常」</strong>。例如 <code>1 / 3</code>时其会得到一个无限循环小数。这时如果没有明确指定精度和舍入方式，<code>BigDecimal</code> 将无法完成除法运算并抛出异常。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BigDecimalDivisionExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">         BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> num1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">         BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> num2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;3&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">         BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> num1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">divide</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(num2);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，<code>num1 / num2</code>的结果为一个无限循环小数 <code>0.333...</code>。<strong>「由于我们并未在代码中指定精度和舍入模式，所以当执行上述代码时如出现如下异常」</strong>：<code>Exception: Non-terminating decimal expansion; no exact representable decimal result.</code></p><p>为了避免上述异常的发生，可以再执行<code>divide</code>显示的指定精度截取方式。具体方式如下：<code>num1.divide(num2,2, RoundingMode.HALF_UP);</code>在本例中对数据保留了两位小数，同时使用<code>RoundingMode.HALF_UP</code>四舍五入的截取方式。</p><p>事实上 <code>BigDecimal</code>除了外<code>RoundingMode.HALF_UP</code>的舍入方式外，还有如下的截取方式：</p><ul><li><code>RoundingMode.HALF_UP</code>：四舍五入，向上舍入。</li><li><code>RoundingMode.HALF_DOWN</code>：四舍五入，向下舍入。</li><li><code>RoundingMode.HALF_EVEN</code>：四舍五入，如果舍弃部分等于 0.5，则舍入到最接近的偶数。</li></ul><blockquote><p>❝</p><p>3.根据业务需要，合理的使用<code>compareTo</code>和<code>equals</code></p><p>❞</p></blockquote><p>由于<code>BigDecimal</code> 内部对 <code>equals</code>方法逻辑进行了重写，这使得<code>equals</code>方法不仅比较数值部分，还比较标度。因此只有数值和标度都相同时<code>equals</code> 方法才会返回 <code>true</code>。例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BigDecimalComparison</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">         BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bd1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">         BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bd2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.00&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">         </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">         System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">bd1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(bd2)); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 输出 false</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>bd1 = 1.0</code>  <code>bd2 = 1.00</code> 两个数的数值部分代表的含义是完全相同的，但其精度却不同，此时如果使用<code>equals</code> 方法进行比较，则会返回 <code>false</code>。如果贸然使用<code>equals</code> 是很容易导致出现意料之外的结果。</p><p>为了保证数值的比较，<code>BigDecimal</code> 内部也对<code>compareTo</code> 方法进行了重写，使得<code>compareTo</code>方法只比较<code>BigDecimal</code>的数值部分而不考虑标度。<strong>「因此如果两个 <code>BigDecimal</code>对象的数值相等，即使标度不同<code>compareTo</code> 方法也会认为它们相等。」</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BigDecimalComparison</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">         BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bd1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">         BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bd2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.00&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">         System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">bd1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">compareTo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(bd2)); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中最终的输出结果为<code>0</code>，即代表<code>bd1</code>和<code>bd2</code>相等。这主要是因为<code>bd1</code>和<code>bd2</code>的数值相等因此<code>compareTo</code> 方法返回 <code>0</code>。</p><p>因此对于为了避免不必要的混淆和错误，尽量遵循以下最佳实践：</p><ul><li><strong>「明确比较目的」</strong>：在使用 <code>BigDecimal</code> 进行比较时，首先明确你的比较目的是检查数值相等还是完全相等（包括标度）。如果仅比较数值，请使用 <code>compareTo</code> 方法。如果需要完全相等，请使用 <code>equals</code> 方法。</li><li><strong>「避免误解」</strong>：理解 <code>BigDecimal</code> 的 <code>equals</code> 方法会考虑标度，而 <code>compareTo</code> 方法只比较数值。在常见的数值比较中，更推荐使用 <code>compareTo</code> 方法。</li></ul><blockquote><p>❝</p><p>4.慎用<code>BigDecimal</code>的<code>toString</code>方法</p><p>❞</p></blockquote><p><code>BigDecimal</code>内部对<code>toString</code>方法进行<code>重载</code>，这使得<code>BigDecimal</code> 的 <code>toString</code> 方法会自动去除尾随零，并且使用科学计数法表示非常大的或非常小的数值。例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BigDecimalToStringExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">         BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bd1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;123.4500&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">         BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bd2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.00012345&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">         System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">bd1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()); </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">         System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">bd2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()); </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码分别会输出<code>123.45、1.2345E-4</code>。其中<code>bd1</code> 的尾随零被去除，而 <code>bd2</code> 使用了科学计数法进行数据的表示。而为了避免这类问题的发生，可以使用 <code>BigDecimal</code> 的 <code>toPlainString</code> 方法。该方法不会去除尾随零，也不会使用科学计数法。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.math.BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BigDecimalToPlainStringExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">         BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bd1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;123.4500&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">         BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bd2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0.00012345&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">         </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">         System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">bd1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toPlainString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 输出 123.4500</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">         System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">bd2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toPlainString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()); </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 输出 0.00012345</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不难看出，在这个例子中<code>toPlainString</code> 方法保留了尾随零，并且没有使用科学计数法，输出格式更加直观。</p><ul><li><strong>「<code>toString</code> 方法」</strong>：自动去除尾随零，使用科学计数法表示非常大或非常小的数值。可能导致格式不符合预期。</li><li><strong>「<code>toPlainString</code> 方法」</strong>：不会去除尾随零，不会使用科学计数法，适合需要保留原始数值格式的场景。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>本文主要对<code>BigDecimal</code>内部对于浮点数的存储规则进行分析，以加深读者对于<code>BigDecimal</code>的理解。同时整理了如下五条<code>BigDecimal</code>使用的最佳实践：</p><ol><li>为了避免精度丢失，尽量使用<code>BigDecimal(String val)</code>构造方法或者  <code>BigDecimal.valueOf(double val)</code> ；</li><li>使用 <code>BigDecimal</code>进行除法运算时，指明数据结果的精度；</li><li>根据业务需要，合理的使用<code>compareTo</code>和<code>equals</code>；</li><li>慎用<code>BigDecimal</code>的<code>toString</code>方法。</li></ol><blockquote><p>参考链接：<a href="https://mp.weixin.qq.com/s/ShXkr9KKXsDBvmh5PlUgUA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/ShXkr9KKXsDBvmh5PlUgUA</a>，整理：沉默王二</p></blockquote>`,52),t=[n];function h(d,k){return a(),s("div",null,t)}const r=i(l,[["render",h],["__file","bigdecimal-biginteger.html.vue"]]),o=JSON.parse('{"path":"/basic-grammar/bigdecimal-biginteger.html","title":"BigDecimal，非常大的高精度浮点数","lang":"zh-CN","frontmatter":{"title":"BigDecimal，非常大的高精度浮点数","shortTitle":"掌握BigDecimal","description":"BigDecimal是Java中用于浮点数数值计算的类，其主要适合用于处理需要精确表示和运算的场景。","author":"毅航","category":["微信公众号"],"head":[["meta",{"property":"og:url","content":"https://javabetter.cn/basic-grammar/bigdecimal-biginteger.html"}],["meta",{"property":"og:site_name","content":"二哥的Java进阶之路"}],["meta",{"property":"og:title","content":"BigDecimal，非常大的高精度浮点数"}],["meta",{"property":"og:description","content":"BigDecimal是Java中用于浮点数数值计算的类，其主要适合用于处理需要精确表示和运算的场景。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin//zhangwbigdecimalxjqyljzjsj-d87c0e82-6ab7-479f-a5fb-6a1c863f5d76.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-06T02:36:11.000Z"}],["meta",{"property":"article:author","content":"毅航"}],["meta",{"property":"article:modified_time","content":"2024-11-06T02:36:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"BigDecimal，非常大的高精度浮点数\\",\\"image\\":[\\"http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin//zhangwbigdecimalxjqyljzjsj-d87c0e82-6ab7-479f-a5fb-6a1c863f5d76.jpg\\",\\"http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/nice-article/weixin//zhangwbigdecimalxjqyljzjsj-5d30da6f-c6a4-44cc-9919-8827d027269c.jpg\\"],\\"dateModified\\":\\"2024-11-06T02:36:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"毅航\\"}]}"]]},"headers":[{"level":2,"title":"BigDecimal简介","slug":"bigdecimal简介","link":"#bigdecimal简介","children":[]},{"level":2,"title":"BigDecimal数据存储的秘密","slug":"bigdecimal数据存储的秘密","link":"#bigdecimal数据存储的秘密","children":[]},{"level":2,"title":"BigDecimal的最佳实践","slug":"bigdecimal的最佳实践","link":"#bigdecimal的最佳实践","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1605715132000,"updatedTime":1730860571000,"contributors":[{"name":"沉默王二","email":"www.qing_gee@163.com","commits":3}]},"readingTime":{"minutes":8.58,"words":2573},"filePathRelative":"basic-grammar/bigdecimal-biginteger.md","localizedDate":"2020年11月18日","excerpt":"<p><code>BigDecimal</code>是<code>Java</code>中用于浮点数数值计算的类，其主要适合用于处理需要精确表示和运算的场景。<strong>「<code>BigDecimal</code>不仅能精确表示非常大的或非常小的数字，同时还提供任意精度的运算。其有效的解决了浮点数（<code>float</code>和<code>double</code>）在进行精确计算时可能出现的舍入误差问题。」</strong></p>\\n<h2>BigDecimal简介</h2>\\n<p>在处理金融、科学等领域的计算时，为了解决<code>double</code>或<code>float</code>在计算值存在的精度缺失问题<code>BigDecimal</code>应运而生。<code>BigDecimal</code>在设计之初**「皆在提供更高的精度和准确性，以确保浮点数运算的准确性」**。因此其具有如下特点：</p>"}');export{r as comp,o as data};
